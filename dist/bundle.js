/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../typings/tsd.d.ts" />
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(158);
	var component_details_1 = __webpack_require__(159);
	var component_editor_1 = __webpack_require__(163);
	var component_results_1 = __webpack_require__(164);
	var Mutators = __webpack_require__(165);
	var Schedulers = __webpack_require__(167);
	var AppState = (function () {
	    function AppState() {
	        this.mutators = Mutators.mutators();
	        this.sources = Schedulers.sources();
	        this.schedulers = this.sources.map(function (source) { return eval("(" + source + ")"); });
	        this.gcSpeed = 1000000;
	        this.floatingGarbageRatio = 0.0;
	        this.step = 300;
	    }
	    return AppState;
	})();
	var App = (function (_super) {
	    __extends(App, _super);
	    function App() {
	        _super.apply(this, arguments);
	        this.state = new AppState();
	    }
	    App.prototype.onSchedulerChange = function (index) {
	        this.setState(this.state);
	    };
	    App.prototype.onFloatingGarbageChange = function (event) {
	        this.state.floatingGarbageRatio = event.target.valueAsNumber / 100.0;
	        this.setState(this.state);
	    };
	    App.prototype.onGcSpeedChange = function (event) {
	        this.state.gcSpeed = event.target.valueAsNumber;
	        this.setState(this.state);
	    };
	    App.prototype.render = function () {
	        var _this = this;
	        var count = Math.max(this.state.schedulers.length, 1);
	        var width = Math.floor(90 / count).toString() + "%";
	        var floatingGarbagePercentage = Math.round(this.state.floatingGarbageRatio * 100);
	        return (React.createElement("div", null, React.createElement("h3", null, "Scheduler"), React.createElement("div", {"style": { width: width }}, React.createElement("p", null, " A scheduler sets the heap limit and/or the time limit in the ", React.createElement("code", null, "onStart"), " callback." + ' ' + "Whenever one of the limits is reached, the corresponding", React.createElement("code", null, "onHeapLimit/onTimeLimit"), " callback of the scheduler is invoked with" + ' ' + "the current heap size and the current time." + ' ' + "If the callback returns ", React.createElement("code", null, "true"), " then garbage collection is triggered."), React.createElement("p", null, " After garbage collection the ", React.createElement("code", null, "onGarbageCollection"), " callback gives the" + ' ' + "scheduler chance to update the limits."), React.createElement("p", null, "Setting a limit to 0 disables the limit.")), React.createElement(component_editor_1.Editor, {"sources": this.state.sources, "schedulers": this.state.schedulers, "onSchedulerChange": function (index) { return _this.onSchedulerChange(index); }}), React.createElement("h3", null, "Garbage Collector Parameters"), React.createElement("table", null, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", null, React.createElement("label", null, "Floating Garbage Percentage")), React.createElement("td", null, React.createElement("input", {"type": "range", "min": "0", "max": "100", "value": floatingGarbagePercentage.toString(), "onChange": function (event) { return _this.onFloatingGarbageChange(event); }})), React.createElement("td", null, floatingGarbagePercentage, "% - the percentage of dead objects that stay in the heap until the next garbage collection.")), React.createElement("tr", null, React.createElement("td", null, React.createElement("label", null, "Garbage Collection Speed")), React.createElement("td", null, React.createElement("input", {"type": "range", "min": "102400", "max": "10485760", "value": this.state.gcSpeed.toString(), "onChange": function (event) { return _this.onGcSpeedChange(event); }})), React.createElement("td", null, Math.round(this.state.gcSpeed / 1024 / 1024 * 10) / 10, " MB/ms")))), React.createElement("h3", null, "Results"), React.createElement("div", null, this.state.sources.map(function (source, index) {
	            return React.createElement("div", {"key": index, "style": { display: "inline-block", width: width }}, React.createElement(component_results_1.Results, {"mutators": _this.state.mutators, "gcSpeed": _this.state.gcSpeed, "floatingGarbageRatio": _this.state.floatingGarbageRatio, "step": _this.state.step, "source": source}));
	        })), React.createElement("h3", null, "Details"), React.createElement("div", null, React.createElement(component_details_1.Details, {"schedulers": this.state.schedulers, "mutators": this.state.mutators, "gcSpeed": this.state.gcSpeed, "floatingGarbageRatio": this.state.floatingGarbageRatio, "step": this.state.step}))));
	    };
	    return App;
	})(React.Component);
	ReactDOM.render(React.createElement("div", null, " ", React.createElement(App, null), " "), document.getElementById("app"));


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(3);
	var ReactDOMServer = __webpack_require__(148);
	var ReactIsomorphic = __webpack_require__(152);

	var assign = __webpack_require__(39);
	var deprecated = __webpack_require__(157);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactDefaultInjection = __webpack_require__(71);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(54);
	var ReactVersion = __webpack_require__(146);

	var findDOMNode = __webpack_require__(91);
	var renderSubtreeIntoContainer = __webpack_require__(147);
	var warning = __webpack_require__(25);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(9);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 4 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactMount = __webpack_require__(28);

	var assign = __webpack_require__(39);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setTextContent = __webpack_require__(20);
	var validateDOMNesting = __webpack_require__(70);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(8);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);
	var ReactPerf = __webpack_require__(18);

	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var invariant = __webpack_require__(13);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var createNodesFromMarkup = __webpack_require__(10);
	var emptyFunction = __webpack_require__(15);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var createArrayFromMixed = __webpack_require__(11);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(12);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var invariant = __webpack_require__(13);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setInnerHTML = __webpack_require__(19);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactPerf = __webpack_require__(18);

	var quoteAttributeValueForBrowser = __webpack_require__(24);
	var warning = __webpack_require__(25);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(21);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(15);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactMount = __webpack_require__(28);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);

	var invariant = __webpack_require__(13);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var containsNode = __webpack_require__(59);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);
	var setInnerHTML = __webpack_require__(19);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPluginRegistry = __webpack_require__(32);
	var ReactEventEmitterMixin = __webpack_require__(37);
	var ReactPerf = __webpack_require__(18);
	var ViewportMetrics = __webpack_require__(38);

	var assign = __webpack_require__(39);
	var isEventSupported = __webpack_require__(40);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(32);
	var EventPluginUtils = __webpack_require__(33);
	var ReactErrorUtils = __webpack_require__(34);

	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var ReactErrorUtils = __webpack_require__(34);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(31);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);

	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(46);

	var invariant = __webpack_require__(13);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(49);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(51);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(52);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(60);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(61);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 61 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(63);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactNativeComponent = __webpack_require__(69);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactPerf = __webpack_require__(18);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var warning = __webpack_require__(25);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 67 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactReconciler = __webpack_require__(50);

	var assign = __webpack_require__(39);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(72);
	var ChangeEventPlugin = __webpack_require__(80);
	var ClientReactRootIndex = __webpack_require__(83);
	var DefaultEventPluginOrder = __webpack_require__(84);
	var EnterLeaveEventPlugin = __webpack_require__(85);
	var ExecutionEnvironment = __webpack_require__(9);
	var HTMLDOMPropertyConfig = __webpack_require__(89);
	var ReactBrowserComponentMixin = __webpack_require__(90);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactDOMComponent = __webpack_require__(93);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactEventListener = __webpack_require__(118);
	var ReactInjection = __webpack_require__(121);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactReconcileTransaction = __webpack_require__(125);
	var SelectEventPlugin = __webpack_require__(130);
	var ServerReactRootIndex = __webpack_require__(131);
	var SimpleEventPlugin = __webpack_require__(132);
	var SVGDOMPropertyConfig = __webpack_require__(141);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(142);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var FallbackCompositionState = __webpack_require__(74);
	var SyntheticCompositionEvent = __webpack_require__(76);
	var SyntheticInputEvent = __webpack_require__(78);

	var keyOf = __webpack_require__(79);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);

	var warning = __webpack_require__(25);

	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var getTextContentAccessor = __webpack_require__(75);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;
	  this.target = nativeEventTarget;
	  this.currentTarget = nativeEventTarget;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 79 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(54);
	var SyntheticEvent = __webpack_require__(77);

	var getEventTarget = __webpack_require__(81);
	var isEventSupported = __webpack_require__(40);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(79);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var SyntheticMouseEvent = __webpack_require__(86);

	var ReactMount = __webpack_require__(28);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);
	var ViewportMetrics = __webpack_require__(38);

	var getEventModifierState = __webpack_require__(88);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	var getEventTarget = __webpack_require__(81);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ExecutionEnvironment = __webpack_require__(9);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(47);

	var findDOMNode = __webpack_require__(91);
	var warning = __webpack_require__(25);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMount = __webpack_require__(28);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(54);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(94);
	var CSSPropertyOperations = __webpack_require__(96);
	var DOMProperty = __webpack_require__(23);
	var DOMPropertyOperations = __webpack_require__(22);
	var EventConstants = __webpack_require__(30);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDOMButton = __webpack_require__(104);
	var ReactDOMInput = __webpack_require__(105);
	var ReactDOMOption = __webpack_require__(109);
	var ReactDOMSelect = __webpack_require__(112);
	var ReactDOMTextarea = __webpack_require__(113);
	var ReactMount = __webpack_require__(28);
	var ReactMultiChild = __webpack_require__(114);
	var ReactPerf = __webpack_require__(18);
	var ReactUpdateQueue = __webpack_require__(53);

	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var invariant = __webpack_require__(13);
	var isEventSupported = __webpack_require__(40);
	var keyOf = __webpack_require__(79);
	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var shallowEqual = __webpack_require__(117);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(28);

	var findDOMNode = __webpack_require__(91);
	var focusNode = __webpack_require__(95);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(97);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactPerf = __webpack_require__(18);

	var camelizeStyleName = __webpack_require__(98);
	var dangerousStyleValue = __webpack_require__(100);
	var hyphenateStyleName = __webpack_require__(101);
	var memoizeStringOnly = __webpack_require__(103);
	var warning = __webpack_require__(25);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(99);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 99 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(97);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(102);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 104 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(27);
	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(107);
	var ReactPropTypeLocations = __webpack_require__(65);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocationNames = __webpack_require__(66);

	var emptyFunction = __webpack_require__(15);
	var getIteratorFn = __webpack_require__(108);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 108 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(110);
	var ReactDOMSelect = __webpack_require__(112);

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    nativeProps.children = content;
	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);
	var ReactElement = __webpack_require__(42);

	var emptyFunction = __webpack_require__(15);
	var traverseAllChildren = __webpack_require__(111);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);

	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(106);
	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactReconciler = __webpack_require__(50);
	var ReactChildReconciler = __webpack_require__(115);

	var flattenChildren = __webpack_require__(116);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(50);

	var instantiateReactComponent = __webpack_require__(62);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 117 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(119);
	var ExecutionEnvironment = __webpack_require__(9);
	var PooledClass = __webpack_require__(56);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var getEventTarget = __webpack_require__(81);
	var getUnboundedScrollPosition = __webpack_require__(120);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(15);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var EventPluginHub = __webpack_require__(31);
	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactClass = __webpack_require__(122);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactNativeComponent = __webpack_require__(69);
	var ReactPerf = __webpack_require__(18);
	var ReactRootIndex = __webpack_require__(46);
	var ReactUpdates = __webpack_require__(54);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(123);
	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactNoopUpdateQueue = __webpack_require__(124);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var keyMirror = __webpack_require__(17);
	var keyOf = __webpack_require__(79);
	var warning = __webpack_require__(25);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(124);

	var canDefineProperty = __webpack_require__(43);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(25);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactInputSelection = __webpack_require__(126);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(127);

	var containsNode = __webpack_require__(59);
	var focusNode = __webpack_require__(95);
	var getActiveElement = __webpack_require__(129);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var getNodeForCharacterOffset = __webpack_require__(128);
	var getTextContentAccessor = __webpack_require__(75);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactInputSelection = __webpack_require__(126);
	var SyntheticEvent = __webpack_require__(77);

	var getActiveElement = __webpack_require__(129);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);
	var shallowEqual = __webpack_require__(117);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventListener = __webpack_require__(119);
	var EventPropagators = __webpack_require__(73);
	var ReactMount = __webpack_require__(28);
	var SyntheticClipboardEvent = __webpack_require__(133);
	var SyntheticEvent = __webpack_require__(77);
	var SyntheticFocusEvent = __webpack_require__(134);
	var SyntheticKeyboardEvent = __webpack_require__(135);
	var SyntheticMouseEvent = __webpack_require__(86);
	var SyntheticDragEvent = __webpack_require__(138);
	var SyntheticTouchEvent = __webpack_require__(139);
	var SyntheticUIEvent = __webpack_require__(87);
	var SyntheticWheelEvent = __webpack_require__(140);

	var emptyFunction = __webpack_require__(15);
	var getEventCharCode = __webpack_require__(136);
	var invariant = __webpack_require__(13);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	var getEventCharCode = __webpack_require__(136);
	var getEventKey = __webpack_require__(137);
	var getEventModifierState = __webpack_require__(88);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 136 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(136);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(86);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	var getEventModifierState = __webpack_require__(88);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(86);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactDefaultPerfAnalysis = __webpack_require__(143);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);

	var performanceNow = __webpack_require__(144);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(39);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(145);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 146 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.6';

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(28);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(71);
	var ReactServerRendering = __webpack_require__(149);
	var ReactVersion = __webpack_require__(146);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactServerBatchingStrategy = __webpack_require__(150);
	var ReactServerRenderingTransaction = __webpack_require__(151);
	var ReactUpdates = __webpack_require__(54);

	var emptyObject = __webpack_require__(58);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 150 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);
	var CallbackQueue = __webpack_require__(55);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(110);
	var ReactComponent = __webpack_require__(123);
	var ReactClass = __webpack_require__(122);
	var ReactDOMFactories = __webpack_require__(153);
	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);
	var ReactPropTypes = __webpack_require__(107);
	var ReactVersion = __webpack_require__(146);

	var assign = __webpack_require__(39);
	var onlyChild = __webpack_require__(156);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);

	var mapObject = __webpack_require__(155);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactCurrentOwner = __webpack_require__(5);

	var canDefineProperty = __webpack_require__(43);
	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 155 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(3);


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(1);
	var component_graph_1 = __webpack_require__(160);
	var DetailsProps = (function () {
	    function DetailsProps() {
	    }
	    return DetailsProps;
	})();
	var DetailsState = (function () {
	    function DetailsState() {
	    }
	    return DetailsState;
	})();
	var Details = (function (_super) {
	    __extends(Details, _super);
	    function Details() {
	        _super.apply(this, arguments);
	        this.state = new DetailsState();
	    }
	    Details.prototype.componentWillMount = function () {
	        this.state.mutatorIndex = 0;
	        this.state.running = false;
	        this.state.runCount = 0;
	        this.setState(this.state);
	        this.schedulers = this.props.schedulers.map(function (x) { return x; });
	    };
	    Details.prototype.componentWillReceiveProps = function (newProps) {
	        var changed = false;
	        if (newProps.schedulers.length !== this.schedulers.length) {
	            changed = true;
	        }
	        else {
	            for (var i = 0; i < this.schedulers.length; i++) {
	                if (this.schedulers[i] !== newProps.schedulers[i]) {
	                    changed = true;
	                }
	            }
	        }
	        if (this.props.floatingGarbageRatio !== newProps.floatingGarbageRatio) {
	            changed = true;
	        }
	        if (this.props.gcSpeed !== newProps.gcSpeed) {
	            changed = true;
	        }
	        if (changed) {
	            this.state.runCount += 1;
	            this.setState(this.state);
	        }
	    };
	    Details.prototype.onMutatorChange = function (event) {
	        this.state.mutatorIndex = parseInt(event.target.value);
	        this.state.runCount += 1;
	        this.setState(this.state);
	    };
	    Details.prototype.onRunButtonClick = function (event) {
	        this.state.running = !this.state.running;
	        this.state.runCount += 1;
	        this.setState(this.state);
	    };
	    Details.prototype.render = function () {
	        var _this = this;
	        var count = Math.max(this.props.schedulers.length, 1);
	        var width = Math.floor(90 / count).toString() + "%";
	        var mutator = this.props.mutators[this.state.mutatorIndex];
	        return (React.createElement("div", null, React.createElement("p", null, "Application: ", React.createElement("select", {"onChange": this.onMutatorChange.bind(this), "value": this.state.mutatorIndex.toString()}, this.props.mutators.map(function (m, i) {
	            return React.createElement("option", {"key": i, "value": i.toString()}, m.label);
	        })), " ", React.createElement("button", {"onClick": function (event) { return _this.onRunButtonClick(event); }}, this.state.running ? "Stop" : "Run")), React.createElement("p", null, "Thick lines in the graph show the heap size and the total size of live objects." + ' ' + "A thin line is the heap limit. "), React.createElement("div", null, " ", this.props.schedulers.map(function (scheduler, i) {
	            return React.createElement("div", {"key": i, "style": { display: "inline-block", width: width }}, React.createElement(component_graph_1.Graph, {"width": 300, "height": 150, "duration": mutator.duration, "gcSpeed": _this.props.gcSpeed, "floatingGarbageRatio": _this.props.floatingGarbageRatio, "step": _this.props.step, "mutator": mutator, "scheduler": scheduler, "running": _this.state.running, "runCount": _this.state.runCount}));
	        }))));
	    };
	    return Details;
	})(React.Component);
	exports.Details = Details;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Smoothie = __webpack_require__(161);
	var React = __webpack_require__(1);
	var runner_1 = __webpack_require__(162);
	var MB = 1024 * 1024;
	var GraphProps = (function () {
	    function GraphProps() {
	    }
	    return GraphProps;
	})();
	var GraphState = (function () {
	    function GraphState() {
	        this.time = 0;
	        this.live = 0;
	        this.heap = 0;
	        this.maxHeap = 0;
	        this.avgHeap = 0;
	        this.timeInGC = 0;
	        this.garbageCollections = [];
	    }
	    return GraphState;
	})();
	function customYRangeFunction(range) {
	    return { min: Math.floor(range.min * 0.95), max: Math.floor(range.max * 1.05) };
	}
	var Graph = (function (_super) {
	    __extends(Graph, _super);
	    function Graph() {
	        _super.apply(this, arguments);
	        this.smoothie = new Smoothie.SmoothieChart({
	            yRangeFunction: customYRangeFunction,
	            grid: { fillStyle: "#f5f7ff", strokeStyle: "#d6d6d6", verticalSections: 4 },
	            labels: { fillStyle: "#000000" }
	        });
	        this.heapSeries = new Smoothie.TimeSeries();
	        this.minHeapSeries = new Smoothie.TimeSeries();
	        this.heapLimitSeries = new Smoothie.TimeSeries();
	        this.state = new GraphState();
	        this.initialized = false;
	        this.canvas = null;
	    }
	    Graph.prototype.reset = function (props) {
	        clearTimeout(this.timer);
	        this.heapSeries.clear();
	        this.minHeapSeries.clear();
	        this.heapLimitSeries.clear();
	        if (!props.running) {
	            this.smoothie.stop();
	        }
	        else {
	            this.runner = new runner_1.Runner(props.duration, props.gcSpeed, props.floatingGarbageRatio, props.mutator, props.scheduler);
	            this.runner.start();
	            this.startTime = (new Date()).valueOf();
	            this.timer = setTimeout(this.advance.bind(this), props.step);
	            this.smoothie.start();
	        }
	    };
	    Graph.prototype.componentWillMount = function () {
	        this.smoothie.addTimeSeries(this.minHeapSeries, {
	            strokeStyle: "#603030",
	            fillStyle: "rgba(183,128,123,0.30)",
	            lineWidth: 4
	        });
	        this.smoothie.addTimeSeries(this.heapSeries, {
	            strokeStyle: "#f06060",
	            fillStyle: "rgba(183,128,123,0.30)",
	            lineWidth: 4
	        });
	        this.smoothie.addTimeSeries(this.heapLimitSeries, {
	            strokeStyle: "#906060",
	            lineWidth: 1
	        });
	        this.reset(this.props);
	    };
	    Graph.prototype.componentWillUnmount = function () {
	        clearTimeout(this.timer);
	    };
	    Graph.prototype.onMountCanvas = function (canvas) {
	        if (!this.initialized) {
	            this.smoothie.streamTo(canvas, 500);
	            this.initialized = true;
	            this.timer = setTimeout(this.advance.bind(this), 100);
	        }
	    };
	    Graph.prototype.advance = function () {
	        if (!this.props.running) {
	            this.smoothie.stop();
	            return;
	        }
	        var currentTime = (new Date()).valueOf();
	        var nextTime = this.runner.nextTime(this.props.step);
	        while (this.startTime + nextTime < currentTime && nextTime < this.runner.duration) {
	            this.runner.advance(nextTime);
	            nextTime = this.runner.nextTime(this.props.step);
	        }
	        this.state.time = this.runner.time;
	        this.state.live = this.runner.heap - this.runner.dead - this.runner.floatingGarbage;
	        this.state.heap = this.runner.heap;
	        this.state.maxHeap = this.runner.maxHeap;
	        this.state.avgHeap = this.runner.averageHeap();
	        this.state.timeInGC = this.runner.timeInGC;
	        this.state.garbageCollections = this.runner.garbageCollections;
	        if (nextTime < this.runner.duration) {
	            this.timer = setTimeout(this.advance.bind(this), this.props.step);
	            this.minHeapSeries.append(currentTime, this.state.live);
	            this.heapSeries.append(currentTime, this.state.heap);
	            if (this.runner.scheduler.heapLimit > 0) {
	                this.heapLimitSeries.append(currentTime, this.runner.scheduler.heapLimit);
	            }
	        }
	        else {
	            this.smoothie.stop();
	        }
	        this.setState(this.state);
	    };
	    Graph.prototype.componentWillReceiveProps = function (newProps) {
	        if (newProps.runCount !== this.props.runCount) {
	            this.reset(newProps);
	        }
	    };
	    Graph.prototype.render = function () {
	        var _this = this;
	        var gc = this.state.garbageCollections[this.state.garbageCollections.length - 1];
	        var heapBefore = 0;
	        var heapAfter = 0;
	        var duration = 0;
	        if (gc) {
	            heapBefore = gc.heapBefore;
	            heapAfter = gc.heapAfter;
	            duration = gc.duration;
	        }
	        return (React.createElement("div", null, React.createElement("div", null, this.props.scheduler.label(), ":"), React.createElement("canvas", {"width": this.props.width, "height": this.props.height, "ref": function (canvas) { return _this.onMountCanvas(canvas); }}), React.createElement("table", null, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", null, "Average Heap: "), React.createElement("td", null, Math.round(this.state.avgHeap / MB), " MB")), React.createElement("tr", null, React.createElement("td", null, "Maximum Heap: "), React.createElement("td", null, Math.round(this.state.maxHeap / MB), " MB")), React.createElement("tr", null, React.createElement("td", null, "Current Heap: "), React.createElement("td", null, Math.round(this.state.heap / MB), " MB")), React.createElement("tr", null, React.createElement("td", null, "Live: "), React.createElement("td", null, Math.round(this.state.live / MB), " MB")), React.createElement("tr", null, React.createElement("td", null, "GC Time: "), React.createElement("td", null, Math.round(this.state.timeInGC), " ms")), React.createElement("tr", null, React.createElement("td", null, "GC Count: "), React.createElement("td", null, this.state.garbageCollections.length)), React.createElement("tr", null, React.createElement("td", null, "Last GC: "), React.createElement("td", null, Math.round(heapBefore / MB), " MB => ", Math.round(heapAfter / MB), " MB,", Math.round(duration), " ms")), React.createElement("tr", null, React.createElement("td", null, "Total Time"), React.createElement("td", null, Math.round(this.state.time), " ms "))))));
	    };
	    return Graph;
	})(React.Component);
	exports.Graph = Graph;


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	// MIT License:
	//
	// Copyright (c) 2010-2013, Joe Walnes
	//               2013-2014, Drew Noakes
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE.

	/**
	 * Smoothie Charts - http://smoothiecharts.org/
	 * (c) 2010-2013, Joe Walnes
	 *     2013-2014, Drew Noakes
	 *
	 * v1.0: Main charting library, by Joe Walnes
	 * v1.1: Auto scaling of axis, by Neil Dunn
	 * v1.2: fps (frames per second) option, by Mathias Petterson
	 * v1.3: Fix for divide by zero, by Paul Nikitochkin
	 * v1.4: Set minimum, top-scale padding, remove timeseries, add optional timer to reset bounds, by Kelley Reynolds
	 * v1.5: Set default frames per second to 50... smoother.
	 *       .start(), .stop() methods for conserving CPU, by Dmitry Vyal
	 *       options.interpolation = 'bezier' or 'line', by Dmitry Vyal
	 *       options.maxValue to fix scale, by Dmitry Vyal
	 * v1.6: minValue/maxValue will always get converted to floats, by Przemek Matylla
	 * v1.7: options.grid.fillStyle may be a transparent color, by Dmitry A. Shashkin
	 *       Smooth rescaling, by Kostas Michalopoulos
	 * v1.8: Set max length to customize number of live points in the dataset with options.maxDataSetLength, by Krishna Narni
	 * v1.9: Display timestamps along the bottom, by Nick and Stev-io
	 *       (https://groups.google.com/forum/?fromgroups#!topic/smoothie-charts/-Ywse8FCpKI%5B1-25%5D)
	 *       Refactored by Krishna Narni, to support timestamp formatting function
	 * v1.10: Switch to requestAnimationFrame, removed the now obsoleted options.fps, by Gergely Imreh
	 * v1.11: options.grid.sharpLines option added, by @drewnoakes
	 *        Addressed warning seen in Firefox when seriesOption.fillStyle undefined, by @drewnoakes
	 * v1.12: Support for horizontalLines added, by @drewnoakes
	 *        Support for yRangeFunction callback added, by @drewnoakes
	 * v1.13: Fixed typo (#32), by @alnikitich
	 * v1.14: Timer cleared when last TimeSeries removed (#23), by @davidgaleano
	 *        Fixed diagonal line on chart at start/end of data stream, by @drewnoakes
	 * v1.15: Support for npm package (#18), by @dominictarr
	 *        Fixed broken removeTimeSeries function (#24) by @davidgaleano
	 *        Minor performance and tidying, by @drewnoakes
	 * v1.16: Bug fix introduced in v1.14 relating to timer creation/clearance (#23), by @drewnoakes
	 *        TimeSeries.append now deals with out-of-order timestamps, and can merge duplicates, by @zacwitte (#12)
	 *        Documentation and some local variable renaming for clarity, by @drewnoakes
	 * v1.17: Allow control over font size (#10), by @drewnoakes
	 *        Timestamp text won't overlap, by @drewnoakes
	 * v1.18: Allow control of max/min label precision, by @drewnoakes
	 *        Added 'borderVisible' chart option, by @drewnoakes
	 *        Allow drawing series with fill but no stroke (line), by @drewnoakes
	 * v1.19: Avoid unnecessary repaints, and fixed flicker in old browsers having multiple charts in document (#40), by @asbai
	 * v1.20: Add SmoothieChart.getTimeSeriesOptions and SmoothieChart.bringToFront functions, by @drewnoakes
	 * v1.21: Add 'step' interpolation mode, by @drewnoakes
	 * v1.22: Add support for different pixel ratios. Also add optional y limit formatters, by @copacetic
	 * v1.23: Fix bug introduced in v1.22 (#44), by @drewnoakes
	 * v1.24: Fix bug introduced in v1.23, re-adding parseFloat to y-axis formatter defaults, by @siggy_sf
	 * v1.25: Fix bug seen when adding a data point to TimeSeries which is older than the current data, by @Nking92
	 *        Draw time labels on top of series, by @comolosabia
	 *        Add TimeSeries.clear function, by @drewnoakes
	 * v1.26: Add support for resizing on high device pixel ratio screens, by @copacetic
	 * v1.27: Fix bug introduced in v1.26 for non whole number devicePixelRatio values, by @zmbush
	 */

	;(function(exports) {

	  var Util = {
	    extend: function() {
	      arguments[0] = arguments[0] || {};
	      for (var i = 1; i < arguments.length; i++)
	      {
	        for (var key in arguments[i])
	        {
	          if (arguments[i].hasOwnProperty(key))
	          {
	            if (typeof(arguments[i][key]) === 'object') {
	              if (arguments[i][key] instanceof Array) {
	                arguments[0][key] = arguments[i][key];
	              } else {
	                arguments[0][key] = Util.extend(arguments[0][key], arguments[i][key]);
	              }
	            } else {
	              arguments[0][key] = arguments[i][key];
	            }
	          }
	        }
	      }
	      return arguments[0];
	    }
	  };

	  /**
	   * Initialises a new <code>TimeSeries</code> with optional data options.
	   *
	   * Options are of the form (defaults shown):
	   *
	   * <pre>
	   * {
	   *   resetBounds: true,        // enables/disables automatic scaling of the y-axis
	   *   resetBoundsInterval: 3000 // the period between scaling calculations, in millis
	   * }
	   * </pre>
	   *
	   * Presentation options for TimeSeries are specified as an argument to <code>SmoothieChart.addTimeSeries</code>.
	   *
	   * @constructor
	   */
	  function TimeSeries(options) {
	    this.options = Util.extend({}, TimeSeries.defaultOptions, options);
	    this.clear();
	  }

	  TimeSeries.defaultOptions = {
	    resetBoundsInterval: 3000,
	    resetBounds: true
	  };

	  /**
	   * Clears all data and state from this TimeSeries object.
	   */
	  TimeSeries.prototype.clear = function() {
	    this.data = [];
	    this.maxValue = Number.NaN; // The maximum value ever seen in this TimeSeries.
	    this.minValue = Number.NaN; // The minimum value ever seen in this TimeSeries.
	  };

	  /**
	   * Recalculate the min/max values for this <code>TimeSeries</code> object.
	   *
	   * This causes the graph to scale itself in the y-axis.
	   */
	  TimeSeries.prototype.resetBounds = function() {
	    if (this.data.length) {
	      // Walk through all data points, finding the min/max value
	      this.maxValue = this.data[0][1];
	      this.minValue = this.data[0][1];
	      for (var i = 1; i < this.data.length; i++) {
	        var value = this.data[i][1];
	        if (value > this.maxValue) {
	          this.maxValue = value;
	        }
	        if (value < this.minValue) {
	          this.minValue = value;
	        }
	      }
	    } else {
	      // No data exists, so set min/max to NaN
	      this.maxValue = Number.NaN;
	      this.minValue = Number.NaN;
	    }
	  };

	  /**
	   * Adds a new data point to the <code>TimeSeries</code>, preserving chronological order.
	   *
	   * @param timestamp the position, in time, of this data point
	   * @param value the value of this data point
	   * @param sumRepeatedTimeStampValues if <code>timestamp</code> has an exact match in the series, this flag controls
	   * whether it is replaced, or the values summed (defaults to false.)
	   */
	  TimeSeries.prototype.append = function(timestamp, value, sumRepeatedTimeStampValues) {
	    // Rewind until we hit an older timestamp
	    var i = this.data.length - 1;
	    while (i >= 0 && this.data[i][0] > timestamp) {
	      i--;
	    }

	    if (i === -1) {
	      // This new item is the oldest data
	      this.data.splice(0, 0, [timestamp, value]);
	    } else if (this.data.length > 0 && this.data[i][0] === timestamp) {
	      // Update existing values in the array
	      if (sumRepeatedTimeStampValues) {
	        // Sum this value into the existing 'bucket'
	        this.data[i][1] += value;
	        value = this.data[i][1];
	      } else {
	        // Replace the previous value
	        this.data[i][1] = value;
	      }
	    } else if (i < this.data.length - 1) {
	      // Splice into the correct position to keep timestamps in order
	      this.data.splice(i + 1, 0, [timestamp, value]);
	    } else {
	      // Add to the end of the array
	      this.data.push([timestamp, value]);
	    }

	    this.maxValue = isNaN(this.maxValue) ? value : Math.max(this.maxValue, value);
	    this.minValue = isNaN(this.minValue) ? value : Math.min(this.minValue, value);
	  };

	  TimeSeries.prototype.dropOldData = function(oldestValidTime, maxDataSetLength) {
	    // We must always keep one expired data point as we need this to draw the
	    // line that comes into the chart from the left, but any points prior to that can be removed.
	    var removeCount = 0;
	    while (this.data.length - removeCount >= maxDataSetLength && this.data[removeCount + 1][0] < oldestValidTime) {
	      removeCount++;
	    }
	    if (removeCount !== 0) {
	      this.data.splice(0, removeCount);
	    }
	  };

	  /**
	   * Initialises a new <code>SmoothieChart</code>.
	   *
	   * Options are optional, and should be of the form below. Just specify the values you
	   * need and the rest will be given sensible defaults as shown:
	   *
	   * <pre>
	   * {
	   *   minValue: undefined,                      // specify to clamp the lower y-axis to a given value
	   *   maxValue: undefined,                      // specify to clamp the upper y-axis to a given value
	   *   maxValueScale: 1,                         // allows proportional padding to be added above the chart. for 10% padding, specify 1.1.
	   *   yRangeFunction: undefined,                // function({min: , max: }) { return {min: , max: }; }
	   *   scaleSmoothing: 0.125,                    // controls the rate at which y-value zoom animation occurs
	   *   millisPerPixel: 20,                       // sets the speed at which the chart pans by
	   *   enableDpiScaling: true,                   // support rendering at different DPI depending on the device
	   *   yMinFormatter: function(min, precision) { // callback function that formats the min y value label
	   *     return parseFloat(min).toFixed(precision);
	   *   },
	   *   yMaxFormatter: function(max, precision) { // callback function that formats the max y value label
	   *     return parseFloat(max).toFixed(precision);
	   *   },
	   *   maxDataSetLength: 2,
	   *   interpolation: 'bezier'                   // one of 'bezier', 'linear', or 'step'
	   *   timestampFormatter: null,                 // optional function to format time stamps for bottom of chart
	   *                                             // you may use SmoothieChart.timeFormatter, or your own: function(date) { return ''; }
	   *   horizontalLines: [],                      // [ { value: 0, color: '#ffffff', lineWidth: 1 } ]
	   *   grid:
	   *   {
	   *     fillStyle: '#000000',                   // the background colour of the chart
	   *     lineWidth: 1,                           // the pixel width of grid lines
	   *     strokeStyle: '#777777',                 // colour of grid lines
	   *     millisPerLine: 1000,                    // distance between vertical grid lines
	   *     sharpLines: false,                      // controls whether grid lines are 1px sharp, or softened
	   *     verticalSections: 2,                    // number of vertical sections marked out by horizontal grid lines
	   *     borderVisible: true                     // whether the grid lines trace the border of the chart or not
	   *   },
	   *   labels
	   *   {
	   *     disabled: false,                        // enables/disables labels showing the min/max values
	   *     fillStyle: '#ffffff',                   // colour for text of labels,
	   *     fontSize: 15,
	   *     fontFamily: 'sans-serif',
	   *     precision: 2
	   *   }
	   * }
	   * </pre>
	   *
	   * @constructor
	   */
	  function SmoothieChart(options) {
	    this.options = Util.extend({}, SmoothieChart.defaultChartOptions, options);
	    this.seriesSet = [];
	    this.currentValueRange = 1;
	    this.currentVisMinValue = 0;
	    this.lastRenderTimeMillis = 0;
	  }

	  SmoothieChart.defaultChartOptions = {
	    millisPerPixel: 20,
	    enableDpiScaling: true,
	    yMinFormatter: function(min, precision) {
	      return parseFloat(min).toFixed(precision);
	    },
	    yMaxFormatter: function(max, precision) {
	      return parseFloat(max).toFixed(precision);
	    },
	    maxValueScale: 1,
	    interpolation: 'bezier',
	    scaleSmoothing: 0.125,
	    maxDataSetLength: 2,
	    grid: {
	      fillStyle: '#000000',
	      strokeStyle: '#777777',
	      lineWidth: 1,
	      sharpLines: false,
	      millisPerLine: 1000,
	      verticalSections: 2,
	      borderVisible: true
	    },
	    labels: {
	      fillStyle: '#ffffff',
	      disabled: false,
	      fontSize: 10,
	      fontFamily: 'monospace',
	      precision: 2
	    },
	    horizontalLines: []
	  };

	  // Based on http://inspirit.github.com/jsfeat/js/compatibility.js
	  SmoothieChart.AnimateCompatibility = (function() {
	    var requestAnimationFrame = function(callback, element) {
	          var requestAnimationFrame =
	            window.requestAnimationFrame        ||
	            window.webkitRequestAnimationFrame  ||
	            window.mozRequestAnimationFrame     ||
	            window.oRequestAnimationFrame       ||
	            window.msRequestAnimationFrame      ||
	            function(callback) {
	              return window.setTimeout(function() {
	                callback(new Date().getTime());
	              }, 16);
	            };
	          return requestAnimationFrame.call(window, callback, element);
	        },
	        cancelAnimationFrame = function(id) {
	          var cancelAnimationFrame =
	            window.cancelAnimationFrame ||
	            function(id) {
	              clearTimeout(id);
	            };
	          return cancelAnimationFrame.call(window, id);
	        };

	    return {
	      requestAnimationFrame: requestAnimationFrame,
	      cancelAnimationFrame: cancelAnimationFrame
	    };
	  })();

	  SmoothieChart.defaultSeriesPresentationOptions = {
	    lineWidth: 1,
	    strokeStyle: '#ffffff'
	  };

	  /**
	   * Adds a <code>TimeSeries</code> to this chart, with optional presentation options.
	   *
	   * Presentation options should be of the form (defaults shown):
	   *
	   * <pre>
	   * {
	   *   lineWidth: 1,
	   *   strokeStyle: '#ffffff',
	   *   fillStyle: undefined
	   * }
	   * </pre>
	   */
	  SmoothieChart.prototype.addTimeSeries = function(timeSeries, options) {
	    this.seriesSet.push({timeSeries: timeSeries, options: Util.extend({}, SmoothieChart.defaultSeriesPresentationOptions, options)});
	    if (timeSeries.options.resetBounds && timeSeries.options.resetBoundsInterval > 0) {
	      timeSeries.resetBoundsTimerId = setInterval(
	        function() {
	          timeSeries.resetBounds();
	        },
	        timeSeries.options.resetBoundsInterval
	      );
	    }
	  };

	  /**
	   * Removes the specified <code>TimeSeries</code> from the chart.
	   */
	  SmoothieChart.prototype.removeTimeSeries = function(timeSeries) {
	    // Find the correct timeseries to remove, and remove it
	    var numSeries = this.seriesSet.length;
	    for (var i = 0; i < numSeries; i++) {
	      if (this.seriesSet[i].timeSeries === timeSeries) {
	        this.seriesSet.splice(i, 1);
	        break;
	      }
	    }
	    // If a timer was operating for that timeseries, remove it
	    if (timeSeries.resetBoundsTimerId) {
	      // Stop resetting the bounds, if we were
	      clearInterval(timeSeries.resetBoundsTimerId);
	    }
	  };

	  /**
	   * Gets render options for the specified <code>TimeSeries</code>.
	   *
	   * As you may use a single <code>TimeSeries</code> in multiple charts with different formatting in each usage,
	   * these settings are stored in the chart.
	   */
	  SmoothieChart.prototype.getTimeSeriesOptions = function(timeSeries) {
	    // Find the correct timeseries to remove, and remove it
	    var numSeries = this.seriesSet.length;
	    for (var i = 0; i < numSeries; i++) {
	      if (this.seriesSet[i].timeSeries === timeSeries) {
	        return this.seriesSet[i].options;
	      }
	    }
	  };

	  /**
	   * Brings the specified <code>TimeSeries</code> to the top of the chart. It will be rendered last.
	   */
	  SmoothieChart.prototype.bringToFront = function(timeSeries) {
	    // Find the correct timeseries to remove, and remove it
	    var numSeries = this.seriesSet.length;
	    for (var i = 0; i < numSeries; i++) {
	      if (this.seriesSet[i].timeSeries === timeSeries) {
	        var set = this.seriesSet.splice(i, 1);
	        this.seriesSet.push(set[0]);
	        break;
	      }
	    }
	  };

	  /**
	   * Instructs the <code>SmoothieChart</code> to start rendering to the provided canvas, with specified delay.
	   *
	   * @param canvas the target canvas element
	   * @param delayMillis an amount of time to wait before a data point is shown. This can prevent the end of the series
	   * from appearing on screen, with new values flashing into view, at the expense of some latency.
	   */
	  SmoothieChart.prototype.streamTo = function(canvas, delayMillis) {
	    this.canvas = canvas;
	    this.delay = delayMillis;
	    this.start();
	  };

	  /**
	   * Make sure the canvas has the optimal resolution for the device's pixel ratio.
	   */
	  SmoothieChart.prototype.resize = function() {
	    // TODO this function doesn't handle the value of enableDpiScaling changing during execution
	    if (!this.options.enableDpiScaling || !window || window.devicePixelRatio === 1)
	      return;

	    var dpr = window.devicePixelRatio;
	    var width = parseInt(this.canvas.getAttribute('width'));
	    var height = parseInt(this.canvas.getAttribute('height'));

	    if (!this.originalWidth || (Math.floor(this.originalWidth * dpr) !== width)) {
	      this.originalWidth = width;
	      this.canvas.setAttribute('width', (Math.floor(width * dpr)).toString());
	      this.canvas.style.width = width + 'px';
	      this.canvas.getContext('2d').scale(dpr, dpr);
	    }

	    if (!this.originalHeight || (Math.floor(this.originalHeight * dpr) !== height)) {
	      this.originalHeight = height;
	      this.canvas.setAttribute('height', (Math.floor(height * dpr)).toString());
	      this.canvas.style.height = height + 'px';
	      this.canvas.getContext('2d').scale(dpr, dpr);
	    }
	  };

	  /**
	   * Starts the animation of this chart.
	   */
	  SmoothieChart.prototype.start = function() {
	    if (this.frame) {
	      // We're already running, so just return
	      return;
	    }

	    // Renders a frame, and queues the next frame for later rendering
	    var animate = function() {
	      this.frame = SmoothieChart.AnimateCompatibility.requestAnimationFrame(function() {
	        this.render();
	        animate();
	      }.bind(this));
	    }.bind(this);

	    animate();
	  };

	  /**
	   * Stops the animation of this chart.
	   */
	  SmoothieChart.prototype.stop = function() {
	    if (this.frame) {
	      SmoothieChart.AnimateCompatibility.cancelAnimationFrame(this.frame);
	      delete this.frame;
	    }
	  };

	  SmoothieChart.prototype.updateValueRange = function() {
	    // Calculate the current scale of the chart, from all time series.
	    var chartOptions = this.options,
	        chartMaxValue = Number.NaN,
	        chartMinValue = Number.NaN;

	    for (var d = 0; d < this.seriesSet.length; d++) {
	      // TODO(ndunn): We could calculate / track these values as they stream in.
	      var timeSeries = this.seriesSet[d].timeSeries;
	      if (!isNaN(timeSeries.maxValue)) {
	        chartMaxValue = !isNaN(chartMaxValue) ? Math.max(chartMaxValue, timeSeries.maxValue) : timeSeries.maxValue;
	      }

	      if (!isNaN(timeSeries.minValue)) {
	        chartMinValue = !isNaN(chartMinValue) ? Math.min(chartMinValue, timeSeries.minValue) : timeSeries.minValue;
	      }
	    }

	    // Scale the chartMaxValue to add padding at the top if required
	    if (chartOptions.maxValue != null) {
	      chartMaxValue = chartOptions.maxValue;
	    } else {
	      chartMaxValue *= chartOptions.maxValueScale;
	    }

	    // Set the minimum if we've specified one
	    if (chartOptions.minValue != null) {
	      chartMinValue = chartOptions.minValue;
	    }

	    // If a custom range function is set, call it
	    if (this.options.yRangeFunction) {
	      var range = this.options.yRangeFunction({min: chartMinValue, max: chartMaxValue});
	      chartMinValue = range.min;
	      chartMaxValue = range.max;
	    }

	    if (!isNaN(chartMaxValue) && !isNaN(chartMinValue)) {
	      var targetValueRange = chartMaxValue - chartMinValue;
	      var valueRangeDiff = (targetValueRange - this.currentValueRange);
	      var minValueDiff = (chartMinValue - this.currentVisMinValue);
	      this.isAnimatingScale = Math.abs(valueRangeDiff) > 0.1 || Math.abs(minValueDiff) > 0.1;
	      this.currentValueRange += chartOptions.scaleSmoothing * valueRangeDiff;
	      this.currentVisMinValue += chartOptions.scaleSmoothing * minValueDiff;
	    }

	    this.valueRange = { min: chartMinValue, max: chartMaxValue };
	  };

	  SmoothieChart.prototype.render = function(canvas, time) {
	    var nowMillis = new Date().getTime();

	    if (!this.isAnimatingScale) {
	      // We're not animating. We can use the last render time and the scroll speed to work out whether
	      // we actually need to paint anything yet. If not, we can return immediately.

	      // Render at least every 1/6th of a second. The canvas may be resized, which there is
	      // no reliable way to detect.
	      var maxIdleMillis = Math.min(1000/6, this.options.millisPerPixel);

	      if (nowMillis - this.lastRenderTimeMillis < maxIdleMillis) {
	        return;
	      }
	    }

	    this.resize();

	    this.lastRenderTimeMillis = nowMillis;

	    canvas = canvas || this.canvas;
	    time = time || nowMillis - (this.delay || 0);

	    // Round time down to pixel granularity, so motion appears smoother.
	    time -= time % this.options.millisPerPixel;

	    var context = canvas.getContext('2d'),
	        chartOptions = this.options,
	        dimensions = { top: 0, left: 0, width: canvas.clientWidth, height: canvas.clientHeight },
	        // Calculate the threshold time for the oldest data points.
	        oldestValidTime = time - (dimensions.width * chartOptions.millisPerPixel),
	        valueToYPixel = function(value) {
	          var offset = value - this.currentVisMinValue;
	          return this.currentValueRange === 0
	            ? dimensions.height
	            : dimensions.height - (Math.round((offset / this.currentValueRange) * dimensions.height));
	        }.bind(this),
	        timeToXPixel = function(t) {
	          return Math.round(dimensions.width - ((time - t) / chartOptions.millisPerPixel));
	        };

	    this.updateValueRange();

	    context.font = chartOptions.labels.fontSize + 'px ' + chartOptions.labels.fontFamily;

	    // Save the state of the canvas context, any transformations applied in this method
	    // will get removed from the stack at the end of this method when .restore() is called.
	    context.save();

	    // Move the origin.
	    context.translate(dimensions.left, dimensions.top);

	    // Create a clipped rectangle - anything we draw will be constrained to this rectangle.
	    // This prevents the occasional pixels from curves near the edges overrunning and creating
	    // screen cheese (that phrase should need no explanation).
	    context.beginPath();
	    context.rect(0, 0, dimensions.width, dimensions.height);
	    context.clip();

	    // Clear the working area.
	    context.save();
	    context.fillStyle = chartOptions.grid.fillStyle;
	    context.clearRect(0, 0, dimensions.width, dimensions.height);
	    context.fillRect(0, 0, dimensions.width, dimensions.height);
	    context.restore();

	    // Grid lines...
	    context.save();
	    context.lineWidth = chartOptions.grid.lineWidth;
	    context.strokeStyle = chartOptions.grid.strokeStyle;
	    // Vertical (time) dividers.
	    if (chartOptions.grid.millisPerLine > 0) {
	      context.beginPath();
	      for (var t = time - (time % chartOptions.grid.millisPerLine);
	           t >= oldestValidTime;
	           t -= chartOptions.grid.millisPerLine) {
	        var gx = timeToXPixel(t);
	        if (chartOptions.grid.sharpLines) {
	          gx -= 0.5;
	        }
	        context.moveTo(gx, 0);
	        context.lineTo(gx, dimensions.height);
	      }
	      context.stroke();
	      context.closePath();
	    }

	    // Horizontal (value) dividers.
	    for (var v = 1; v < chartOptions.grid.verticalSections; v++) {
	      var gy = Math.round(v * dimensions.height / chartOptions.grid.verticalSections);
	      if (chartOptions.grid.sharpLines) {
	        gy -= 0.5;
	      }
	      context.beginPath();
	      context.moveTo(0, gy);
	      context.lineTo(dimensions.width, gy);
	      context.stroke();
	      context.closePath();
	    }
	    // Bounding rectangle.
	    if (chartOptions.grid.borderVisible) {
	      context.beginPath();
	      context.strokeRect(0, 0, dimensions.width, dimensions.height);
	      context.closePath();
	    }
	    context.restore();

	    // Draw any horizontal lines...
	    if (chartOptions.horizontalLines && chartOptions.horizontalLines.length) {
	      for (var hl = 0; hl < chartOptions.horizontalLines.length; hl++) {
	        var line = chartOptions.horizontalLines[hl],
	            hly = Math.round(valueToYPixel(line.value)) - 0.5;
	        context.strokeStyle = line.color || '#ffffff';
	        context.lineWidth = line.lineWidth || 1;
	        context.beginPath();
	        context.moveTo(0, hly);
	        context.lineTo(dimensions.width, hly);
	        context.stroke();
	        context.closePath();
	      }
	    }

	    // For each data set...
	    for (var d = 0; d < this.seriesSet.length; d++) {
	      context.save();
	      var timeSeries = this.seriesSet[d].timeSeries,
	          dataSet = timeSeries.data,
	          seriesOptions = this.seriesSet[d].options;

	      // Delete old data that's moved off the left of the chart.
	      timeSeries.dropOldData(oldestValidTime, chartOptions.maxDataSetLength);

	      // Set style for this dataSet.
	      context.lineWidth = seriesOptions.lineWidth;
	      context.strokeStyle = seriesOptions.strokeStyle;
	      // Draw the line...
	      context.beginPath();
	      // Retain lastX, lastY for calculating the control points of bezier curves.
	      var firstX = 0, lastX = 0, lastY = 0;
	      for (var i = 0; i < dataSet.length && dataSet.length !== 1; i++) {
	        var x = timeToXPixel(dataSet[i][0]),
	            y = valueToYPixel(dataSet[i][1]);

	        if (i === 0) {
	          firstX = x;
	          context.moveTo(x, y);
	        } else {
	          switch (chartOptions.interpolation) {
	            case "linear":
	            case "line": {
	              context.lineTo(x,y);
	              break;
	            }
	            case "bezier":
	            default: {
	              // Great explanation of Bezier curves: http://en.wikipedia.org/wiki/Bezier_curve#Quadratic_curves
	              //
	              // Assuming A was the last point in the line plotted and B is the new point,
	              // we draw a curve with control points P and Q as below.
	              //
	              // A---P
	              //     |
	              //     |
	              //     |
	              //     Q---B
	              //
	              // Importantly, A and P are at the same y coordinate, as are B and Q. This is
	              // so adjacent curves appear to flow as one.
	              //
	              context.bezierCurveTo( // startPoint (A) is implicit from last iteration of loop
	                Math.round((lastX + x) / 2), lastY, // controlPoint1 (P)
	                Math.round((lastX + x)) / 2, y, // controlPoint2 (Q)
	                x, y); // endPoint (B)
	              break;
	            }
	            case "step": {
	              context.lineTo(x,lastY);
	              context.lineTo(x,y);
	              break;
	            }
	          }
	        }

	        lastX = x; lastY = y;
	      }

	      if (dataSet.length > 1) {
	        if (seriesOptions.fillStyle) {
	          // Close up the fill region.
	          context.lineTo(dimensions.width + seriesOptions.lineWidth + 1, lastY);
	          context.lineTo(dimensions.width + seriesOptions.lineWidth + 1, dimensions.height + seriesOptions.lineWidth + 1);
	          context.lineTo(firstX, dimensions.height + seriesOptions.lineWidth);
	          context.fillStyle = seriesOptions.fillStyle;
	          context.fill();
	        }

	        if (seriesOptions.strokeStyle && seriesOptions.strokeStyle !== 'none') {
	          context.stroke();
	        }
	        context.closePath();
	      }
	      context.restore();
	    }

	    // Draw the axis values on the chart.
	    if (!chartOptions.labels.disabled && !isNaN(this.valueRange.min) && !isNaN(this.valueRange.max)) {
	      var maxValueString = chartOptions.yMaxFormatter(this.valueRange.max, chartOptions.labels.precision),
	          minValueString = chartOptions.yMinFormatter(this.valueRange.min, chartOptions.labels.precision);
	      context.fillStyle = chartOptions.labels.fillStyle;
	      context.fillText(maxValueString, dimensions.width - context.measureText(maxValueString).width - 2, chartOptions.labels.fontSize);
	      context.fillText(minValueString, dimensions.width - context.measureText(minValueString).width - 2, dimensions.height - 2);
	    }

	    // Display timestamps along x-axis at the bottom of the chart.
	    if (chartOptions.timestampFormatter && chartOptions.grid.millisPerLine > 0) {
	      var textUntilX = dimensions.width - context.measureText(minValueString).width + 4;
	      for (var t = time - (time % chartOptions.grid.millisPerLine);
	           t >= oldestValidTime;
	           t -= chartOptions.grid.millisPerLine) {
	        var gx = timeToXPixel(t);
	        // Only draw the timestamp if it won't overlap with the previously drawn one.
	        if (gx < textUntilX) {
	          // Formats the timestamp based on user specified formatting function
	          // SmoothieChart.timeFormatter function above is one such formatting option
	          var tx = new Date(t),
	            ts = chartOptions.timestampFormatter(tx),
	            tsWidth = context.measureText(ts).width;
	          textUntilX = gx - tsWidth - 2;
	          context.fillStyle = chartOptions.labels.fillStyle;
	          context.fillText(ts, gx - tsWidth, dimensions.height - 2);
	        }
	      }
	    }

	    context.restore(); // See .save() above.
	  };

	  // Sample timestamp formatting function
	  SmoothieChart.timeFormatter = function(date) {
	    function pad2(number) { return (number < 10 ? '0' : '') + number }
	    return pad2(date.getHours()) + ':' + pad2(date.getMinutes()) + ':' + pad2(date.getSeconds());
	  };

	  exports.TimeSeries = TimeSeries;
	  exports.SmoothieChart = SmoothieChart;

	})( false ? this : exports);



/***/ },
/* 162 */
/***/ function(module, exports) {

	var GarbageCollection = (function () {
	    function GarbageCollection(time, duration, heapBefore, heapAfter) {
	        this.time = time;
	        this.duration = duration;
	        this.heapBefore = heapBefore;
	        this.heapAfter = heapAfter;
	    }
	    return GarbageCollection;
	})();
	exports.GarbageCollection = GarbageCollection;
	var Runner = (function () {
	    function Runner(duration, gcSpeed, floatingGarbageRatio, mutator, scheduler) {
	        this.mutator = mutator;
	        this.scheduler = scheduler;
	        this.duration = duration;
	        this.time = 0;
	        this.timeLimit = duration;
	        this.timeInGC = 0;
	        this.heap = 0;
	        this.dead = 0;
	        this.floatingGarbage = 0;
	        this.heapLimit = 0;
	        this.timeOfHeapLimit = duration;
	        this.inGC = false;
	        this.timeOfGC = 0;
	        this.durationOfGC = 0;
	        this.maxHeap = 0;
	        this.avgHeap = 0;
	        this.garbageCollections = [];
	        this.gcSpeed = gcSpeed;
	        this.floatingGarbageRatio = floatingGarbageRatio;
	    }
	    Runner.prototype.start = function () {
	        this.scheduler.onStart(0, 0);
	        this.updateLimits();
	    };
	    Runner.prototype.run = function (step) {
	        var next = this.nextTime(step);
	        while (next < this.duration) {
	            this.advance(next);
	            next = this.nextTime(step);
	        }
	    };
	    Runner.prototype.nextTime = function (step) {
	        var result = Math.min(this.time + step, this.duration);
	        if (this.inGC) {
	            result = Math.min(result, this.timeOfGC);
	        }
	        else {
	            result = Math.min(result, this.timeLimit);
	            result = Math.min(result, this.timeOfHeapLimit);
	        }
	        return result;
	    };
	    Runner.prototype.updateLimits = function () {
	        if (this.scheduler.timeLimit <= this.time) {
	            this.timeLimit = this.duration;
	        }
	        else {
	            this.timeLimit = this.scheduler.timeLimit;
	        }
	        this.heapLimit = this.scheduler.heapLimit;
	        if (this.scheduler.heapLimit <= this.heap) {
	            this.timeOfHeapLimit = this.duration;
	        }
	        else {
	            this.timeOfHeapLimit = this.findTimeToGrowHeapBy(this.heapLimit - this.heap);
	        }
	        if (this.timeLimit < this.time + 1) {
	            this.timeLimit = this.time + 1;
	        }
	        if (this.timeOfHeapLimit < this.time + 1) {
	            this.timeOfHeapLimit = this.time + 1;
	        }
	    };
	    Runner.prototype.findTimeToGrowHeapBy = function (bytes) {
	        var kMaxIterations = 20;
	        var start = this.time;
	        var lower = this.time;
	        var upper = this.duration;
	        var skip = this.timeInGC;
	        for (var i = 0; i < kMaxIterations; i++) {
	            var middle = (lower + upper) / 2;
	            if (this.mutator.bornBetween(start - skip, middle - skip) < bytes) {
	                lower = middle;
	            }
	            else {
	                upper = middle;
	            }
	        }
	        return upper;
	    };
	    Runner.prototype.advance = function (newTime) {
	        if (this.inGC && this.timeOfGC > newTime) {
	            this.avgHeap += (newTime - this.time) * (this.heap);
	            this.time = newTime;
	            return;
	        }
	        if (this.inGC) {
	            var newFloatingGarbage = this.dead * this.floatingGarbageRatio;
	            var actuallyDead = this.dead - newFloatingGarbage;
	            var newHeap = this.heap - actuallyDead - this.floatingGarbage;
	            this.floatingGarbage = newFloatingGarbage;
	            this.dead = 0;
	            this.avgHeap += (this.timeOfGC - this.time) * (this.heap);
	            this.time = this.timeOfGC;
	            this.scheduler.onGarbageCollection(this.timeOfGC, this.durationOfGC, this.heap, newHeap);
	            this.garbageCollections.push(new GarbageCollection(this.timeOfGC - this.durationOfGC, this.durationOfGC, this.heap, newHeap));
	            this.heap = newHeap;
	            this.timeInGC += this.durationOfGC;
	            this.timeOfGC = 0;
	            this.durationOfGC = 0;
	            this.inGC = false;
	            this.updateLimits();
	        }
	        if (this.time < newTime) {
	            var skip = this.timeInGC;
	            var newBorn = this.mutator.bornBetween(this.time - skip, newTime - skip);
	            var newDead = this.mutator.diedBetween(this.time - skip, newTime - skip);
	            var newHeap = this.heap + newBorn;
	            var avgHeap = (this.heap + this.heap + newBorn) / 2;
	            this.avgHeap += (newTime - this.time) * avgHeap;
	            this.heap = newHeap;
	            this.maxHeap = Math.max(this.maxHeap, this.heap);
	            this.dead += newDead;
	            this.time = newTime;
	            var gc = false;
	            if (this.scheduler.heapLimit > 0 && this.scheduler.heapLimit <= newHeap) {
	                gc = this.scheduler.onHeapLimit(newTime, newHeap);
	            }
	            if (this.scheduler.timeLimit > 0 && this.scheduler.timeLimit <= newTime) {
	                gc = this.scheduler.onTimeLimit(newTime, newHeap) || gc;
	            }
	            if (gc) {
	                this.inGC = true;
	                this.durationOfGC = this.computeDurationOfGC(this.heap, this.dead);
	                this.timeOfGC = this.time + this.durationOfGC;
	                this.duration += this.durationOfGC;
	            }
	            this.updateLimits();
	        }
	    };
	    Runner.prototype.averageHeap = function () {
	        return this.avgHeap / this.time;
	    };
	    Runner.prototype.computeDurationOfGC = function (heap, dead) {
	        return Math.max(1, heap / this.gcSpeed);
	    };
	    return Runner;
	})();
	exports.Runner = Runner;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(1);
	var EditorProps = (function () {
	    function EditorProps() {
	    }
	    return EditorProps;
	})();
	var EditorState = (function () {
	    function EditorState() {
	    }
	    return EditorState;
	})();
	var Editor = (function (_super) {
	    __extends(Editor, _super);
	    function Editor() {
	        _super.apply(this, arguments);
	        this.state = new EditorState();
	    }
	    Editor.prototype.componentWillMount = function () {
	        this.state.schedulerIndex = 0;
	        this.state.source = this.props.sources[this.state.schedulerIndex];
	        this.state.compileError = "";
	        this.setState(this.state);
	    };
	    Editor.prototype.onApplyChanges = function (event) {
	        var scheduler = null;
	        this.state.compileError = "";
	        try {
	            scheduler = eval("(" + this.state.source + ")");
	        }
	        catch (e) {
	            this.state.compileError = "Could not compile: " + e.toString();
	        }
	        if (scheduler) {
	            this.props.sources[this.state.schedulerIndex] = this.state.source;
	            this.props.schedulers[this.state.schedulerIndex] = scheduler;
	            this.props.onSchedulerChange(this.state.schedulerIndex);
	        }
	        this.setState(this.state);
	    };
	    Editor.prototype.onSourceChange = function (event) {
	        this.state.source = event.target.value;
	        this.setState(this.state);
	    };
	    Editor.prototype.onSchedulerIndexChange = function (event) {
	        this.state.schedulerIndex = parseInt(event.target.value);
	        this.state.source = this.props.sources[this.state.schedulerIndex];
	        this.state.compileError = "";
	        this.setState(this.state);
	    };
	    Editor.prototype.render = function () {
	        var _this = this;
	        return (React.createElement("div", null, React.createElement("p", null, "Scheduler: ", React.createElement("select", {"onChange": function (event) { return _this.onSchedulerIndexChange(event); }, "value": this.state.schedulerIndex.toString()}, this.props.schedulers.map(function (s, i) {
	            return React.createElement("option", {"key": i, "value": i.toString()}, s.label());
	        })), " ", React.createElement("button", {"onClick": function (event) { return _this.onApplyChanges(event); }}, "Apply changes")), React.createElement("div", null, React.createElement("textarea", {"style": { fontFamily: "monospace" }, "cols": 70, "rows": 25, "value": this.state.source, "onChange": function (event) { return _this.onSourceChange(event); }})), React.createElement("p", null, this.state.compileError)));
	    };
	    return Editor;
	})(React.Component);
	exports.Editor = Editor;


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(1);
	var runner_1 = __webpack_require__(162);
	var MB = 1024 * 1024;
	var Result = (function () {
	    function Result() {
	    }
	    return Result;
	})();
	var ResultsState = (function () {
	    function ResultsState() {
	        this.scheduler = null;
	        this.results = [];
	    }
	    return ResultsState;
	})();
	var ResultsProps = (function () {
	    function ResultsProps() {
	    }
	    return ResultsProps;
	})();
	var Results = (function (_super) {
	    __extends(Results, _super);
	    function Results() {
	        _super.apply(this, arguments);
	        this.state = new ResultsState();
	    }
	    Results.prototype.onTimer = function (event) {
	        var _this = this;
	        if (!this.state.scheduler)
	            return;
	        if (this.state.results.length === this.props.mutators.length)
	            return;
	        var mutator = this.props.mutators[this.state.results.length];
	        var runner = new runner_1.Runner(mutator.duration, this.props.gcSpeed, this.props.floatingGarbageRatio, mutator, this.state.scheduler);
	        runner.start();
	        runner.run(this.props.step);
	        this.state.results.push({ mutator: mutator,
	            totalTime: runner.time,
	            timeInGC: runner.timeInGC,
	            averageHeap: runner.averageHeap(),
	            maxHeap: runner.maxHeap,
	            finalHeap: runner.heap });
	        if (this.state.results.length < this.props.mutators.length) {
	            this.state.timer = setTimeout(function (event) { return _this.onTimer(event); }, 200);
	        }
	        this.setState(this.state);
	    };
	    Results.prototype.componentWillMount = function () {
	        var _this = this;
	        clearTimeout(this.state.timer);
	        this.state.scheduler = eval("(" + this.props.source + ")");
	        this.state.timer = setTimeout(function (event) { return _this.onTimer(event); }, 200);
	        this.setState(this.state);
	    };
	    Results.prototype.componentWillReceiveProps = function (newProps) {
	        var _this = this;
	        if (this.props.source === newProps.source &&
	            this.props.floatingGarbageRatio === newProps.floatingGarbageRatio &&
	            this.props.gcSpeed === newProps.gcSpeed) {
	            return;
	        }
	        clearTimeout(this.state.timer);
	        this.state.results = [];
	        this.state.scheduler = eval("(" + newProps.source + ")");
	        this.state.timer = setTimeout(function (event) { return _this.onTimer(event); }, 200);
	        this.setState(this.state);
	    };
	    Results.prototype.render = function () {
	        return (React.createElement("div", null, this.state.scheduler.label(), React.createElement("table", {"style": { textAlign: "left" }, "cellSpacing": 10}, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "Application"), React.createElement("th", null, "GC"), React.createElement("th", null, "Avg"), React.createElement("th", null, "Max"))), React.createElement("tbody", null, this.state.results.map(function (result, i) {
	            return React.createElement("tr", {"key": i}, React.createElement("td", null, result.mutator.label), React.createElement("td", null, Math.round(result.timeInGC), " ms "), React.createElement("td", null, Math.round(result.averageHeap / MB), " MB "), React.createElement("td", null, Math.round(result.maxHeap / MB), " MB "));
	        })))));
	    };
	    return Results;
	})(React.Component);
	exports.Results = Results;


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var Mutator = __webpack_require__(166);
	function mutators() {
	    return [
	        Mutator.fromLog(website_log1, "Website 1"),
	        Mutator.fromLog(website_log2, "Website 2"),
	        Mutator.fromLog(website_log3, "Website 3"),
	        Mutator.fromLog(website_log4, "Website 4"),
	        Mutator.fromLog(website_log5, "Website 5"),
	        Mutator.fromLog(website_log6, "Website 6")
	    ];
	}
	exports.mutators = mutators;
	var website_log1 = { "data": [
	        { "time": 0, "born": 0, "died": 0, "heap": 0, "expected": 0 },
	        { "time": 879, "born": 7739896, "died": 3073384, "heap": 4666512, "expected": 4666512 },
	        { "time": 1203, "born": 9396368, "died": 4259168, "heap": 9803712, "expected": 9803712 },
	        { "time": 2180, "born": 6537512, "died": 2866928, "heap": 13474296, "expected": 13474296 },
	        { "time": 2587, "born": 31778168, "died": 1161616, "heap": 44090848, "expected": 44090848 },
	        { "time": 3262, "born": 77701760, "died": 5932888, "heap": 115859720, "expected": 115859720 },
	        { "time": 4144, "born": 113168288, "died": 10012824, "heap": 219015184, "expected": 219015184 },
	        { "time": 5350, "born": 138397640, "died": 28383840, "heap": 329028984, "expected": 329028984 },
	        { "time": 6119, "born": 48389192, "died": 27657616, "heap": 349760560, "expected": 349760560 },
	        { "time": 7440, "born": 5512808, "died": 14583504, "heap": 340689864, "expected": 340689864 },
	        { "time": 11323, "born": 9034896, "died": 15523304, "heap": 334201456, "expected": 334201456 },
	        { "time": 13950, "born": 5390208, "died": 11069752, "heap": 328521912, "expected": 328521912 },
	        { "time": 16570, "born": 5238576, "died": 11268824, "heap": 322491664, "expected": 322491664 },
	        { "time": 19000, "born": 5340576, "died": 11200512, "heap": 316631728, "expected": 316631728 },
	        { "time": 21301, "born": 5324120, "died": 11078968, "heap": 310876880, "expected": 310876880 },
	        { "time": 22879, "born": 5268144, "died": 10809960, "heap": 305335064, "expected": 305335064 },
	        { "time": 25547, "born": 5324672, "died": 10654288, "heap": 300005448, "expected": 300005448 },
	        { "time": 26988, "born": 5087048, "died": 10268960, "heap": 294823536, "expected": 294823536 },
	        { "time": 29092, "born": 5290664, "died": 10491440, "heap": 289622760, "expected": 289622760 },
	        { "time": 31168, "born": 5733896, "died": 10806912, "heap": 284549744, "expected": 284549744 },
	        { "time": 33203, "born": 5320888, "died": 10341472, "heap": 279529160, "expected": 279529160 },
	        { "time": 35480, "born": 5569704, "died": 10949232, "heap": 274149632, "expected": 274149632 },
	        { "time": 37550, "born": 5701328, "died": 11257744, "heap": 268593216, "expected": 268593216 },
	        { "time": 39948, "born": 5685080, "died": 11313424, "heap": 262964872, "expected": 262964872 },
	        { "time": 42315, "born": 5667344, "died": 11181656, "heap": 257450560, "expected": 257450560 },
	        { "time": 44047, "born": 5629792, "died": 11200440, "heap": 251879912, "expected": 251879912 },
	        { "time": 46177, "born": 5697424, "died": 11272944, "heap": 246304392, "expected": 246304392 },
	        { "time": 48200, "born": 5754048, "died": 11268624, "heap": 240789816, "expected": 240789816 },
	        { "time": 50527, "born": 6008152, "died": 11455096, "heap": 235342872, "expected": 235342872 },
	        { "time": 52517, "born": 5582144, "died": 145480, "heap": 240779536, "expected": 240779536 },
	        { "time": 54949, "born": 7012032, "died": 23722000, "heap": 224069568, "expected": 224069568 },
	        { "time": 57030, "born": 6778040, "died": 12808056, "heap": 218039552, "expected": 218039552 },
	        { "time": 59193, "born": 6711272, "died": 12922368, "heap": 211828456, "expected": 211828456 },
	        { "time": 61315, "born": 6996656, "died": 13146600, "heap": 205678512, "expected": 205678512 },
	        { "time": 63005, "born": 94976, "died": 92712, "heap": 205680776, "expected": 205680776 },
	        { "time": 65389, "born": 13450088, "died": 26593296, "heap": 192537568, "expected": 192537568 },
	        { "time": 67608, "born": 7562208, "died": 9086808, "heap": 191012968, "expected": 191012968 },
	        { "time": 69836, "born": 7625888, "died": 18790072, "heap": 179848784, "expected": 179848784 },
	        { "time": 71879, "born": 1968008, "died": 128104, "heap": 181688688, "expected": 181688688 },
	        { "time": 73116, "born": 5890000, "died": 14558608, "heap": 173020080, "expected": 173020080 },
	        { "time": 74349, "born": 8110880, "died": 14875888, "heap": 166255072, "expected": 166255072 },
	        { "time": 76265, "born": 166200, "died": 141400, "heap": 166279872, "expected": 166279872 },
	        { "time": 77808, "born": 7077648, "died": 14923272, "heap": 158434248, "expected": 158434248 },
	        { "time": 78817, "born": 8390880, "died": 14496616, "heap": 152328512, "expected": 152328512 },
	        { "time": 80744, "born": 3259208, "died": 89064, "heap": 155498656, "expected": 155498656 },
	        { "time": 82355, "born": 4344912, "died": 14074864, "heap": 145768704, "expected": 145768704 },
	        { "time": 83187, "born": 7173592, "died": 13761256, "heap": 139181040, "expected": 139181040 },
	        { "time": 85034, "born": 7110472, "died": 126904, "heap": 146164608, "expected": 146164608 },
	        { "time": 86611, "born": 398904, "died": 14188768, "heap": 132374744, "expected": 132374744 },
	        { "time": 87370, "born": 7470416, "died": 14227032, "heap": 125618128, "expected": 125618128 },
	        { "time": 88526, "born": 62128, "died": 78016, "heap": 125602240, "expected": 125602240 },
	        { "time": 89372, "born": 7688536, "died": 14588128, "heap": 118702648, "expected": 118702648 },
	        { "time": 91214, "born": 4246472, "died": 130832, "heap": 122818288, "expected": 122818288 },
	        { "time": 92478, "born": 3597928, "died": 14547984, "heap": 111868232, "expected": 111868232 },
	        { "time": 93546, "born": 7759304, "died": 14439400, "heap": 105188136, "expected": 105188136 },
	        { "time": 95507, "born": 7446048, "died": 9013896, "heap": 103620288, "expected": 103620288 },
	        { "time": 96826, "born": 74680, "died": 5090032, "heap": 98604936, "expected": 98604936 },
	        { "time": 97666, "born": 7906432, "died": 14939648, "heap": 91571720, "expected": 91571720 },
	        { "time": 98959, "born": 71376, "died": 73384, "heap": 91569712, "expected": 91569712 },
	        { "time": 99710, "born": 8281512, "died": 15382720, "heap": 84468504, "expected": 84468504 },
	        { "time": 101508, "born": 103248, "died": 133384, "heap": 84438368, "expected": 84438368 },
	        { "time": 102925, "born": 7040880, "died": 15079432, "heap": 76399816, "expected": 76399816 },
	        { "time": 103960, "born": 9323720, "died": 15749152, "heap": 69974384, "expected": 69974384 },
	        { "time": 105958, "born": 4127656, "died": 116800, "heap": 73985240, "expected": 73985240 },
	        { "time": 107740, "born": 5638904, "died": 16646592, "heap": 62977552, "expected": 62977552 },
	        { "time": 109000, "born": 7341912, "died": 16124072, "heap": 54195392, "expected": 54195392 },
	        { "time": 110295, "born": 8529280, "died": 75240, "heap": 62649432, "expected": 62649432 },
	        { "time": 111782, "born": 1447464, "died": 16023784, "heap": 48073112, "expected": 48073112 },
	        { "time": 112555, "born": 8531408, "died": 8994200, "heap": 47610320, "expected": 47610320 },
	        { "time": 113319, "born": 40928, "died": 6978320, "heap": 40672928, "expected": 40672928 },
	        { "time": 114442, "born": 5207384, "died": 95768, "heap": 45784544, "expected": 45784544 },
	        { "time": 115673, "born": 3521408, "died": 15945560, "heap": 33360392, "expected": 33360392 },
	        { "time": 116502, "born": 3136808, "died": 42736, "heap": 36454464, "expected": 36454464 },
	        { "time": 117215, "born": 5334040, "died": 15767432, "heap": 26021072, "expected": 26021072 },
	        { "time": 118093, "born": 45368, "died": 44880, "heap": 26021560, "expected": 26021560 },
	        { "time": 118753, "born": 4193512, "died": 339328, "heap": 29875744, "expected": 29875744 },
	        { "time": 119164, "born": 210184, "died": 1239432, "heap": 28846496, "expected": 28846496 },
	        { "time": 119569, "born": 256872, "died": 213152, "heap": 28890216, "expected": 28890216 },
	        { "time": 119997, "born": 108848, "died": 522720, "heap": 28476344, "expected": 28476344 },
	        { "time": 120396, "born": 97168, "died": 111152, "heap": 28462360, "expected": 28462360 },
	        { "time": 120793, "born": 108400, "died": 91880, "heap": 28478880, "expected": 28478880 },
	        { "time": 121213, "born": 116368, "died": 91928, "heap": 28503320, "expected": 28503320 },
	        { "time": 121629, "born": 96440, "died": 95568, "heap": 28504192, "expected": 28504192 },
	        { "time": 122047, "born": 224544, "died": 152272, "heap": 28576464, "expected": 28576464 },
	        { "time": 122442, "born": 121536, "died": 138736, "heap": 28559264, "expected": 28559264 },
	        { "time": 122845, "born": 127056, "died": 126792, "heap": 28559528, "expected": 28559528 },
	        { "time": 123227, "born": 86960, "died": 83240, "heap": 28563248, "expected": 28563248 },
	        { "time": 123642, "born": 130168, "died": 119680, "heap": 28573736, "expected": 28573736 },
	        { "time": 124044, "born": 118248, "died": 131408, "heap": 28560576, "expected": 28560576 },
	        { "time": 124428, "born": 76752, "died": 76928, "heap": 28560400, "expected": 28560400 },
	        { "time": 124830, "born": 64808, "died": 57720, "heap": 28567488, "expected": 28567488 },
	        { "time": 125218, "born": 130032, "died": 118616, "heap": 28578904, "expected": 28578904 },
	        { "time": 125626, "born": 110584, "died": 111312, "heap": 28578176, "expected": 28578176 },
	        { "time": 126028, "born": 118368, "died": 116352, "heap": 28580192, "expected": 28580192 },
	        { "time": 126412, "born": 101600, "died": 100992, "heap": 28580800, "expected": 28580800 },
	        { "time": 126814, "born": 101568, "died": 101704, "heap": 28580664, "expected": 28580664 },
	        { "time": 127235, "born": 114288, "died": 115424, "heap": 28579528, "expected": 28579528 },
	        { "time": 127649, "born": 95856, "died": 80712, "heap": 28594672, "expected": 28594672 },
	        { "time": 128050, "born": 118368, "died": 116352, "heap": 28596688, "expected": 28596688 },
	        { "time": 128431, "born": 101600, "died": 102024, "heap": 28596264, "expected": 28596264 },
	        { "time": 128826, "born": 107672, "died": 109728, "heap": 28594208, "expected": 28594208 },
	        { "time": 129251, "born": 107424, "died": 103816, "heap": 28597816, "expected": 28597816 },
	        { "time": 129647, "born": 123832, "died": 127808, "heap": 28593840, "expected": 28593840 },
	        { "time": 130030, "born": 106064, "died": 102136, "heap": 28597768, "expected": 28597768 },
	        { "time": 130430, "born": 109144, "died": 110128, "heap": 28596784, "expected": 28596784 },
	        { "time": 130812, "born": 122136, "died": 119792, "heap": 28599128, "expected": 28599128 },
	        { "time": 131236, "born": 112696, "died": 113824, "heap": 28598000, "expected": 28598000 },
	        { "time": 131650, "born": 119208, "died": 119024, "heap": 28598184, "expected": 28598184 },
	        { "time": 132048, "born": 119976, "died": 122312, "heap": 28595848, "expected": 28595848 },
	        { "time": 132434, "born": 107704, "died": 106304, "heap": 28597248, "expected": 28597248 },
	        { "time": 132834, "born": 103008, "died": 101752, "heap": 28598504, "expected": 28598504 },
	        { "time": 133230, "born": 122360, "died": 122400, "heap": 28598464, "expected": 28598464 },
	        { "time": 133649, "born": 105920, "died": 104664, "heap": 28599720, "expected": 28599720 },
	        { "time": 134064, "born": 125240, "died": 125992, "heap": 28598968, "expected": 28598968 },
	        { "time": 134465, "born": 111288, "died": 109888, "heap": 28600368, "expected": 28600368 },
	        { "time": 134863, "born": 102864, "died": 100960, "heap": 28602272, "expected": 28602272 },
	        { "time": 135264, "born": 116424, "died": 117824, "heap": 28600872, "expected": 28600872 },
	        { "time": 135667, "born": 109144, "died": 106304, "heap": 28603712, "expected": 28603712 },
	        { "time": 136066, "born": 117120, "died": 117088, "heap": 28603744, "expected": 28603744 },
	        { "time": 136482, "born": 113320, "died": 112848, "heap": 28604216, "expected": 28604216 },
	        { "time": 136899, "born": 125240, "died": 124552, "heap": 28604904, "expected": 28604904 },
	        { "time": 137319, "born": 125240, "died": 124584, "heap": 28605560, "expected": 28605560 },
	        { "time": 137734, "born": 127416, "died": 125984, "heap": 28606992, "expected": 28606992 },
	        { "time": 138153, "born": 119136, "died": 119320, "heap": 28606808, "expected": 28606808 },
	        { "time": 138599, "born": 126712, "died": 125656, "heap": 28607864, "expected": 28607864 },
	        { "time": 139000, "born": 120896, "died": 123232, "heap": 28605528, "expected": 28605528 },
	        { "time": 139381, "born": 107672, "died": 106304, "heap": 28606896, "expected": 28606896 },
	        { "time": 139766, "born": 101600, "died": 101384, "heap": 28607112, "expected": 28607112 },
	        { "time": 140151, "born": 103328, "died": 103512, "heap": 28606928, "expected": 28606928 },
	        { "time": 140552, "born": 103040, "died": 102432, "heap": 28607536, "expected": 28607536 },
	        { "time": 140934, "born": 103712, "died": 101672, "heap": 28609576, "expected": 28609576 },
	        { "time": 141338, "born": 109112, "died": 108288, "heap": 28610400, "expected": 28610400 },
	        { "time": 141718, "born": 118504, "died": 120584, "heap": 28608320, "expected": 28608320 },
	        { "time": 142118, "born": 103008, "died": 102032, "heap": 28609296, "expected": 28609296 },
	        { "time": 142501, "born": 97256, "died": 98232, "heap": 28608320, "expected": 28608320 },
	        { "time": 142901, "born": 101568, "died": 100448, "heap": 28609440, "expected": 28609440 },
	        { "time": 143352, "born": 104368, "died": 104840, "heap": 28608968, "expected": 28608968 },
	        { "time": 143752, "born": 125272, "died": 130344, "heap": 28603896, "expected": 28603896 },
	        { "time": 144133, "born": 63608, "died": 57888, "heap": 28609616, "expected": 28609616 },
	        { "time": 144518, "born": 103744, "died": 103560, "heap": 28609800, "expected": 28609800 },
	        { "time": 144901, "born": 103328, "died": 103512, "heap": 28609616, "expected": 28609616 },
	        { "time": 145321, "born": 104448, "died": 102400, "heap": 28611664, "expected": 28611664 },
	        { "time": 145717, "born": 117728, "died": 119272, "heap": 28610120, "expected": 28610120 },
	        { "time": 146104, "born": 107672, "died": 106272, "heap": 28611520, "expected": 28611520 },
	        { "time": 146501, "born": 102000, "died": 101416, "heap": 28612104, "expected": 28612104 },
	        { "time": 146905, "born": 110744, "died": 112040, "heap": 28610808, "expected": 28610808 },
	        { "time": 147289, "born": 107672, "died": 106272, "heap": 28612208, "expected": 28612208 },
	        { "time": 147672, "born": 103744, "died": 101456, "heap": 28614496, "expected": 28614496 },
	        { "time": 148053, "born": 103328, "died": 105616, "heap": 28612208, "expected": 28612208 },
	        { "time": 148455, "born": 103008, "died": 102432, "heap": 28612784, "expected": 28612784 },
	        { "time": 148853, "born": 102608, "died": 100960, "heap": 28614432, "expected": 28614432 },
	        { "time": 149254, "born": 113912, "died": 115024, "heap": 28613320, "expected": 28613320 },
	        { "time": 149637, "born": 107704, "died": 106304, "heap": 28614720, "expected": 28614720 },
	        { "time": 150021, "born": 101568, "died": 101384, "heap": 28614904, "expected": 28614904 },
	        { "time": 150422, "born": 104768, "died": 103544, "heap": 28616128, "expected": 28616128 },
	        { "time": 150802, "born": 116288, "died": 117088, "heap": 28615328, "expected": 28615328 },
	        { "time": 151203, "born": 105152, "died": 103104, "heap": 28617376, "expected": 28617376 },
	        { "time": 151588, "born": 118216, "died": 118080, "heap": 28617512, "expected": 28617512 },
	        { "time": 151972, "born": 103328, "died": 104224, "heap": 28616616, "expected": 28616616 },
	        { "time": 152373, "born": 109112, "died": 107712, "heap": 28618016, "expected": 28618016 },
	        { "time": 152755, "born": 101600, "died": 100992, "heap": 28618624, "expected": 28618624 },
	        { "time": 153155, "born": 101568, "died": 101672, "heap": 28618520, "expected": 28618520 },
	        { "time": 153556, "born": 110552, "died": 114216, "heap": 28614856, "expected": 28614856 },
	        { "time": 153956, "born": 65080, "died": 57888, "heap": 28622048, "expected": 28622048 },
	        { "time": 154337, "born": 116256, "died": 117880, "heap": 28620424, "expected": 28620424 },
	        { "time": 154739, "born": 109848, "died": 108448, "heap": 28621824, "expected": 28621824 },
	        { "time": 155138, "born": 104448, "died": 104632, "heap": 28621640, "expected": 28621640 },
	        { "time": 155527, "born": 107672, "died": 106304, "heap": 28623008, "expected": 28623008 },
	        { "time": 155905, "born": 101600, "died": 101384, "heap": 28623224, "expected": 28623224 },
	        { "time": 156292, "born": 103328, "died": 103512, "heap": 28623040, "expected": 28623040 },
	        { "time": 156708, "born": 104480, "died": 102432, "heap": 28625088, "expected": 28625088 },
	        { "time": 157109, "born": 117696, "died": 118528, "heap": 28624256, "expected": 28624256 },
	        { "time": 157490, "born": 101568, "died": 101784, "heap": 28624040, "expected": 28624040 },
	        { "time": 157891, "born": 107744, "died": 107024, "heap": 28624760, "expected": 28624760 },
	        { "time": 158294, "born": 110552, "died": 109864, "heap": 28625448, "expected": 28625448 },
	        { "time": 158677, "born": 107704, "died": 106304, "heap": 28626848, "expected": 28626848 },
	        { "time": 159056, "born": 101568, "died": 101384, "heap": 28627032, "expected": 28627032 },
	        { "time": 159443, "born": 103328, "died": 103512, "heap": 28626848, "expected": 28626848 },
	        { "time": 159862, "born": 104480, "died": 102432, "heap": 28628896, "expected": 28628896 },
	        { "time": 160241, "born": 116256, "died": 117088, "heap": 28628064, "expected": 28628064 },
	        { "time": 160643, "born": 103040, "died": 101784, "heap": 28629320, "expected": 28629320 },
	        { "time": 161040, "born": 122360, "died": 123112, "heap": 28628568, "expected": 28628568 },
	        { "time": 161446, "born": 110552, "died": 109864, "heap": 28629256, "expected": 28629256 },
	        { "time": 161825, "born": 107704, "died": 106304, "heap": 28630656, "expected": 28630656 },
	        { "time": 162228, "born": 103008, "died": 101752, "heap": 28631912, "expected": 28631912 },
	        { "time": 162625, "born": 122360, "died": 122432, "heap": 28631840, "expected": 28631840 },
	        { "time": 163027, "born": 104480, "died": 104632, "heap": 28631688, "expected": 28631688 },
	        { "time": 163407, "born": 107672, "died": 106272, "heap": 28633088, "expected": 28633088 },
	        { "time": 163793, "born": 101600, "died": 101416, "heap": 28633272, "expected": 28633272 },
	        { "time": 164211, "born": 104768, "died": 103512, "heap": 28634528, "expected": 28634528 },
	        { "time": 164607, "born": 119136, "died": 120712, "heap": 28632952, "expected": 28632952 },
	        { "time": 164993, "born": 107704, "died": 106272, "heap": 28634384, "expected": 28634384 },
	        { "time": 165395, "born": 103008, "died": 101752, "heap": 28635640, "expected": 28635640 },
	        { "time": 165776, "born": 122392, "died": 122432, "heap": 28635600, "expected": 28635600 },
	        { "time": 166159, "born": 101424, "died": 100960, "heap": 28636064, "expected": 28636064 },
	        { "time": 166578, "born": 102728, "died": 102040, "heap": 28636752, "expected": 28636752 }
	    ] };
	var website_log2 = { "data": [
	        { "time": 0, "born": 0, "died": 0, "heap": 0, "expected": 0 },
	        { "time": 446, "born": 6195512, "died": 1799528, "heap": 4395984, "expected": 4395984 },
	        { "time": 758, "born": 762672, "died": 202624, "heap": 4956032, "expected": 4956032 },
	        { "time": 1346, "born": 38747160, "died": 18152560, "heap": 25550632, "expected": 25550632 },
	        { "time": 1686, "born": 1201800, "died": 441536, "heap": 26310896, "expected": 26310896 },
	        { "time": 2019, "born": 147864, "died": 139160, "heap": 26319600, "expected": 26319600 },
	        { "time": 2352, "born": 28112, "died": 236192, "heap": 26111520, "expected": 26111520 },
	        { "time": 2694, "born": 840, "died": 89560, "heap": 26022800, "expected": 26022800 },
	        { "time": 3027, "born": 32736, "died": 141000, "heap": 25914536, "expected": 25914536 },
	        { "time": 3357, "born": 115088, "died": 70264, "heap": 25959360, "expected": 25959360 },
	        { "time": 3700, "born": 83368, "died": 42192, "heap": 26000536, "expected": 26000536 },
	        { "time": 4036, "born": 40864, "died": 33248, "heap": 26008152, "expected": 26008152 },
	        { "time": 4374, "born": 26600, "died": 23024, "heap": 26011728, "expected": 26011728 },
	        { "time": 4715, "born": 1824, "died": 2736, "heap": 26010816, "expected": 26010816 },
	        { "time": 5050, "born": 32960, "died": 94328, "heap": 25949448, "expected": 25949448 },
	        { "time": 5393, "born": 1752, "died": 51544, "heap": 25899656, "expected": 25899656 },
	        { "time": 5727, "born": 0, "died": 8816, "heap": 25890840, "expected": 25890840 },
	        { "time": 6060, "born": 0, "died": 57728, "heap": 25833112, "expected": 25833112 },
	        { "time": 6389, "born": 0, "died": 1896, "heap": 25831216, "expected": 25831216 },
	        { "time": 6718, "born": 0, "died": 5800, "heap": 25825416, "expected": 25825416 },
	        { "time": 7053, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 7386, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 7720, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 8052, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 8383, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 8724, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 9061, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 9405, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 9738, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 10079, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 10415, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 10751, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 11081, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 11411, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 11741, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 12071, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 12416, "born": 0, "died": 0, "heap": 25825416, "expected": 25825416 },
	        { "time": 12761, "born": 150640, "died": 73920, "heap": 25902136, "expected": 25902136 },
	        { "time": 13102, "born": 2008, "died": 48, "heap": 25904096, "expected": 25904096 },
	        { "time": 13437, "born": 0, "died": 0, "heap": 25904096, "expected": 25904096 },
	        { "time": 13770, "born": 0, "died": 82144, "heap": 25821952, "expected": 25821952 },
	        { "time": 14107, "born": 0, "died": 392, "heap": 25821560, "expected": 25821560 },
	        { "time": 14435, "born": 0, "died": 11384, "heap": 25810176, "expected": 25810176 },
	        { "time": 14772, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 15110, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 15459, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 15790, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 16130, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 16465, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 16799, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 17133, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 17471, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 17805, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 18139, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 18473, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 18802, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 19132, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 19461, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 19793, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 20123, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 20453, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 20788, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 21117, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 21451, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 21784, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 22114, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 22445, "born": 0, "died": 0, "heap": 25810176, "expected": 25810176 },
	        { "time": 22782, "born": 146552, "died": 54184, "heap": 25902544, "expected": 25902544 },
	        { "time": 23122, "born": 3160, "died": 48, "heap": 25905656, "expected": 25905656 },
	        { "time": 23455, "born": 0, "died": 0, "heap": 25905656, "expected": 25905656 },
	        { "time": 23788, "born": 0, "died": 82144, "heap": 25823512, "expected": 25823512 },
	        { "time": 24121, "born": 0, "died": 392, "heap": 25823120, "expected": 25823120 },
	        { "time": 24451, "born": 0, "died": 11384, "heap": 25811736, "expected": 25811736 },
	        { "time": 24786, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 25121, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 25453, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 25792, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 26126, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 26464, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 26805, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 27152, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 27491, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 27826, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 28170, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 28510, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 28846, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 29183, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 29523, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 29865, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 30207, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 30549, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 30889, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 31228, "born": 0, "died": 0, "heap": 25811736, "expected": 25811736 },
	        { "time": 31561, "born": 8584, "died": 6664, "heap": 25813656, "expected": 25813656 },
	        { "time": 31896, "born": 1184, "died": 0, "heap": 25814840, "expected": 25814840 },
	        { "time": 32244, "born": 0, "died": 0, "heap": 25814840, "expected": 25814840 },
	        { "time": 32577, "born": 158176, "died": 59408, "heap": 25913608, "expected": 25913608 },
	        { "time": 32924, "born": 3440, "died": 184, "heap": 25916864, "expected": 25916864 },
	        { "time": 33257, "born": 0, "died": 0, "heap": 25916864, "expected": 25916864 },
	        { "time": 33585, "born": 0, "died": 82000, "heap": 25834864, "expected": 25834864 },
	        { "time": 33919, "born": 0, "died": 392, "heap": 25834472, "expected": 25834472 },
	        { "time": 34259, "born": 0, "died": 12616, "heap": 25821856, "expected": 25821856 },
	        { "time": 34594, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 34931, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 35264, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 35602, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 35938, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 36274, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 36607, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 36945, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 37281, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 37619, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 37954, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 38292, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 38633, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 38970, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 39316, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 39654, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 39996, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 40334, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 40685, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 41029, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 41367, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 41704, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 42038, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 42374, "born": 0, "died": 0, "heap": 25821856, "expected": 25821856 },
	        { "time": 42713, "born": 146288, "died": 64944, "heap": 25903200, "expected": 25903200 },
	        { "time": 43047, "born": 1960, "died": 48, "heap": 25905112, "expected": 25905112 },
	        { "time": 43382, "born": 0, "died": 0, "heap": 25905112, "expected": 25905112 },
	        { "time": 43720, "born": 0, "died": 82144, "heap": 25822968, "expected": 25822968 },
	        { "time": 44055, "born": 0, "died": 392, "heap": 25822576, "expected": 25822576 },
	        { "time": 44390, "born": 0, "died": 11384, "heap": 25811192, "expected": 25811192 },
	        { "time": 44738, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 45068, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 45400, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 45729, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 46064, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 46397, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 46723, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 47080, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 47414, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 47752, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 48082, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 48415, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 48752, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 49098, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 49434, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 49773, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 50111, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 50453, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 50788, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 51123, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 51463, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 51809, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 52136, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 52478, "born": 0, "died": 0, "heap": 25811192, "expected": 25811192 },
	        { "time": 52818, "born": 146408, "died": 54064, "heap": 25903536, "expected": 25903536 },
	        { "time": 53149, "born": 3208, "died": 48, "heap": 25906696, "expected": 25906696 },
	        { "time": 53480, "born": 0, "died": 0, "heap": 25906696, "expected": 25906696 },
	        { "time": 53812, "born": 0, "died": 82144, "heap": 25824552, "expected": 25824552 },
	        { "time": 54147, "born": 0, "died": 392, "heap": 25824160, "expected": 25824160 },
	        { "time": 54476, "born": 0, "died": 11384, "heap": 25812776, "expected": 25812776 },
	        { "time": 54809, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 55138, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 55472, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 55814, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 56153, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 56493, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 56831, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 57171, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 57507, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 57849, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 58187, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 58526, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 58864, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 59201, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 59536, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 59869, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 60204, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 60541, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 60876, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 61215, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 61560, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 61897, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 62236, "born": 0, "died": 0, "heap": 25812776, "expected": 25812776 },
	        { "time": 62565, "born": 158152, "died": 56104, "heap": 25914824, "expected": 25914824 },
	        { "time": 62905, "born": 6864, "died": 3248, "heap": 25918440, "expected": 25918440 },
	        { "time": 63247, "born": 0, "died": 0, "heap": 25918440, "expected": 25918440 },
	        { "time": 63599, "born": 0, "died": 75688, "heap": 25842752, "expected": 25842752 },
	        { "time": 63932, "born": 0, "died": 6704, "heap": 25836048, "expected": 25836048 },
	        { "time": 64265, "born": 0, "died": 12616, "heap": 25823432, "expected": 25823432 },
	        { "time": 64594, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 64924, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 65254, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 65587, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 65928, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 66263, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 66603, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 66941, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 67284, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 67620, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 67957, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 68305, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 68651, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 68981, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 69311, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 69653, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 69990, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 70332, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 70677, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 71010, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 71352, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 71689, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 72028, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 72366, "born": 0, "died": 0, "heap": 25823432, "expected": 25823432 },
	        { "time": 72701, "born": 146288, "died": 65176, "heap": 25904544, "expected": 25904544 },
	        { "time": 73036, "born": 48376, "died": 26120, "heap": 25926800, "expected": 25926800 },
	        { "time": 73372, "born": 54328, "died": 27224, "heap": 25953904, "expected": 25953904 },
	        { "time": 73704, "born": 2512, "died": 5296, "heap": 25951120, "expected": 25951120 },
	        { "time": 74044, "born": 0, "died": 51488, "heap": 25899632, "expected": 25899632 },
	        { "time": 74375, "born": 0, "died": 65120, "heap": 25834512, "expected": 25834512 },
	        { "time": 74713, "born": 0, "died": 9088, "heap": 25825424, "expected": 25825424 },
	        { "time": 75045, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 75391, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 75724, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 76058, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 76388, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 76728, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 77059, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 77422, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 77751, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 78085, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 78416, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 78755, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 79089, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 79430, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 79761, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 80104, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 80432, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 80767, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 81098, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 81431, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 81764, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 82101, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 82433, "born": 0, "died": 0, "heap": 25825424, "expected": 25825424 },
	        { "time": 82771, "born": 146288, "died": 68760, "heap": 25902952, "expected": 25902952 },
	        { "time": 83108, "born": 1960, "died": 48, "heap": 25904864, "expected": 25904864 },
	        { "time": 83452, "born": 0, "died": 0, "heap": 25904864, "expected": 25904864 },
	        { "time": 83785, "born": 0, "died": 82144, "heap": 25822720, "expected": 25822720 },
	        { "time": 84121, "born": 0, "died": 392, "heap": 25822328, "expected": 25822328 },
	        { "time": 84451, "born": 0, "died": 11384, "heap": 25810944, "expected": 25810944 },
	        { "time": 84787, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 85117, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 85450, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 85782, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 86135, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 86464, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 86792, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 87124, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 87460, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 87785, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 88113, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 88442, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 88778, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 89102, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 89433, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 89761, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 90092, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 90426, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 90755, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 91082, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 91415, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 91742, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 92071, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 92401, "born": 0, "died": 0, "heap": 25810944, "expected": 25810944 },
	        { "time": 92748, "born": 158176, "died": 55248, "heap": 25913872, "expected": 25913872 },
	        { "time": 93077, "born": 3568, "died": 24, "heap": 25917416, "expected": 25917416 },
	        { "time": 93410, "born": 0, "died": 0, "heap": 25917416, "expected": 25917416 },
	        { "time": 93738, "born": 0, "died": 82000, "heap": 25835416, "expected": 25835416 },
	        { "time": 94074, "born": 0, "died": 392, "heap": 25835024, "expected": 25835024 },
	        { "time": 94404, "born": 0, "died": 12616, "heap": 25822408, "expected": 25822408 },
	        { "time": 94738, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 95065, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 95401, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 95729, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 96066, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 96403, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 96745, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 97079, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 97416, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 97755, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 98092, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 98425, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 98773, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 99100, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 99429, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 99759, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 100098, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 100433, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 100762, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 101089, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 101421, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 101759, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 102098, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 102434, "born": 0, "died": 0, "heap": 25822408, "expected": 25822408 },
	        { "time": 102770, "born": 148760, "died": 65480, "heap": 25905688, "expected": 25905688 },
	        { "time": 103099, "born": 1960, "died": 48, "heap": 25907600, "expected": 25907600 },
	        { "time": 103432, "born": 0, "died": 0, "heap": 25907600, "expected": 25907600 },
	        { "time": 103763, "born": 0, "died": 83888, "heap": 25823712, "expected": 25823712 },
	        { "time": 104102, "born": 0, "died": 392, "heap": 25823320, "expected": 25823320 },
	        { "time": 104445, "born": 0, "died": 11384, "heap": 25811936, "expected": 25811936 },
	        { "time": 104784, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 105117, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 105464, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 105801, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 106145, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 106482, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 106824, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 107154, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 107501, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 107838, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 108178, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 108516, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 108859, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 109189, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 109531, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 109860, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 110193, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 110522, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 110859, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 111186, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 111523, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 111866, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 112200, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 112539, "born": 0, "died": 0, "heap": 25811936, "expected": 25811936 },
	        { "time": 112889, "born": 146408, "died": 54064, "heap": 25904280, "expected": 25904280 },
	        { "time": 113223, "born": 3352, "died": 48, "heap": 25907584, "expected": 25907584 },
	        { "time": 113561, "born": 0, "died": 0, "heap": 25907584, "expected": 25907584 },
	        { "time": 113893, "born": 0, "died": 82144, "heap": 25825440, "expected": 25825440 },
	        { "time": 114230, "born": 0, "died": 392, "heap": 25825048, "expected": 25825048 },
	        { "time": 114564, "born": 0, "died": 11384, "heap": 25813664, "expected": 25813664 },
	        { "time": 114901, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 115232, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 115569, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 115910, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 116246, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 116573, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 116912, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 117245, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 117593, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 117922, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 118265, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 118596, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 118932, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 119262, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 119600, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 119943, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 120283, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 120615, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 120949, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 121282, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 121625, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 121953, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 122303, "born": 0, "died": 0, "heap": 25813664, "expected": 25813664 },
	        { "time": 122634, "born": 158176, "died": 56640, "heap": 25915200, "expected": 25915200 },
	        { "time": 122966, "born": 3632, "died": 24, "heap": 25918808, "expected": 25918808 },
	        { "time": 123297, "born": 0, "died": 0, "heap": 25918808, "expected": 25918808 },
	        { "time": 123632, "born": 0, "died": 82000, "heap": 25836808, "expected": 25836808 },
	        { "time": 123967, "born": 0, "died": 392, "heap": 25836416, "expected": 25836416 },
	        { "time": 124306, "born": 0, "died": 12616, "heap": 25823800, "expected": 25823800 },
	        { "time": 124652, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 124997, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 125331, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 125673, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 126014, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 126346, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 126679, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 127013, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 127342, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 127681, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 128020, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 128368, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 128698, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 129031, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 129365, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 129697, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 130030, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 130377, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 130724, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 131062, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 131398, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 131735, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 132069, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 132417, "born": 0, "died": 0, "heap": 25823800, "expected": 25823800 },
	        { "time": 132750, "born": 146288, "died": 65136, "heap": 25904952, "expected": 25904952 },
	        { "time": 133092, "born": 1960, "died": 48, "heap": 25906864, "expected": 25906864 },
	        { "time": 133429, "born": 0, "died": 0, "heap": 25906864, "expected": 25906864 },
	        { "time": 133768, "born": 0, "died": 82144, "heap": 25824720, "expected": 25824720 },
	        { "time": 134102, "born": 0, "died": 392, "heap": 25824328, "expected": 25824328 },
	        { "time": 134439, "born": 0, "died": 11384, "heap": 25812944, "expected": 25812944 },
	        { "time": 134772, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 135113, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 135443, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 135781, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 136112, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 136450, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 136782, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 137113, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 137456, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 137797, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 138133, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 138479, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 138812, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 139148, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 139504, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 139835, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 140166, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 140500, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 140837, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 141168, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 141500, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 141838, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 142174, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 142515, "born": 0, "died": 0, "heap": 25812944, "expected": 25812944 },
	        { "time": 142846, "born": 146408, "died": 54064, "heap": 25905288, "expected": 25905288 },
	        { "time": 143193, "born": 3400, "died": 48, "heap": 25908640, "expected": 25908640 },
	        { "time": 143525, "born": 0, "died": 0, "heap": 25908640, "expected": 25908640 },
	        { "time": 143853, "born": 0, "died": 82144, "heap": 25826496, "expected": 25826496 },
	        { "time": 144189, "born": 0, "died": 392, "heap": 25826104, "expected": 25826104 },
	        { "time": 144522, "born": 0, "died": 11384, "heap": 25814720, "expected": 25814720 },
	        { "time": 144855, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 145184, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 145517, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 145849, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 146189, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 146534, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 146863, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 147197, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 147527, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 147860, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 148193, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 148522, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 148851, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 149190, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 149542, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 149877, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 150212, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 150548, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 150884, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 151219, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 151558, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 151897, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 152237, "born": 0, "died": 0, "heap": 25814720, "expected": 25814720 },
	        { "time": 152564, "born": 158176, "died": 56688, "heap": 25916208, "expected": 25916208 },
	        { "time": 152906, "born": 3680, "died": 24, "heap": 25919864, "expected": 25919864 },
	        { "time": 153243, "born": 0, "died": 0, "heap": 25919864, "expected": 25919864 },
	        { "time": 153584, "born": 0, "died": 82000, "heap": 25837864, "expected": 25837864 },
	        { "time": 153923, "born": 0, "died": 392, "heap": 25837472, "expected": 25837472 },
	        { "time": 154260, "born": 0, "died": 12616, "heap": 25824856, "expected": 25824856 },
	        { "time": 154592, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 154944, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 155276, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 155610, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 155939, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 156271, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 156606, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 156936, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 157277, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 157608, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 157938, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 158275, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 158613, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 158953, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 159295, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 159632, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 159970, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 160308, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 160643, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 160980, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 161327, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 161659, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 161991, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 162330, "born": 0, "died": 0, "heap": 25824856, "expected": 25824856 },
	        { "time": 162659, "born": 146288, "died": 65184, "heap": 25905960, "expected": 25905960 },
	        { "time": 162993, "born": 1960, "died": 48, "heap": 25907872, "expected": 25907872 },
	        { "time": 163332, "born": 0, "died": 0, "heap": 25907872, "expected": 25907872 },
	        { "time": 163674, "born": 0, "died": 82144, "heap": 25825728, "expected": 25825728 },
	        { "time": 164011, "born": 0, "died": 392, "heap": 25825336, "expected": 25825336 },
	        { "time": 164345, "born": 0, "died": 11384, "heap": 25813952, "expected": 25813952 },
	        { "time": 164674, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 165007, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 165344, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 165678, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 166012, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 166350, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 166679, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 167016, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 167359, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 167689, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 168018, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 168365, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 168693, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 169039, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 169378, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 169716, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 170053, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 170391, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 170728, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 171062, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 171395, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 171739, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 172077, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 172411, "born": 0, "died": 0, "heap": 25813952, "expected": 25813952 },
	        { "time": 172758, "born": 146408, "died": 54064, "heap": 25906296, "expected": 25906296 },
	        { "time": 173097, "born": 3448, "died": 48, "heap": 25909696, "expected": 25909696 },
	        { "time": 173429, "born": 0, "died": 0, "heap": 25909696, "expected": 25909696 },
	        { "time": 173763, "born": 0, "died": 82144, "heap": 25827552, "expected": 25827552 },
	        { "time": 174099, "born": 0, "died": 392, "heap": 25827160, "expected": 25827160 },
	        { "time": 174442, "born": 0, "died": 11384, "heap": 25815776, "expected": 25815776 },
	        { "time": 174777, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 175116, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 175457, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 175803, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 176137, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 176474, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 176811, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 177155, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 177491, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 177830, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 178164, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 178505, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 178846, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 179186, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 179536, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 179873, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 180203, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 180546, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 180880, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 181220, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 181561, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 181897, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 182231, "born": 0, "died": 0, "heap": 25815776, "expected": 25815776 },
	        { "time": 182567, "born": 135568, "died": 48280, "heap": 25903064, "expected": 25903064 },
	        { "time": 182905, "born": 40000, "died": 23856, "heap": 25919208, "expected": 25919208 },
	        { "time": 183249, "born": 3408, "died": 24, "heap": 25922592, "expected": 25922592 },
	        { "time": 183606, "born": 0, "died": 0, "heap": 25922592, "expected": 25922592 },
	        { "time": 183946, "born": 0, "died": 82000, "heap": 25840592, "expected": 25840592 },
	        { "time": 184285, "born": 0, "died": 1624, "heap": 25838968, "expected": 25838968 },
	        { "time": 184622, "born": 0, "died": 11384, "heap": 25827584, "expected": 25827584 },
	        { "time": 184960, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 185300, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 185638, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 185977, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 186316, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 186652, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 186997, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 187336, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 187672, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 188010, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 188351, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 188686, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 189021, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 189354, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 189683, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 190015, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 190349, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 190688, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 191024, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 191362, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 191696, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 192036, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 192372, "born": 0, "died": 0, "heap": 25827584, "expected": 25827584 },
	        { "time": 192701, "born": 146288, "died": 66568, "heap": 25907304, "expected": 25907304 },
	        { "time": 193039, "born": 1960, "died": 48, "heap": 25909216, "expected": 25909216 },
	        { "time": 193375, "born": 0, "died": 0, "heap": 25909216, "expected": 25909216 },
	        { "time": 193715, "born": 0, "died": 82144, "heap": 25827072, "expected": 25827072 },
	        { "time": 194049, "born": 0, "died": 392, "heap": 25826680, "expected": 25826680 },
	        { "time": 194385, "born": 0, "died": 11384, "heap": 25815296, "expected": 25815296 },
	        { "time": 194719, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 195056, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 195392, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 195734, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 196066, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 196408, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 196736, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 197072, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 197407, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 197745, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 198079, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 198416, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 198763, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 199096, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 199437, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 199764, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 200098, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 200431, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 200764, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 201099, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 201441, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 201789, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 202127, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 202467, "born": 0, "died": 0, "heap": 25815296, "expected": 25815296 },
	        { "time": 202792, "born": 150368, "died": 55048, "heap": 25910616, "expected": 25910616 },
	        { "time": 203128, "born": 3936, "died": 48, "heap": 25914504, "expected": 25914504 },
	        { "time": 203481, "born": 0, "died": 0, "heap": 25914504, "expected": 25914504 },
	        { "time": 203820, "born": 0, "died": 83280, "heap": 25831224, "expected": 25831224 },
	        { "time": 204159, "born": 0, "died": 392, "heap": 25830832, "expected": 25830832 },
	        { "time": 204490, "born": 0, "died": 13800, "heap": 25817032, "expected": 25817032 },
	        { "time": 204822, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 205161, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 205492, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 205826, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 206164, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 206499, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 206832, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 207169, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 207506, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 207848, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 208182, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 208518, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 208845, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 209179, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 209521, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 209862, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 210201, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 210545, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 210874, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 211217, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 211554, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 211889, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 212219, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 212551, "born": 0, "died": 0, "heap": 25817032, "expected": 25817032 },
	        { "time": 212884, "born": 158344, "died": 56896, "heap": 25918480, "expected": 25918480 },
	        { "time": 213224, "born": 2416, "died": 24, "heap": 25920872, "expected": 25920872 },
	        { "time": 213562, "born": 0, "died": 0, "heap": 25920872, "expected": 25920872 },
	        { "time": 213894, "born": 0, "died": 82000, "heap": 25838872, "expected": 25838872 },
	        { "time": 214222, "born": 0, "died": 392, "heap": 25838480, "expected": 25838480 },
	        { "time": 214554, "born": 0, "died": 12616, "heap": 25825864, "expected": 25825864 },
	        { "time": 214890, "born": 0, "died": 0, "heap": 25825864, "expected": 25825864 },
	        { "time": 215235, "born": 0, "died": 0, "heap": 25825864, "expected": 25825864 },
	        { "time": 215566, "born": 0, "died": 0, "heap": 25825864, "expected": 25825864 },
	        { "time": 215900, "born": 0, "died": 0, "heap": 25825864, "expected": 25825864 }
	    ] };
	var website_log3 = { "data": [
	        { "time": 0, "born": 0, "died": 0, "heap": 0, "expected": 0 },
	        { "time": 2830, "born": 46697704, "died": 15994176, "heap": 30703528, "expected": 30703528 },
	        { "time": 3278, "born": 8107968, "died": 5443888, "heap": 33367608, "expected": 33367608 },
	        { "time": 3695, "born": 26464, "died": 235368, "heap": 33158704, "expected": 33158704 },
	        { "time": 4148, "born": 240224, "died": 4146496, "heap": 29252432, "expected": 29252432 },
	        { "time": 4556, "born": 174928, "died": 2321752, "heap": 27105608, "expected": 27105608 },
	        { "time": 5013, "born": 15120, "died": 127696, "heap": 26993032, "expected": 26993032 },
	        { "time": 5490, "born": 259560, "died": 134008, "heap": 27118584, "expected": 27118584 },
	        { "time": 5870, "born": 8504, "died": 215216, "heap": 26911872, "expected": 26911872 },
	        { "time": 6248, "born": 2280, "died": 7016, "heap": 26907136, "expected": 26907136 },
	        { "time": 6631, "born": 2528, "died": 320608, "heap": 26589056, "expected": 26589056 },
	        { "time": 7022, "born": 437480, "died": 228160, "heap": 26798376, "expected": 26798376 },
	        { "time": 7445, "born": 8568, "died": 9040, "heap": 26797904, "expected": 26797904 },
	        { "time": 7816, "born": 1808, "died": 2848, "heap": 26796864, "expected": 26796864 },
	        { "time": 8182, "born": 2712, "died": 166536, "heap": 26633040, "expected": 26633040 },
	        { "time": 8540, "born": 2528, "died": 8720, "heap": 26626848, "expected": 26626848 },
	        { "time": 8946, "born": 2856, "died": 1808, "heap": 26627896, "expected": 26627896 },
	        { "time": 9300, "born": 64, "died": 2280, "heap": 26625680, "expected": 26625680 },
	        { "time": 9661, "born": 2464, "died": 1040, "heap": 26627104, "expected": 26627104 },
	        { "time": 10075, "born": 142256, "died": 10968, "heap": 26758392, "expected": 26758392 },
	        { "time": 10482, "born": 53000, "died": 72944, "heap": 26738448, "expected": 26738448 },
	        { "time": 10828, "born": 760, "died": 4968, "heap": 26734240, "expected": 26734240 },
	        { "time": 11184, "born": 2280, "died": 49928, "heap": 26686592, "expected": 26686592 },
	        { "time": 11555, "born": 2528, "died": 35744, "heap": 26653376, "expected": 26653376 },
	        { "time": 11940, "born": 2856, "died": 2080, "heap": 26654152, "expected": 26654152 },
	        { "time": 12326, "born": 7808, "died": 6200, "heap": 26655760, "expected": 26655760 },
	        { "time": 12687, "born": 16576, "died": 4104, "heap": 26668232, "expected": 26668232 },
	        { "time": 13036, "born": 2920, "died": 2280, "heap": 26668872, "expected": 26668872 },
	        { "time": 13480, "born": 2528, "died": 6208, "heap": 26665192, "expected": 26665192 },
	        { "time": 13828, "born": 576, "died": 13128, "heap": 26652640, "expected": 26652640 },
	        { "time": 14178, "born": 2280, "died": 552, "heap": 26654368, "expected": 26654368 },
	        { "time": 14536, "born": 2528, "died": 2848, "heap": 26654048, "expected": 26654048 },
	        { "time": 14943, "born": 2856, "died": 1808, "heap": 26655096, "expected": 26655096 },
	        { "time": 15292, "born": 64, "died": 2280, "heap": 26652880, "expected": 26652880 },
	        { "time": 15643, "born": 2464, "died": 1040, "heap": 26654304, "expected": 26654304 },
	        { "time": 15990, "born": 2856, "died": 2280, "heap": 26654880, "expected": 26654880 },
	        { "time": 16480, "born": 2528, "died": 1808, "heap": 26655600, "expected": 26655600 },
	        { "time": 16839, "born": 576, "died": 2848, "heap": 26653328, "expected": 26653328 },
	        { "time": 17190, "born": 2280, "died": 472, "heap": 26655136, "expected": 26655136 },
	        { "time": 17538, "born": 48240, "died": 19520, "heap": 26683856, "expected": 26683856 },
	        { "time": 17944, "born": 5208, "died": 1952, "heap": 26687112, "expected": 26687112 },
	        { "time": 18293, "born": 64, "died": 2280, "heap": 26684896, "expected": 26684896 },
	        { "time": 18649, "born": 2464, "died": 31768, "heap": 26655592, "expected": 26655592 },
	        { "time": 19021, "born": 2856, "died": 2280, "heap": 26656168, "expected": 26656168 },
	        { "time": 19480, "born": 2528, "died": 1808, "heap": 26656888, "expected": 26656888 },
	        { "time": 19830, "born": 576, "died": 2848, "heap": 26654616, "expected": 26654616 },
	        { "time": 20191, "born": 2280, "died": 472, "heap": 26656424, "expected": 26656424 },
	        { "time": 20551, "born": 2528, "died": 2848, "heap": 26656104, "expected": 26656104 },
	        { "time": 20943, "born": 2856, "died": 1808, "heap": 26657152, "expected": 26657152 },
	        { "time": 21302, "born": 64, "died": 2280, "heap": 26654936, "expected": 26654936 },
	        { "time": 21669, "born": 2464, "died": 1040, "heap": 26656360, "expected": 26656360 },
	        { "time": 22015, "born": 2856, "died": 2280, "heap": 26656936, "expected": 26656936 },
	        { "time": 22438, "born": 9000, "died": 6024, "heap": 26659912, "expected": 26659912 },
	        { "time": 22810, "born": 14896, "died": 6040, "heap": 26668768, "expected": 26668768 },
	        { "time": 23164, "born": 2792, "died": 472, "heap": 26671088, "expected": 26671088 },
	        { "time": 23523, "born": 2528, "died": 5888, "heap": 26667728, "expected": 26667728 },
	        { "time": 23891, "born": 576, "died": 12088, "heap": 26656216, "expected": 26656216 },
	        { "time": 24241, "born": 2280, "died": 472, "heap": 26658024, "expected": 26658024 },
	        { "time": 24591, "born": 2528, "died": 2848, "heap": 26657704, "expected": 26657704 },
	        { "time": 24978, "born": 2856, "died": 2280, "heap": 26658280, "expected": 26658280 },
	        { "time": 25333, "born": 1200, "died": 3528, "heap": 26655952, "expected": 26655952 },
	        { "time": 25683, "born": 2528, "died": 1040, "heap": 26657440, "expected": 26657440 },
	        { "time": 26047, "born": 2856, "died": 2280, "heap": 26658016, "expected": 26658016 },
	        { "time": 26481, "born": 2552, "died": 2296, "heap": 26658272, "expected": 26658272 },
	        { "time": 26839, "born": 576, "died": 2384, "heap": 26656464, "expected": 26656464 },
	        { "time": 27195, "born": 2280, "died": 472, "heap": 26658272, "expected": 26658272 },
	        { "time": 27558, "born": 8288, "died": 6112, "heap": 26660448, "expected": 26660448 },
	        { "time": 27941, "born": 3552, "died": 1864, "heap": 26662136, "expected": 26662136 },
	        { "time": 28293, "born": 64, "died": 2280, "heap": 26659920, "expected": 26659920 },
	        { "time": 28656, "born": 2464, "died": 4080, "heap": 26658304, "expected": 26658304 },
	        { "time": 29013, "born": 2856, "died": 2280, "heap": 26658880, "expected": 26658880 },
	        { "time": 29436, "born": 2344, "died": 1808, "heap": 26659416, "expected": 26659416 },
	        { "time": 29789, "born": 512, "died": 3032, "heap": 26656896, "expected": 26656896 },
	        { "time": 30137, "born": 2712, "died": 472, "heap": 26659136, "expected": 26659136 },
	        { "time": 30526, "born": 2528, "died": 2848, "heap": 26658816, "expected": 26658816 },
	        { "time": 30938, "born": 2856, "died": 1808, "heap": 26659864, "expected": 26659864 },
	        { "time": 31290, "born": 64, "died": 2280, "heap": 26657648, "expected": 26657648 },
	        { "time": 31638, "born": 2464, "died": 1040, "heap": 26659072, "expected": 26659072 },
	        { "time": 31987, "born": 2856, "died": 2280, "heap": 26659648, "expected": 26659648 },
	        { "time": 32334, "born": 6480, "died": 5728, "heap": 26660400, "expected": 26660400 },
	        { "time": 32725, "born": 16632, "died": 4752, "heap": 26672280, "expected": 26672280 },
	        { "time": 33075, "born": 2984, "died": 2312, "heap": 26672952, "expected": 26672952 },
	        { "time": 33485, "born": 2552, "died": 5336, "heap": 26670168, "expected": 26670168 },
	        { "time": 33846, "born": 576, "died": 12664, "heap": 26658080, "expected": 26658080 },
	        { "time": 34211, "born": 2280, "died": 472, "heap": 26659888, "expected": 26659888 },
	        { "time": 34578, "born": 2528, "died": 2848, "heap": 26659568, "expected": 26659568 },
	        { "time": 34950, "born": 2856, "died": 1808, "heap": 26660616, "expected": 26660616 },
	        { "time": 35298, "born": 64, "died": 2280, "heap": 26658400, "expected": 26658400 },
	        { "time": 35662, "born": 2464, "died": 1040, "heap": 26659824, "expected": 26659824 },
	        { "time": 36026, "born": 2856, "died": 2280, "heap": 26660400, "expected": 26660400 },
	        { "time": 36487, "born": 2528, "died": 1808, "heap": 26661120, "expected": 26661120 },
	        { "time": 36847, "born": 576, "died": 2848, "heap": 26658848, "expected": 26658848 },
	        { "time": 37211, "born": 2280, "died": 472, "heap": 26660656, "expected": 26660656 },
	        { "time": 37574, "born": 8288, "died": 29352, "heap": 26639592, "expected": 26639592 },
	        { "time": 37948, "born": 38528, "died": 1864, "heap": 26676256, "expected": 26676256 },
	        { "time": 38298, "born": 64, "died": 2280, "heap": 26674040, "expected": 26674040 },
	        { "time": 38667, "born": 2464, "died": 4080, "heap": 26672424, "expected": 26672424 },
	        { "time": 39024, "born": 2856, "died": 2280, "heap": 26673000, "expected": 26673000 },
	        { "time": 39494, "born": 3728, "died": 3008, "heap": 26673720, "expected": 26673720 },
	        { "time": 39847, "born": 576, "died": 2848, "heap": 26671448, "expected": 26671448 },
	        { "time": 40215, "born": 2608, "died": 800, "heap": 26673256, "expected": 26673256 },
	        { "time": 40573, "born": 2528, "died": 2848, "heap": 26672936, "expected": 26672936 },
	        { "time": 40947, "born": 3416, "died": 2368, "heap": 26673984, "expected": 26673984 },
	        { "time": 41293, "born": 64, "died": 2280, "heap": 26671768, "expected": 26671768 },
	        { "time": 41657, "born": 2640, "died": 1216, "heap": 26673192, "expected": 26673192 },
	        { "time": 42017, "born": 2856, "died": 2280, "heap": 26673768, "expected": 26673768 },
	        { "time": 42485, "born": 22656, "died": 6752, "heap": 26689672, "expected": 26689672 },
	        { "time": 42844, "born": 1560, "died": 6000, "heap": 26685232, "expected": 26685232 },
	        { "time": 43201, "born": 2888, "died": 648, "heap": 26687472, "expected": 26687472 },
	        { "time": 43561, "born": 2528, "died": 16168, "heap": 26673832, "expected": 26673832 },
	        { "time": 43944, "born": 3192, "died": 2144, "heap": 26674880, "expected": 26674880 },
	        { "time": 44294, "born": 64, "died": 2280, "heap": 26672664, "expected": 26672664 },
	        { "time": 44647, "born": 2760, "died": 1336, "heap": 26674088, "expected": 26674088 },
	        { "time": 45005, "born": 2856, "died": 2280, "heap": 26674664, "expected": 26674664 },
	        { "time": 45448, "born": 2360, "died": 1824, "heap": 26675200, "expected": 26675200 },
	        { "time": 45814, "born": 512, "died": 3032, "heap": 26672680, "expected": 26672680 },
	        { "time": 46180, "born": 4368, "died": 2128, "heap": 26674920, "expected": 26674920 },
	        { "time": 46546, "born": 2528, "died": 2848, "heap": 26674600, "expected": 26674600 },
	        { "time": 46949, "born": 3184, "died": 2136, "heap": 26675648, "expected": 26675648 },
	        { "time": 47437, "born": 8000, "died": 5912, "heap": 26677736, "expected": 26677736 },
	        { "time": 47853, "born": 2336, "died": 3744, "heap": 26676328, "expected": 26676328 },
	        { "time": 48234, "born": 2712, "died": 472, "heap": 26678568, "expected": 26678568 },
	        { "time": 48598, "born": 2760, "died": 6120, "heap": 26675208, "expected": 26675208 },
	        { "time": 48989, "born": 2856, "died": 2280, "heap": 26675784, "expected": 26675784 },
	        { "time": 49444, "born": 2648, "died": 2112, "heap": 26676320, "expected": 26676320 },
	        { "time": 49816, "born": 512, "died": 3032, "heap": 26673800, "expected": 26673800 },
	        { "time": 50189, "born": 2968, "died": 728, "heap": 26676040, "expected": 26676040 },
	        { "time": 50542, "born": 2528, "died": 2848, "heap": 26675720, "expected": 26675720 },
	        { "time": 50946, "born": 3056, "died": 2008, "heap": 26676768, "expected": 26676768 },
	        { "time": 51292, "born": 64, "died": 2280, "heap": 26674552, "expected": 26674552 },
	        { "time": 51647, "born": 2680, "died": 1256, "heap": 26675976, "expected": 26675976 },
	        { "time": 52004, "born": 2856, "died": 2280, "heap": 26676552, "expected": 26676552 },
	        { "time": 52446, "born": 10208, "died": 6552, "heap": 26680208, "expected": 26680208 },
	        { "time": 52837, "born": 15768, "died": 6832, "heap": 26689144, "expected": 26689144 },
	        { "time": 53199, "born": 5376, "died": 3056, "heap": 26691464, "expected": 26691464 },
	        { "time": 53559, "born": 2528, "died": 6976, "heap": 26687016, "expected": 26687016 },
	        { "time": 53944, "born": 3056, "died": 12344, "heap": 26677728, "expected": 26677728 },
	        { "time": 54291, "born": 64, "died": 2280, "heap": 26675512, "expected": 26675512 },
	        { "time": 54657, "born": 237960, "died": 110952, "heap": 26802520, "expected": 26802520 },
	        { "time": 55011, "born": 7672, "died": 2720, "heap": 26807472, "expected": 26807472 },
	        { "time": 55442, "born": 3120, "died": 2584, "heap": 26808008, "expected": 26808008 },
	        { "time": 55799, "born": 512, "died": 149848, "heap": 26658672, "expected": 26658672 },
	        { "time": 56159, "born": 2856, "died": 2024, "heap": 26659504, "expected": 26659504 },
	        { "time": 56538, "born": 2528, "died": 2848, "heap": 26659184, "expected": 26659184 },
	        { "time": 56944, "born": 3232, "died": 2184, "heap": 26660232, "expected": 26660232 },
	        { "time": 57437, "born": 8000, "died": 5944, "heap": 26662288, "expected": 26662288 },
	        { "time": 57837, "born": 1920, "died": 3328, "heap": 26660880, "expected": 26660880 },
	        { "time": 58181, "born": 2712, "died": 472, "heap": 26663120, "expected": 26663120 },
	        { "time": 58545, "born": 3136, "died": 6496, "heap": 26659760, "expected": 26659760 },
	        { "time": 58936, "born": 2856, "died": 1808, "heap": 26660808, "expected": 26660808 },
	        { "time": 59305, "born": 656, "died": 2872, "heap": 26658592, "expected": 26658592 },
	        { "time": 59653, "born": 2464, "died": 1040, "heap": 26660016, "expected": 26660016 },
	        { "time": 60012, "born": 2880, "died": 2304, "heap": 26660592, "expected": 26660592 },
	        { "time": 60437, "born": 2344, "died": 1808, "heap": 26661128, "expected": 26661128 },
	        { "time": 60788, "born": 992, "died": 3512, "heap": 26658608, "expected": 26658608 },
	        { "time": 61139, "born": 2712, "died": 472, "heap": 26660848, "expected": 26660848 },
	        { "time": 61505, "born": 7264, "died": 4000, "heap": 26664112, "expected": 26664112 },
	        { "time": 61936, "born": 10832, "died": 4784, "heap": 26670160, "expected": 26670160 },
	        { "time": 62299, "born": 23840, "died": 8992, "heap": 26685008, "expected": 26685008 },
	        { "time": 62644, "born": 23832, "died": 9296, "heap": 26699544, "expected": 26699544 },
	        { "time": 62996, "born": 4264, "died": 8736, "heap": 26695072, "expected": 26695072 },
	        { "time": 63341, "born": 64, "died": 16640, "heap": 26678496, "expected": 26678496 },
	        { "time": 63692, "born": 2872, "died": 16408, "heap": 26664960, "expected": 26664960 },
	        { "time": 64068, "born": 2856, "died": 2280, "heap": 26665536, "expected": 26665536 },
	        { "time": 64440, "born": 2376, "died": 2328, "heap": 26665584, "expected": 26665584 },
	        { "time": 64782, "born": 800, "died": 2832, "heap": 26663552, "expected": 26663552 },
	        { "time": 65130, "born": 2920, "died": 680, "heap": 26665792, "expected": 26665792 },
	        { "time": 65501, "born": 7136, "died": 2296, "heap": 26670632, "expected": 26670632 },
	        { "time": 65851, "born": 800, "died": 2696, "heap": 26668736, "expected": 26668736 },
	        { "time": 66195, "born": 2280, "died": 4968, "heap": 26666048, "expected": 26666048 },
	        { "time": 66546, "born": 3168, "died": 3488, "heap": 26665728, "expected": 26665728 },
	        { "time": 66934, "born": 3336, "died": 1808, "heap": 26667256, "expected": 26667256 },
	        { "time": 67302, "born": 7464, "died": 3104, "heap": 26671616, "expected": 26671616 },
	        { "time": 67644, "born": 9136, "died": 6008, "heap": 26674744, "expected": 26674744 },
	        { "time": 68021, "born": 3000, "died": 2480, "heap": 26675264, "expected": 26675264 },
	        { "time": 68436, "born": 3368, "died": 4848, "heap": 26673784, "expected": 26673784 },
	        { "time": 68797, "born": 4072, "died": 4728, "heap": 26673128, "expected": 26673128 },
	        { "time": 69141, "born": 2712, "died": 472, "heap": 26675368, "expected": 26675368 },
	        { "time": 69504, "born": 2992, "died": 2736, "heap": 26675624, "expected": 26675624 },
	        { "time": 69848, "born": 576, "died": 2384, "heap": 26673816, "expected": 26673816 },
	        { "time": 70200, "born": 52752, "died": 17928, "heap": 26708640, "expected": 26708640 },
	        { "time": 70542, "born": 3936, "died": 2960, "heap": 26709616, "expected": 26709616 },
	        { "time": 70946, "born": 3104, "died": 2056, "heap": 26710664, "expected": 26710664 },
	        { "time": 71293, "born": 64, "died": 35928, "heap": 26674800, "expected": 26674800 },
	        { "time": 71648, "born": 2576, "died": 1264, "heap": 26676112, "expected": 26676112 },
	        { "time": 71992, "born": 2856, "died": 2280, "heap": 26676688, "expected": 26676688 },
	        { "time": 72444, "born": 8288, "died": 5728, "heap": 26679248, "expected": 26679248 },
	        { "time": 72792, "born": 14896, "died": 6040, "heap": 26688104, "expected": 26688104 },
	        { "time": 73145, "born": 2896, "died": 576, "heap": 26690424, "expected": 26690424 },
	        { "time": 73501, "born": 2552, "died": 5336, "heap": 26687640, "expected": 26687640 },
	        { "time": 73856, "born": 840, "died": 12928, "heap": 26675552, "expected": 26675552 },
	        { "time": 74200, "born": 2280, "died": 472, "heap": 26677360, "expected": 26677360 },
	        { "time": 74556, "born": 2528, "died": 2848, "heap": 26677040, "expected": 26677040 },
	        { "time": 74936, "born": 2856, "died": 1808, "heap": 26678088, "expected": 26678088 },
	        { "time": 75290, "born": 432, "died": 2648, "heap": 26675872, "expected": 26675872 },
	        { "time": 75637, "born": 2464, "died": 1040, "heap": 26677296, "expected": 26677296 },
	        { "time": 76008, "born": 2856, "died": 2280, "heap": 26677872, "expected": 26677872 },
	        { "time": 76437, "born": 2344, "died": 1808, "heap": 26678408, "expected": 26678408 },
	        { "time": 76802, "born": 768, "died": 3288, "heap": 26675888, "expected": 26675888 },
	        { "time": 77149, "born": 2712, "died": 472, "heap": 26678128, "expected": 26678128 },
	        { "time": 77568, "born": 9040, "died": 7336, "heap": 26679832, "expected": 26679832 },
	        { "time": 77938, "born": 3992, "died": 1864, "heap": 26681960, "expected": 26681960 },
	        { "time": 78308, "born": 2848, "died": 5064, "heap": 26679744, "expected": 26679744 },
	        { "time": 78683, "born": 2464, "died": 4080, "heap": 26678128, "expected": 26678128 },
	        { "time": 79043, "born": 2856, "died": 2280, "heap": 26678704, "expected": 26678704 },
	        { "time": 79441, "born": 2344, "died": 2296, "heap": 26678752, "expected": 26678752 },
	        { "time": 79798, "born": 1568, "died": 3600, "heap": 26676720, "expected": 26676720 },
	        { "time": 80158, "born": 2712, "died": 472, "heap": 26678960, "expected": 26678960 },
	        { "time": 80556, "born": 2688, "died": 3008, "heap": 26678640, "expected": 26678640 },
	        { "time": 80939, "born": 2856, "died": 1808, "heap": 26679688, "expected": 26679688 },
	        { "time": 81323, "born": 328, "died": 2544, "heap": 26677472, "expected": 26677472 },
	        { "time": 81683, "born": 2464, "died": 1040, "heap": 26678896, "expected": 26678896 },
	        { "time": 82052, "born": 2856, "died": 2280, "heap": 26679472, "expected": 26679472 },
	        { "time": 82507, "born": 21664, "died": 5744, "heap": 26695392, "expected": 26695392 },
	        { "time": 82871, "born": 1536, "died": 5528, "heap": 26691400, "expected": 26691400 },
	        { "time": 83242, "born": 2280, "died": 472, "heap": 26693208, "expected": 26693208 },
	        { "time": 83611, "born": 2528, "died": 16168, "heap": 26679568, "expected": 26679568 },
	        { "time": 83981, "born": 2856, "died": 2280, "heap": 26680144, "expected": 26680144 },
	        { "time": 84339, "born": 120, "died": 1864, "heap": 26678400, "expected": 26678400 },
	        { "time": 84697, "born": 2464, "died": 1040, "heap": 26679824, "expected": 26679824 },
	        { "time": 85071, "born": 2856, "died": 2280, "heap": 26680400, "expected": 26680400 },
	        { "time": 85450, "born": 2344, "died": 2296, "heap": 26680448, "expected": 26680448 },
	        { "time": 85830, "born": 1520, "died": 3552, "heap": 26678416, "expected": 26678416 },
	        { "time": 86176, "born": 2712, "died": 472, "heap": 26680656, "expected": 26680656 },
	        { "time": 86563, "born": 2640, "died": 2960, "heap": 26680336, "expected": 26680336 },
	        { "time": 86934, "born": 2856, "died": 1808, "heap": 26681384, "expected": 26681384 },
	        { "time": 87317, "born": 6672, "died": 3176, "heap": 26684880, "expected": 26684880 },
	        { "time": 87664, "born": 2688, "died": 3784, "heap": 26683784, "expected": 26683784 },
	        { "time": 88019, "born": 3144, "died": 2624, "heap": 26684304, "expected": 26684304 },
	        { "time": 88438, "born": 2344, "died": 4848, "heap": 26681800, "expected": 26681800 },
	        { "time": 88798, "born": 664, "died": 3184, "heap": 26679280, "expected": 26679280 },
	        { "time": 89148, "born": 2712, "died": 472, "heap": 26681520, "expected": 26681520 },
	        { "time": 89517, "born": 3400, "died": 3144, "heap": 26681776, "expected": 26681776 },
	        { "time": 89876, "born": 576, "died": 2384, "heap": 26679968, "expected": 26679968 },
	        { "time": 90237, "born": 2752, "died": 944, "heap": 26681776, "expected": 26681776 },
	        { "time": 90597, "born": 2528, "died": 2848, "heap": 26681456, "expected": 26681456 },
	        { "time": 90998, "born": 3264, "died": 2688, "heap": 26682032, "expected": 26682032 },
	        { "time": 91434, "born": 2344, "died": 1808, "heap": 26682568, "expected": 26682568 },
	        { "time": 91805, "born": 1104, "died": 3624, "heap": 26680048, "expected": 26680048 },
	        { "time": 92157, "born": 2712, "died": 472, "heap": 26682288, "expected": 26682288 },
	        { "time": 92521, "born": 21664, "died": 8872, "heap": 26695080, "expected": 26695080 },
	        { "time": 92935, "born": 3616, "died": 2232, "heap": 26696464, "expected": 26696464 },
	        { "time": 93329, "born": 352, "died": 2568, "heap": 26694248, "expected": 26694248 },
	        { "time": 93675, "born": 2464, "died": 14360, "heap": 26682352, "expected": 26682352 },
	        { "time": 94045, "born": 2856, "died": 2280, "heap": 26682928, "expected": 26682928 },
	        { "time": 94513, "born": 2552, "died": 2296, "heap": 26683184, "expected": 26683184 },
	        { "time": 94870, "born": 848, "died": 2656, "heap": 26681376, "expected": 26681376 },
	        { "time": 95218, "born": 2280, "died": 472, "heap": 26683184, "expected": 26683184 },
	        { "time": 95586, "born": 2528, "died": 2848, "heap": 26682864, "expected": 26682864 },
	        { "time": 95978, "born": 2856, "died": 2280, "heap": 26683440, "expected": 26683440 },
	        { "time": 96340, "born": 464, "died": 2208, "heap": 26681696, "expected": 26681696 },
	        { "time": 96696, "born": 2464, "died": 1040, "heap": 26683120, "expected": 26683120 },
	        { "time": 97053, "born": 2856, "died": 2280, "heap": 26683696, "expected": 26683696 },
	        { "time": 97435, "born": 8288, "died": 5744, "heap": 26686240, "expected": 26686240 },
	        { "time": 97798, "born": 1576, "died": 2968, "heap": 26684848, "expected": 26684848 },
	        { "time": 98148, "born": 2712, "died": 472, "heap": 26687088, "expected": 26687088 },
	        { "time": 98523, "born": 3160, "died": 5944, "heap": 26684304, "expected": 26684304 },
	        { "time": 98879, "born": 576, "died": 2384, "heap": 26682496, "expected": 26682496 },
	        { "time": 99245, "born": 2592, "died": 784, "heap": 26684304, "expected": 26684304 },
	        { "time": 99604, "born": 2528, "died": 2848, "heap": 26683984, "expected": 26683984 },
	        { "time": 99981, "born": 3104, "died": 2528, "heap": 26684560, "expected": 26684560 },
	        { "time": 100330, "born": 64, "died": 1808, "heap": 26682816, "expected": 26682816 },
	        { "time": 100693, "born": 2624, "died": 1200, "heap": 26684240, "expected": 26684240 },
	        { "time": 101039, "born": 2856, "died": 2280, "heap": 26684816, "expected": 26684816 },
	        { "time": 101448, "born": 3768, "died": 3720, "heap": 26684864, "expected": 26684864 },
	        { "time": 101797, "born": 800, "died": 2832, "heap": 26682832, "expected": 26682832 },
	        { "time": 102159, "born": 2752, "died": 512, "heap": 26685072, "expected": 26685072 },
	        { "time": 102519, "born": 23264, "died": 9592, "heap": 26698744, "expected": 26698744 },
	        { "time": 102871, "born": 2008, "died": 2544, "heap": 26698208, "expected": 26698208 },
	        { "time": 103222, "born": 2280, "died": 472, "heap": 26700016, "expected": 26700016 },
	        { "time": 103580, "born": 2528, "died": 17256, "heap": 26685288, "expected": 26685288 },
	        { "time": 103982, "born": 2856, "died": 2336, "heap": 26685808, "expected": 26685808 },
	        { "time": 104338, "born": 96, "died": 1840, "heap": 26684064, "expected": 26684064 },
	        { "time": 104689, "born": 2464, "died": 1040, "heap": 26685488, "expected": 26685488 },
	        { "time": 105040, "born": 244048, "died": 101560, "heap": 26827976, "expected": 26827976 },
	        { "time": 105447, "born": 9976, "died": 2640, "heap": 26835312, "expected": 26835312 },
	        { "time": 105799, "born": 1120, "died": 3152, "heap": 26833280, "expected": 26833280 },
	        { "time": 106143, "born": 2712, "died": 145576, "heap": 26690416, "expected": 26690416 },
	        { "time": 106518, "born": 3576, "died": 4328, "heap": 26689664, "expected": 26689664 },
	        { "time": 106864, "born": 576, "died": 2384, "heap": 26687856, "expected": 26687856 },
	        { "time": 107222, "born": 3208, "died": 1400, "heap": 26689664, "expected": 26689664 },
	        { "time": 107589, "born": 8288, "died": 6584, "heap": 26691368, "expected": 26691368 },
	        { "time": 107990, "born": 4832, "died": 3176, "heap": 26693024, "expected": 26693024 },
	        { "time": 108338, "born": 64, "died": 1808, "heap": 26691280, "expected": 26691280 },
	        { "time": 108689, "born": 3216, "died": 4832, "heap": 26689664, "expected": 26689664 },
	        { "time": 109047, "born": 2856, "died": 2280, "heap": 26690240, "expected": 26690240 },
	        { "time": 109441, "born": 3432, "died": 3384, "heap": 26690288, "expected": 26690288 },
	        { "time": 109788, "born": 800, "died": 2832, "heap": 26688256, "expected": 26688256 },
	        { "time": 110153, "born": 3344, "died": 1104, "heap": 26690496, "expected": 26690496 },
	        { "time": 110517, "born": 2552, "died": 2296, "heap": 26690752, "expected": 26690752 },
	        { "time": 110872, "born": 1440, "died": 3248, "heap": 26688944, "expected": 26688944 },
	        { "time": 111218, "born": 2280, "died": 472, "heap": 26690752, "expected": 26690752 },
	        { "time": 111570, "born": 2528, "died": 2848, "heap": 26690432, "expected": 26690432 },
	        { "time": 111934, "born": 2856, "died": 1808, "heap": 26691480, "expected": 26691480 },
	        { "time": 112312, "born": 6768, "died": 3304, "heap": 26694944, "expected": 26694944 },
	        { "time": 112658, "born": 16104, "died": 6920, "heap": 26704128, "expected": 26704128 },
	        { "time": 113010, "born": 3792, "died": 3208, "heap": 26704712, "expected": 26704712 },
	        { "time": 113433, "born": 2344, "died": 4848, "heap": 26702208, "expected": 26702208 },
	        { "time": 113787, "born": 1568, "died": 14368, "heap": 26689408, "expected": 26689408 },
	        { "time": 114133, "born": 2712, "died": 472, "heap": 26691648, "expected": 26691648 },
	        { "time": 114520, "born": 2928, "died": 2672, "heap": 26691904, "expected": 26691904 },
	        { "time": 114864, "born": 576, "died": 2384, "heap": 26690096, "expected": 26690096 },
	        { "time": 115217, "born": 2424, "died": 616, "heap": 26691904, "expected": 26691904 },
	        { "time": 115561, "born": 12520, "died": 5112, "heap": 26699312, "expected": 26699312 },
	        { "time": 115941, "born": 3160, "died": 2112, "heap": 26700360, "expected": 26700360 },
	        { "time": 116291, "born": 64, "died": 2280, "heap": 26698144, "expected": 26698144 },
	        { "time": 116646, "born": 5464, "died": 3328, "heap": 26700280, "expected": 26700280 },
	        { "time": 116991, "born": 3944, "died": 2760, "heap": 26701464, "expected": 26701464 },
	        { "time": 117442, "born": 8816, "died": 6288, "heap": 26703992, "expected": 26703992 },
	        { "time": 117791, "born": 1496, "died": 2904, "heap": 26702584, "expected": 26702584 },
	        { "time": 118145, "born": 2928, "died": 688, "heap": 26704824, "expected": 26704824 },
	        { "time": 118517, "born": 2552, "died": 5336, "heap": 26702040, "expected": 26702040 },
	        { "time": 118868, "born": 1024, "died": 2832, "heap": 26700232, "expected": 26700232 },
	        { "time": 119213, "born": 2280, "died": 472, "heap": 26702040, "expected": 26702040 },
	        { "time": 119563, "born": 2528, "died": 2848, "heap": 26701720, "expected": 26701720 },
	        { "time": 119934, "born": 2856, "died": 1808, "heap": 26702768, "expected": 26702768 },
	        { "time": 120284, "born": 328, "died": 2544, "heap": 26700552, "expected": 26700552 },
	        { "time": 120645, "born": 2464, "died": 1040, "heap": 26701976, "expected": 26701976 },
	        { "time": 121002, "born": 2880, "died": 2304, "heap": 26702552, "expected": 26702552 },
	        { "time": 121433, "born": 2344, "died": 1808, "heap": 26703088, "expected": 26703088 },
	        { "time": 121784, "born": 704, "died": 3224, "heap": 26700568, "expected": 26700568 },
	        { "time": 122129, "born": 2712, "died": 472, "heap": 26702808, "expected": 26702808 },
	        { "time": 122520, "born": 36776, "died": 20008, "heap": 26719576, "expected": 26719576 },
	        { "time": 122868, "born": 1624, "died": 2320, "heap": 26718880, "expected": 26718880 },
	        { "time": 123220, "born": 3200, "died": 1392, "heap": 26720688, "expected": 26720688 },
	        { "time": 123566, "born": 2528, "died": 20504, "heap": 26702712, "expected": 26702712 },
	        { "time": 123939, "born": 4008, "died": 2960, "heap": 26703760, "expected": 26703760 },
	        { "time": 124283, "born": 64, "died": 2280, "heap": 26701544, "expected": 26701544 },
	        { "time": 124637, "born": 3232, "died": 1808, "heap": 26702968, "expected": 26702968 },
	        { "time": 124981, "born": 2856, "died": 2280, "heap": 26703544, "expected": 26703544 },
	        { "time": 125334, "born": 576, "died": 2320, "heap": 26701800, "expected": 26701800 },
	        { "time": 125680, "born": 2464, "died": 1040, "heap": 26703224, "expected": 26703224 },
	        { "time": 126032, "born": 3488, "died": 2912, "heap": 26703800, "expected": 26703800 },
	        { "time": 126434, "born": 2344, "died": 1808, "heap": 26704336, "expected": 26704336 },
	        { "time": 126786, "born": 912, "died": 3432, "heap": 26701816, "expected": 26701816 },
	        { "time": 127131, "born": 2712, "died": 472, "heap": 26704056, "expected": 26704056 },
	        { "time": 127522, "born": 8592, "died": 6080, "heap": 26706568, "expected": 26706568 },
	        { "time": 127872, "born": 1272, "died": 2232, "heap": 26705608, "expected": 26705608 },
	        { "time": 128232, "born": 3032, "died": 1224, "heap": 26707416, "expected": 26707416 },
	        { "time": 128580, "born": 2528, "died": 5888, "heap": 26704056, "expected": 26704056 },
	        { "time": 128938, "born": 3840, "died": 2792, "heap": 26705104, "expected": 26705104 },
	        { "time": 129288, "born": 64, "died": 2280, "heap": 26702888, "expected": 26702888 },
	        { "time": 129641, "born": 3064, "died": 1640, "heap": 26704312, "expected": 26704312 },
	        { "time": 129987, "born": 2856, "died": 2280, "heap": 26704888, "expected": 26704888 },
	        { "time": 130338, "born": 408, "died": 2152, "heap": 26703144, "expected": 26703144 },
	        { "time": 130682, "born": 2464, "died": 1040, "heap": 26704568, "expected": 26704568 },
	        { "time": 131035, "born": 3488, "died": 2912, "heap": 26705144, "expected": 26705144 },
	        { "time": 131435, "born": 2344, "died": 1808, "heap": 26705680, "expected": 26705680 },
	        { "time": 131788, "born": 744, "died": 3264, "heap": 26703160, "expected": 26703160 },
	        { "time": 132134, "born": 2712, "died": 472, "heap": 26705400, "expected": 26705400 },
	        { "time": 132525, "born": 26104, "died": 13312, "heap": 26718192, "expected": 26718192 },
	        { "time": 132869, "born": 1336, "died": 2232, "heap": 26717296, "expected": 26717296 },
	        { "time": 133218, "born": 2584, "died": 776, "heap": 26719104, "expected": 26719104 },
	        { "time": 133577, "born": 4672, "died": 16736, "heap": 26707040, "expected": 26707040 },
	        { "time": 133941, "born": 3392, "died": 2344, "heap": 26708088, "expected": 26708088 },
	        { "time": 134289, "born": 64, "died": 2280, "heap": 26705872, "expected": 26705872 },
	        { "time": 134638, "born": 2616, "died": 1192, "heap": 26707296, "expected": 26707296 },
	        { "time": 134988, "born": 2856, "died": 2280, "heap": 26707872, "expected": 26707872 },
	        { "time": 135341, "born": 328, "died": 2072, "heap": 26706128, "expected": 26706128 },
	        { "time": 135687, "born": 2464, "died": 1040, "heap": 26707552, "expected": 26707552 },
	        { "time": 136041, "born": 2880, "died": 2304, "heap": 26708128, "expected": 26708128 },
	        { "time": 136441, "born": 2344, "died": 2296, "heap": 26708176, "expected": 26708176 },
	        { "time": 136795, "born": 920, "died": 2952, "heap": 26706144, "expected": 26706144 },
	        { "time": 137143, "born": 2712, "died": 472, "heap": 26708384, "expected": 26708384 },
	        { "time": 137525, "born": 8352, "died": 5840, "heap": 26710896, "expected": 26710896 },
	        { "time": 137872, "born": 1272, "died": 2232, "heap": 26709936, "expected": 26709936 },
	        { "time": 138223, "born": 2992, "died": 1184, "heap": 26711744, "expected": 26711744 },
	        { "time": 138568, "born": 2528, "died": 5888, "heap": 26708384, "expected": 26708384 },
	        { "time": 138937, "born": 3104, "died": 2056, "heap": 26709432, "expected": 26709432 },
	        { "time": 139287, "born": 64, "died": 2280, "heap": 26707216, "expected": 26707216 },
	        { "time": 139640, "born": 3088, "died": 1664, "heap": 26708640, "expected": 26708640 },
	        { "time": 139992, "born": 2856, "died": 2280, "heap": 26709216, "expected": 26709216 },
	        { "time": 140440, "born": 2712, "died": 2176, "heap": 26709752, "expected": 26709752 },
	        { "time": 140787, "born": 512, "died": 3032, "heap": 26707232, "expected": 26707232 },
	        { "time": 141139, "born": 3000, "died": 760, "heap": 26709472, "expected": 26709472 },
	        { "time": 141521, "born": 2552, "died": 2296, "heap": 26709728, "expected": 26709728 },
	        { "time": 141871, "born": 880, "died": 2688, "heap": 26707920, "expected": 26707920 },
	        { "time": 142216, "born": 2280, "died": 472, "heap": 26709728, "expected": 26709728 },
	        { "time": 142568, "born": 22136, "died": 10152, "heap": 26721712, "expected": 26721712 },
	        { "time": 142934, "born": 4056, "died": 1864, "heap": 26723904, "expected": 26723904 },
	        { "time": 143286, "born": 2176, "died": 4392, "heap": 26721688, "expected": 26721688 },
	        { "time": 143630, "born": 2464, "died": 14360, "heap": 26709792, "expected": 26709792 },
	        { "time": 144001, "born": 3024, "died": 2448, "heap": 26710368, "expected": 26710368 },
	        { "time": 144435, "born": 2344, "died": 1808, "heap": 26710904, "expected": 26710904 },
	        { "time": 144801, "born": 768, "died": 3288, "heap": 26708384, "expected": 26708384 },
	        { "time": 145159, "born": 2712, "died": 472, "heap": 26710624, "expected": 26710624 },
	        { "time": 145528, "born": 2760, "died": 2504, "heap": 26710880, "expected": 26710880 },
	        { "time": 145875, "born": 576, "died": 2384, "heap": 26709072, "expected": 26709072 },
	        { "time": 146242, "born": 2352, "died": 544, "heap": 26710880, "expected": 26710880 },
	        { "time": 146598, "born": 2528, "died": 2848, "heap": 26710560, "expected": 26710560 },
	        { "time": 146996, "born": 3240, "died": 2664, "heap": 26711136, "expected": 26711136 },
	        { "time": 147435, "born": 8288, "died": 5728, "heap": 26713696, "expected": 26713696 },
	        { "time": 147800, "born": 1576, "died": 2984, "heap": 26712288, "expected": 26712288 },
	        { "time": 148157, "born": 2712, "died": 472, "heap": 26714528, "expected": 26714528 },
	        { "time": 148530, "born": 3688, "died": 6472, "heap": 26711744, "expected": 26711744 },
	        { "time": 148875, "born": 576, "died": 2384, "heap": 26709936, "expected": 26709936 },
	        { "time": 149227, "born": 3080, "died": 1272, "heap": 26711744, "expected": 26711744 },
	        { "time": 149577, "born": 2528, "died": 2848, "heap": 26711424, "expected": 26711424 },
	        { "time": 149938, "born": 3888, "died": 2840, "heap": 26712472, "expected": 26712472 },
	        { "time": 150287, "born": 64, "died": 2280, "heap": 26710256, "expected": 26710256 },
	        { "time": 150641, "born": 3112, "died": 1688, "heap": 26711680, "expected": 26711680 },
	        { "time": 151009, "born": 2856, "died": 2280, "heap": 26712256, "expected": 26712256 },
	        { "time": 151440, "born": 2736, "died": 2200, "heap": 26712792, "expected": 26712792 },
	        { "time": 151788, "born": 512, "died": 3032, "heap": 26710272, "expected": 26710272 },
	        { "time": 152140, "born": 3480, "died": 1240, "heap": 26712512, "expected": 26712512 },
	        { "time": 152532, "born": 23264, "died": 9592, "heap": 26726184, "expected": 26726184 },
	        { "time": 152883, "born": 2096, "died": 2632, "heap": 26725648, "expected": 26725648 },
	        { "time": 153235, "born": 2280, "died": 472, "heap": 26727456, "expected": 26727456 },
	        { "time": 153596, "born": 2528, "died": 17256, "heap": 26712728, "expected": 26712728 },
	        { "time": 153988, "born": 2856, "died": 2336, "heap": 26713248, "expected": 26713248 },
	        { "time": 154442, "born": 2456, "died": 1920, "heap": 26713784, "expected": 26713784 },
	        { "time": 154807, "born": 512, "died": 3032, "heap": 26711264, "expected": 26711264 },
	        { "time": 155171, "born": 242816, "died": 95688, "heap": 26858392, "expected": 26858392 },
	        { "time": 155526, "born": 7512, "died": 2616, "heap": 26863288, "expected": 26863288 },
	        { "time": 155875, "born": 880, "died": 2688, "heap": 26861480, "expected": 26861480 },
	        { "time": 156218, "born": 2280, "died": 145576, "heap": 26718184, "expected": 26718184 },
	        { "time": 156577, "born": 2528, "died": 3856, "heap": 26716856, "expected": 26716856 },
	        { "time": 156934, "born": 2856, "died": 1808, "heap": 26717904, "expected": 26717904 },
	        { "time": 157322, "born": 6792, "died": 3328, "heap": 26721368, "expected": 26721368 },
	        { "time": 157669, "born": 2688, "died": 3816, "heap": 26720240, "expected": 26720240 },
	        { "time": 158023, "born": 3200, "died": 2680, "heap": 26720760, "expected": 26720760 },
	        { "time": 158433, "born": 2344, "died": 4848, "heap": 26718256, "expected": 26718256 },
	        { "time": 158788, "born": 968, "died": 3488, "heap": 26715736, "expected": 26715736 },
	        { "time": 159134, "born": 2712, "died": 472, "heap": 26717976, "expected": 26717976 },
	        { "time": 159532, "born": 2632, "died": 2376, "heap": 26718232, "expected": 26718232 },
	        { "time": 159876, "born": 576, "died": 2384, "heap": 26716424, "expected": 26716424 },
	        { "time": 160229, "born": 2424, "died": 616, "heap": 26718232, "expected": 26718232 },
	        { "time": 160575, "born": 2528, "died": 2848, "heap": 26717912, "expected": 26717912 },
	        { "time": 160943, "born": 3160, "died": 2112, "heap": 26718960, "expected": 26718960 },
	        { "time": 161292, "born": 64, "died": 2280, "heap": 26716744, "expected": 26716744 },
	        { "time": 161645, "born": 2792, "died": 1368, "heap": 26718168, "expected": 26718168 },
	        { "time": 161991, "born": 2856, "died": 2280, "heap": 26718744, "expected": 26718744 },
	        { "time": 162442, "born": 8360, "died": 5832, "heap": 26721272, "expected": 26721272 },
	        { "time": 162790, "born": 14896, "died": 6040, "heap": 26730128, "expected": 26730128 },
	        { "time": 163147, "born": 3024, "died": 704, "heap": 26732448, "expected": 26732448 },
	        { "time": 163530, "born": 2552, "died": 5336, "heap": 26729664, "expected": 26729664 },
	        { "time": 163886, "born": 968, "died": 13056, "heap": 26717576, "expected": 26717576 },
	        { "time": 164233, "born": 2280, "died": 472, "heap": 26719384, "expected": 26719384 },
	        { "time": 164593, "born": 2528, "died": 2848, "heap": 26719064, "expected": 26719064 },
	        { "time": 164976, "born": 2856, "died": 2280, "heap": 26719640, "expected": 26719640 },
	        { "time": 165330, "born": 120, "died": 1864, "heap": 26717896, "expected": 26717896 },
	        { "time": 165674, "born": 7032, "died": 1128, "heap": 26723800, "expected": 26723800 },
	        { "time": 166025, "born": 2880, "died": 2304, "heap": 26724376, "expected": 26724376 },
	        { "time": 166435, "born": 536, "died": 1808, "heap": 26723104, "expected": 26723104 },
	        { "time": 166785, "born": 2344, "died": 3120, "heap": 26722328, "expected": 26722328 },
	        { "time": 167135, "born": 2776, "died": 472, "heap": 26724632, "expected": 26724632 },
	        { "time": 167536, "born": 9312, "died": 6800, "heap": 26727144, "expected": 26727144 },
	        { "time": 167935, "born": 3552, "died": 2232, "heap": 26728464, "expected": 26728464 },
	        { "time": 168285, "born": 104, "died": 2320, "heap": 26726248, "expected": 26726248 },
	        { "time": 168636, "born": 2464, "died": 4080, "heap": 26724632, "expected": 26724632 },
	        { "time": 168989, "born": 2880, "died": 2304, "heap": 26725208, "expected": 26725208 },
	        { "time": 169336, "born": 64, "died": 1808, "heap": 26723464, "expected": 26723464 },
	        { "time": 169687, "born": 3328, "died": 1904, "heap": 26724888, "expected": 26724888 },
	        { "time": 170031, "born": 2856, "died": 2280, "heap": 26725464, "expected": 26725464 },
	        { "time": 170440, "born": 2952, "died": 2416, "heap": 26726000, "expected": 26726000 },
	        { "time": 170787, "born": 512, "died": 3032, "heap": 26723480, "expected": 26723480 },
	        { "time": 171137, "born": 2880, "died": 640, "heap": 26725720, "expected": 26725720 },
	        { "time": 171530, "born": 2552, "died": 2296, "heap": 26725976, "expected": 26725976 },
	        { "time": 171939, "born": 3256, "died": 2784, "heap": 26726448, "expected": 26726448 },
	        { "time": 172323, "born": 6480, "died": 2984, "heap": 26729944, "expected": 26729944 },
	        { "time": 172676, "born": 17968, "died": 8784, "heap": 26739128, "expected": 26739128 },
	        { "time": 173025, "born": 2920, "died": 2336, "heap": 26739712, "expected": 26739712 },
	        { "time": 173441, "born": 2440, "died": 4944, "heap": 26737208, "expected": 26737208 },
	        { "time": 173798, "born": 512, "died": 13312, "heap": 26724408, "expected": 26724408 },
	        { "time": 174151, "born": 2800, "died": 560, "heap": 26726648, "expected": 26726648 },
	        { "time": 174532, "born": 2552, "died": 2296, "heap": 26726904, "expected": 26726904 },
	        { "time": 174884, "born": 824, "died": 2632, "heap": 26725096, "expected": 26725096 },
	        { "time": 175229, "born": 2280, "died": 472, "heap": 26726904, "expected": 26726904 },
	        { "time": 175580, "born": 2528, "died": 2848, "heap": 26726584, "expected": 26726584 },
	        { "time": 175980, "born": 2856, "died": 2280, "heap": 26727160, "expected": 26727160 },
	        { "time": 176334, "born": 552, "died": 2296, "heap": 26725416, "expected": 26725416 },
	        { "time": 176681, "born": 2464, "died": 1040, "heap": 26726840, "expected": 26726840 },
	        { "time": 177033, "born": 2880, "died": 2304, "heap": 26727416, "expected": 26727416 },
	        { "time": 177434, "born": 8288, "died": 5728, "heap": 26729976, "expected": 26729976 },
	        { "time": 177788, "born": 1776, "died": 3184, "heap": 26728568, "expected": 26728568 },
	        { "time": 178132, "born": 2712, "died": 472, "heap": 26730808, "expected": 26730808 },
	        { "time": 178537, "born": 2888, "died": 5672, "heap": 26728024, "expected": 26728024 },
	        { "time": 178935, "born": 2856, "died": 2384, "heap": 26728496, "expected": 26728496 },
	        { "time": 179288, "born": 296, "died": 2512, "heap": 26726280, "expected": 26726280 },
	        { "time": 179633, "born": 2464, "died": 1040, "heap": 26727704, "expected": 26727704 },
	        { "time": 180013, "born": 2880, "died": 2304, "heap": 26728280, "expected": 26728280 },
	        { "time": 180434, "born": 2344, "died": 1808, "heap": 26728816, "expected": 26728816 },
	        { "time": 180789, "born": 680, "died": 3200, "heap": 26726296, "expected": 26726296 },
	        { "time": 181135, "born": 2712, "died": 472, "heap": 26728536, "expected": 26728536 },
	        { "time": 181483, "born": 2640, "died": 2592, "heap": 26728584, "expected": 26728584 },
	        { "time": 181830, "born": 800, "died": 2832, "heap": 26726552, "expected": 26726552 },
	        { "time": 182180, "born": 2864, "died": 624, "heap": 26728792, "expected": 26728792 },
	        { "time": 182580, "born": 27880, "died": 10984, "heap": 26745688, "expected": 26745688 },
	        { "time": 182984, "born": 5472, "died": 4024, "heap": 26747136, "expected": 26747136 },
	        { "time": 183327, "born": 64, "died": 1808, "heap": 26745392, "expected": 26745392 },
	        { "time": 183677, "born": 4008, "died": 20240, "heap": 26729160, "expected": 26729160 },
	        { "time": 184024, "born": 2856, "died": 2280, "heap": 26729736, "expected": 26729736 },
	        { "time": 184440, "born": 3632, "died": 3096, "heap": 26730272, "expected": 26730272 },
	        { "time": 184789, "born": 512, "died": 3032, "heap": 26727752, "expected": 26727752 },
	        { "time": 185142, "born": 3560, "died": 1320, "heap": 26729992, "expected": 26729992 },
	        { "time": 185535, "born": 2552, "died": 2296, "heap": 26730248, "expected": 26730248 },
	        { "time": 185886, "born": 1656, "died": 3464, "heap": 26728440, "expected": 26728440 },
	        { "time": 186241, "born": 2280, "died": 472, "heap": 26730248, "expected": 26730248 },
	        { "time": 186594, "born": 2528, "died": 2848, "heap": 26729928, "expected": 26729928 },
	        { "time": 186976, "born": 2856, "died": 2280, "heap": 26730504, "expected": 26730504 },
	        { "time": 187439, "born": 9072, "died": 6544, "heap": 26733032, "expected": 26733032 },
	        { "time": 187789, "born": 1496, "died": 2904, "heap": 26731624, "expected": 26731624 },
	        { "time": 188142, "born": 2760, "died": 520, "heap": 26733864, "expected": 26733864 },
	        { "time": 188537, "born": 2552, "died": 5336, "heap": 26731080, "expected": 26731080 },
	        { "time": 188943, "born": 3136, "died": 2664, "heap": 26731552, "expected": 26731552 },
	        { "time": 189291, "born": 64, "died": 2280, "heap": 26729336, "expected": 26729336 },
	        { "time": 189644, "born": 2792, "died": 1368, "heap": 26730760, "expected": 26730760 },
	        { "time": 189988, "born": 2856, "died": 2280, "heap": 26731336, "expected": 26731336 },
	        { "time": 190336, "born": 448, "died": 2192, "heap": 26729592, "expected": 26729592 },
	        { "time": 190679, "born": 2464, "died": 1040, "heap": 26731016, "expected": 26731016 },
	        { "time": 191033, "born": 2880, "died": 2304, "heap": 26731592, "expected": 26731592 },
	        { "time": 191433, "born": 2344, "died": 1808, "heap": 26732128, "expected": 26732128 },
	        { "time": 191787, "born": 784, "died": 3304, "heap": 26729608, "expected": 26729608 },
	        { "time": 192134, "born": 2712, "died": 472, "heap": 26731848, "expected": 26731848 },
	        { "time": 192541, "born": 24336, "died": 11544, "heap": 26744640, "expected": 26744640 },
	        { "time": 192934, "born": 3616, "died": 2232, "heap": 26746024, "expected": 26746024 },
	        { "time": 193288, "born": 208, "died": 2424, "heap": 26743808, "expected": 26743808 },
	        { "time": 193634, "born": 2464, "died": 14360, "heap": 26731912, "expected": 26731912 },
	        { "time": 193986, "born": 2880, "died": 2304, "heap": 26732488, "expected": 26732488 },
	        { "time": 194330, "born": 64, "died": 1808, "heap": 26730744, "expected": 26730744 },
	        { "time": 194690, "born": 2544, "died": 1120, "heap": 26732168, "expected": 26732168 },
	        { "time": 195038, "born": 2856, "died": 2280, "heap": 26732744, "expected": 26732744 },
	        { "time": 195442, "born": 2488, "died": 1952, "heap": 26733280, "expected": 26733280 },
	        { "time": 195786, "born": 512, "died": 3032, "heap": 26730760, "expected": 26730760 },
	        { "time": 196138, "born": 2824, "died": 584, "heap": 26733000, "expected": 26733000 },
	        { "time": 196482, "born": 2344, "died": 2296, "heap": 26733048, "expected": 26733048 },
	        { "time": 196831, "born": 928, "died": 2960, "heap": 26731016, "expected": 26731016 },
	        { "time": 197194, "born": 2712, "died": 472, "heap": 26733256, "expected": 26733256 },
	        { "time": 197595, "born": 9136, "died": 6992, "heap": 26735400, "expected": 26735400 },
	        { "time": 197989, "born": 3552, "died": 2336, "heap": 26736616, "expected": 26736616 },
	        { "time": 198446, "born": 2792, "died": 2256, "heap": 26737152, "expected": 26737152 },
	        { "time": 198806, "born": 512, "died": 6072, "heap": 26731592, "expected": 26731592 },
	        { "time": 199176, "born": 2720, "died": 480, "heap": 26733832, "expected": 26733832 },
	        { "time": 199539, "born": 2552, "died": 2296, "heap": 26734088, "expected": 26734088 },
	        { "time": 199947, "born": 3096, "died": 2624, "heap": 26734560, "expected": 26734560 },
	        { "time": 200340, "born": 64, "died": 2280, "heap": 26732344, "expected": 26732344 },
	        { "time": 200713, "born": 3440, "died": 2016, "heap": 26733768, "expected": 26733768 },
	        { "time": 201073, "born": 2856, "died": 2280, "heap": 26734344, "expected": 26734344 },
	        { "time": 201460, "born": 2928, "died": 2880, "heap": 26734392, "expected": 26734392 },
	        { "time": 201806, "born": 800, "died": 2832, "heap": 26732360, "expected": 26732360 },
	        { "time": 202158, "born": 2976, "died": 736, "heap": 26734600, "expected": 26734600 },
	        { "time": 202540, "born": 23264, "died": 9592, "heap": 26748272, "expected": 26748272 },
	        { "time": 202941, "born": 4488, "died": 2744, "heap": 26750016, "expected": 26750016 },
	        { "time": 203291, "born": 64, "died": 2280, "heap": 26747800, "expected": 26747800 },
	        { "time": 203645, "born": 2520, "died": 15504, "heap": 26734816, "expected": 26734816 },
	        { "time": 203992, "born": 2856, "died": 2336, "heap": 26735336, "expected": 26735336 },
	        { "time": 204342, "born": 320, "died": 2064, "heap": 26733592, "expected": 26733592 },
	        { "time": 204686, "born": 2464, "died": 1040, "heap": 26735016, "expected": 26735016 },
	        { "time": 205042, "born": 249984, "died": 107184, "heap": 26877816, "expected": 26877816 },
	        { "time": 205452, "born": 7304, "died": 2688, "heap": 26882432, "expected": 26882432 },
	        { "time": 205805, "born": 1568, "died": 3560, "heap": 26880440, "expected": 26880440 },
	        { "time": 206161, "born": 2712, "died": 145576, "heap": 26737576, "expected": 26737576 },
	        { "time": 206552, "born": 2696, "died": 3448, "heap": 26736824, "expected": 26736824 },
	        { "time": 206984, "born": 2856, "died": 2384, "heap": 26737296, "expected": 26737296 },
	        { "time": 207438, "born": 9096, "died": 7512, "heap": 26738880, "expected": 26738880 },
	        { "time": 207784, "born": 1936, "died": 2904, "heap": 26737912, "expected": 26737912 },
	        { "time": 208136, "born": 4480, "died": 2240, "heap": 26740152, "expected": 26740152 },
	        { "time": 208481, "born": 2344, "died": 5336, "heap": 26737160, "expected": 26737160 },
	        { "time": 208838, "born": 848, "died": 2880, "heap": 26735128, "expected": 26735128 },
	        { "time": 209186, "born": 2712, "died": 472, "heap": 26737368, "expected": 26737368 },
	        { "time": 209545, "born": 2640, "died": 2384, "heap": 26737624, "expected": 26737624 },
	        { "time": 209935, "born": 2856, "died": 2384, "heap": 26738096, "expected": 26738096 },
	        { "time": 210286, "born": 112, "died": 2328, "heap": 26735880, "expected": 26735880 },
	        { "time": 210633, "born": 2464, "died": 1040, "heap": 26737304, "expected": 26737304 },
	        { "time": 210987, "born": 3680, "died": 3104, "heap": 26737880, "expected": 26737880 },
	        { "time": 211334, "born": 64, "died": 1808, "heap": 26736136, "expected": 26736136 },
	        { "time": 211688, "born": 2696, "died": 1272, "heap": 26737560, "expected": 26737560 },
	        { "time": 212033, "born": 2856, "died": 2280, "heap": 26738136, "expected": 26738136 },
	        { "time": 212443, "born": 8536, "died": 6008, "heap": 26740664, "expected": 26740664 },
	        { "time": 212801, "born": 14896, "died": 6040, "heap": 26749520, "expected": 26749520 },
	        { "time": 213162, "born": 2856, "died": 536, "heap": 26751840, "expected": 26751840 },
	        { "time": 213546, "born": 2552, "died": 5336, "heap": 26749056, "expected": 26749056 },
	        { "time": 213943, "born": 3080, "died": 12888, "heap": 26739248, "expected": 26739248 },
	        { "time": 214298, "born": 64, "died": 2280, "heap": 26737032, "expected": 26737032 },
	        { "time": 214666, "born": 2584, "died": 1160, "heap": 26738456, "expected": 26738456 },
	        { "time": 215024, "born": 2856, "died": 2280, "heap": 26739032, "expected": 26739032 },
	        { "time": 215439, "born": 4016, "died": 3480, "heap": 26739568, "expected": 26739568 },
	        { "time": 215803, "born": 512, "died": 3032, "heap": 26737048, "expected": 26737048 },
	        { "time": 216171, "born": 3944, "died": 1704, "heap": 26739288, "expected": 26739288 },
	        { "time": 216461, "born": 0, "died": 0, "heap": 25940928, "expected": 25940928 },
	        { "time": 216947, "born": 4320, "died": 3848, "heap": 26740016, "expected": 26740016 },
	        { "time": 217330, "born": 6480, "died": 2984, "heap": 26743512, "expected": 26743512 },
	        { "time": 217697, "born": 3056, "died": 4152, "heap": 26742416, "expected": 26742416 },
	        { "time": 218043, "born": 2856, "died": 2336, "heap": 26742936, "expected": 26742936 },
	        { "time": 218441, "born": 3552, "died": 6544, "heap": 26739944, "expected": 26739944 },
	        { "time": 218786, "born": 800, "died": 2832, "heap": 26737912, "expected": 26737912 },
	        { "time": 219138, "born": 3336, "died": 1096, "heap": 26740152, "expected": 26740152 },
	        { "time": 219482, "born": 2344, "died": 2296, "heap": 26740200, "expected": 26740200 },
	        { "time": 219835, "born": 1512, "died": 3544, "heap": 26738168, "expected": 26738168 },
	        { "time": 220180, "born": 50544, "died": 16752, "heap": 26771960, "expected": 26771960 },
	        { "time": 220550, "born": 4096, "died": 2440, "heap": 26773616, "expected": 26773616 },
	        { "time": 220934, "born": 2856, "died": 2384, "heap": 26774088, "expected": 26774088 },
	        { "time": 221289, "born": 96, "died": 33832, "heap": 26740352, "expected": 26740352 },
	        { "time": 221635, "born": 2464, "died": 1152, "heap": 26741664, "expected": 26741664 },
	        { "time": 221984, "born": 2856, "died": 2280, "heap": 26742240, "expected": 26742240 },
	        { "time": 222437, "born": 8288, "died": 5728, "heap": 26744800, "expected": 26744800 },
	        { "time": 222794, "born": 16328, "died": 7472, "heap": 26753656, "expected": 26753656 },
	        { "time": 223142, "born": 2792, "died": 472, "heap": 26755976, "expected": 26755976 },
	        { "time": 223491, "born": 2840, "died": 5832, "heap": 26752984, "expected": 26752984 },
	        { "time": 223839, "born": 800, "died": 13112, "heap": 26740672, "expected": 26740672 },
	        { "time": 224194, "born": 2816, "died": 576, "heap": 26742912, "expected": 26742912 },
	        { "time": 224591, "born": 2528, "died": 2848, "heap": 26742592, "expected": 26742592 },
	        { "time": 224982, "born": 2856, "died": 2280, "heap": 26743168, "expected": 26743168 },
	        { "time": 225327, "born": 64, "died": 1808, "heap": 26741424, "expected": 26741424 },
	        { "time": 225677, "born": 3200, "died": 1776, "heap": 26742848, "expected": 26742848 },
	        { "time": 226022, "born": 2856, "died": 2280, "heap": 26743424, "expected": 26743424 },
	        { "time": 226440, "born": 2344, "died": 1808, "heap": 26743960, "expected": 26743960 },
	        { "time": 226789, "born": 512, "died": 3032, "heap": 26741440, "expected": 26741440 },
	        { "time": 227139, "born": 2728, "died": 488, "heap": 26743680, "expected": 26743680 },
	        { "time": 227485, "born": 8288, "died": 5744, "heap": 26746224, "expected": 26746224 },
	        { "time": 227837, "born": 1624, "died": 3016, "heap": 26744832, "expected": 26744832 },
	        { "time": 228190, "born": 2712, "died": 472, "heap": 26747072, "expected": 26747072 },
	        { "time": 228550, "born": 2888, "died": 5672, "heap": 26744288, "expected": 26744288 },
	        { "time": 228938, "born": 2856, "died": 2384, "heap": 26744760, "expected": 26744760 },
	        { "time": 229296, "born": 64, "died": 2280, "heap": 26742544, "expected": 26742544 },
	        { "time": 229645, "born": 2464, "died": 1040, "heap": 26743968, "expected": 26743968 },
	        { "time": 229998, "born": 2856, "died": 2280, "heap": 26744544, "expected": 26744544 },
	        { "time": 230396, "born": 536, "died": 1808, "heap": 26743272, "expected": 26743272 },
	        { "time": 230745, "born": 2304, "died": 1272, "heap": 26744304, "expected": 26744304 },
	        { "time": 231090, "born": 2776, "died": 2280, "heap": 26744800, "expected": 26744800 },
	        { "time": 231514, "born": 3552, "died": 3504, "heap": 26744848, "expected": 26744848 },
	        { "time": 231889, "born": 762008, "died": 209952, "heap": 27296904, "expected": 27296904 },
	        { "time": 232241, "born": 43536, "died": 103896, "heap": 27236544, "expected": 27236544 },
	        { "time": 232590, "born": 20744, "died": 14952, "heap": 27242336, "expected": 27242336 }
	    ] };
	var website_log4 = { "data": [
	        { "time": 0, "born": 0, "died": 0, "heap": 0, "expected": 0 },
	        { "time": 958, "born": 7114952, "died": 2716056, "heap": 4398896, "expected": 4398896 },
	        { "time": 1269, "born": 38464, "died": 9608, "heap": 4427752, "expected": 4427752 },
	        { "time": 1582, "born": 0, "died": 0, "heap": 4427752, "expected": 4427752 },
	        { "time": 1892, "born": 118360, "died": 284480, "heap": 4261632, "expected": 4261632 },
	        { "time": 2207, "born": 14608, "died": 7752, "heap": 4268488, "expected": 4268488 },
	        { "time": 2520, "born": 0, "died": 0, "heap": 4268488, "expected": 4268488 },
	        { "time": 2833, "born": 0, "died": 120536, "heap": 4147952, "expected": 4147952 },
	        { "time": 3145, "born": 0, "died": 3152, "heap": 4144800, "expected": 4144800 },
	        { "time": 3787, "born": 28297944, "died": 16669256, "heap": 15773488, "expected": 15773488 },
	        { "time": 6603, "born": 71651760, "died": 29283640, "heap": 58141608, "expected": 58141608 },
	        { "time": 8623, "born": 78658632, "died": 42279184, "heap": 94521056, "expected": 94521056 },
	        { "time": 11102, "born": 72943096, "died": 42778552, "heap": 124685600, "expected": 124685600 },
	        { "time": 12626, "born": 58179160, "died": 48238080, "heap": 134626680, "expected": 134626680 },
	        { "time": 13332, "born": 11583728, "died": 20361408, "heap": 125849000, "expected": 125849000 },
	        { "time": 14134, "born": 4325024, "died": 7781088, "heap": 122392936, "expected": 122392936 },
	        { "time": 14739, "born": 70608, "died": 5232016, "heap": 117231528, "expected": 117231528 },
	        { "time": 15436, "born": 11926456, "died": 6851704, "heap": 122306280, "expected": 122306280 },
	        { "time": 16077, "born": 4104296, "died": 5743456, "heap": 120667120, "expected": 120667120 },
	        { "time": 16643, "born": 495384, "died": 1251528, "heap": 119910976, "expected": 119910976 },
	        { "time": 17217, "born": 14912, "died": 1329616, "heap": 118596272, "expected": 118596272 },
	        { "time": 17800, "born": 42208, "died": 50176, "heap": 118588304, "expected": 118588304 },
	        { "time": 18413, "born": 3336256, "died": 1761120, "heap": 120163440, "expected": 120163440 },
	        { "time": 19128, "born": 2055376, "died": 1586040, "heap": 120632776, "expected": 120632776 },
	        { "time": 19769, "born": 105160, "died": 477456, "heap": 120260480, "expected": 120260480 },
	        { "time": 20419, "born": 3084712, "died": 2180472, "heap": 121164720, "expected": 121164720 },
	        { "time": 21556, "born": 22178040, "died": 9487792, "heap": 133854968, "expected": 133854968 },
	        { "time": 22233, "born": 172096, "died": 4446704, "heap": 129580360, "expected": 129580360 },
	        { "time": 22957, "born": 3520608, "died": 1559136, "heap": 131541832, "expected": 131541832 },
	        { "time": 23573, "born": 99184, "died": 1838896, "heap": 129802120, "expected": 129802120 },
	        { "time": 24330, "born": 3023896, "died": 1989336, "heap": 130836680, "expected": 130836680 },
	        { "time": 24898, "born": 75960, "died": 1058936, "heap": 129853704, "expected": 129853704 },
	        { "time": 25618, "born": 2978416, "died": 2155920, "heap": 130676200, "expected": 130676200 },
	        { "time": 26197, "born": 1291072, "died": 1518928, "heap": 130448344, "expected": 130448344 },
	        { "time": 26816, "born": 569024, "died": 480376, "heap": 130536992, "expected": 130536992 },
	        { "time": 27406, "born": 45256, "died": 181760, "heap": 130400488, "expected": 130400488 },
	        { "time": 28105, "born": 114792, "died": 485688, "heap": 130029592, "expected": 130029592 },
	        { "time": 28730, "born": 60080, "died": 303344, "heap": 129786328, "expected": 129786328 },
	        { "time": 29384, "born": 657336, "died": 186344, "heap": 130257320, "expected": 130257320 },
	        { "time": 29961, "born": 65000, "died": 127736, "heap": 130194584, "expected": 130194584 },
	        { "time": 30572, "born": 213648, "died": 109536, "heap": 130298696, "expected": 130298696 },
	        { "time": 31145, "born": 26576, "died": 320264, "heap": 130005008, "expected": 130005008 },
	        { "time": 31739, "born": 49264, "died": 89520, "heap": 129964752, "expected": 129964752 },
	        { "time": 32347, "born": 10528, "died": 125680, "heap": 129849600, "expected": 129849600 },
	        { "time": 32925, "born": 129552, "died": 65280, "heap": 129913872, "expected": 129913872 },
	        { "time": 33525, "born": 10360, "died": 36104, "heap": 129888128, "expected": 129888128 },
	        { "time": 34098, "born": 243000, "died": 82584, "heap": 130048544, "expected": 130048544 },
	        { "time": 34699, "born": 142088, "died": 169776, "heap": 130020856, "expected": 130020856 },
	        { "time": 35278, "born": 23328, "died": 42928, "heap": 130001256, "expected": 130001256 },
	        { "time": 35887, "born": 50696, "died": 123760, "heap": 129928192, "expected": 129928192 },
	        { "time": 36486, "born": 8248, "died": 50416, "heap": 129886024, "expected": 129886024 },
	        { "time": 37087, "born": 54416, "died": 56288, "heap": 129884152, "expected": 129884152 },
	        { "time": 37684, "born": 58864, "died": 24432, "heap": 129918584, "expected": 129918584 },
	        { "time": 38273, "born": 260552, "died": 162272, "heap": 130016864, "expected": 130016864 },
	        { "time": 38899, "born": 192896, "died": 113192, "heap": 130096568, "expected": 130096568 },
	        { "time": 39497, "born": 8608, "died": 38264, "heap": 130066912, "expected": 130066912 },
	        { "time": 40140, "born": 4469104, "died": 5080616, "heap": 129455400, "expected": 129455400 },
	        { "time": 40837, "born": 162744, "died": 190176, "heap": 129427968, "expected": 129427968 },
	        { "time": 41434, "born": 6128, "died": 90472, "heap": 129343624, "expected": 129343624 },
	        { "time": 42048, "born": 245600, "died": 281136, "heap": 129308088, "expected": 129308088 },
	        { "time": 42689, "born": 53864, "died": 94280, "heap": 129267672, "expected": 129267672 },
	        { "time": 43267, "born": 69720, "died": 66400, "heap": 129270992, "expected": 129270992 },
	        { "time": 43856, "born": 66720, "died": 95104, "heap": 129242608, "expected": 129242608 },
	        { "time": 44521, "born": 7184, "died": 53056, "heap": 129196736, "expected": 129196736 },
	        { "time": 45132, "born": 60272, "died": 96872, "heap": 129160136, "expected": 129160136 },
	        { "time": 45754, "born": 517616, "died": 210320, "heap": 129467432, "expected": 129467432 },
	        { "time": 46317, "born": 202360, "died": 133048, "heap": 129536744, "expected": 129536744 },
	        { "time": 46934, "born": 49848, "died": 53840, "heap": 129532752, "expected": 129532752 },
	        { "time": 47516, "born": 7208, "died": 235960, "heap": 129304000, "expected": 129304000 },
	        { "time": 48085, "born": 114176, "died": 167224, "heap": 129250952, "expected": 129250952 },
	        { "time": 48663, "born": 10928, "died": 20168, "heap": 129241712, "expected": 129241712 },
	        { "time": 49250, "born": 71792, "died": 54784, "heap": 129258720, "expected": 129258720 },
	        { "time": 49894, "born": 50584, "died": 58176, "heap": 129251128, "expected": 129251128 },
	        { "time": 50525, "born": 195400, "died": 124912, "heap": 129321616, "expected": 129321616 },
	        { "time": 51080, "born": 49248, "died": 57792, "heap": 129313072, "expected": 129313072 },
	        { "time": 51638, "born": 8800, "died": 6088, "heap": 129315784, "expected": 129315784 },
	        { "time": 52236, "born": 62464, "died": 142816, "heap": 129235432, "expected": 129235432 },
	        { "time": 52808, "born": 52240, "died": 25312, "heap": 129262360, "expected": 129262360 },
	        { "time": 53419, "born": 79872, "died": 69360, "heap": 129272872, "expected": 129272872 },
	        { "time": 54189, "born": 254736, "died": 100440, "heap": 129427168, "expected": 129427168 },
	        { "time": 54823, "born": 29520, "died": 62200, "heap": 129394488, "expected": 129394488 },
	        { "time": 55431, "born": 20184, "died": 69256, "heap": 129345416, "expected": 129345416 },
	        { "time": 56120, "born": 51968, "died": 109928, "heap": 129287456, "expected": 129287456 },
	        { "time": 56695, "born": 5840, "died": 51792, "heap": 129241504, "expected": 129241504 },
	        { "time": 57341, "born": 48104, "died": 51720, "heap": 129237888, "expected": 129237888 },
	        { "time": 58008, "born": 127704, "died": 41152, "heap": 129324440, "expected": 129324440 },
	        { "time": 58614, "born": 185848, "died": 141712, "heap": 129368576, "expected": 129368576 },
	        { "time": 59182, "born": 64840, "died": 53264, "heap": 129380152, "expected": 129380152 },
	        { "time": 59752, "born": 7208, "died": 40496, "heap": 129346864, "expected": 129346864 },
	        { "time": 60355, "born": 51336, "died": 140456, "heap": 129257744, "expected": 129257744 },
	        { "time": 60920, "born": 51168, "died": 30056, "heap": 129278856, "expected": 129278856 },
	        { "time": 61523, "born": 31768, "died": 44232, "heap": 129266392, "expected": 129266392 },
	        { "time": 62150, "born": 237728, "died": 80960, "heap": 129423160, "expected": 129423160 },
	        { "time": 62801, "born": 7840, "died": 69344, "heap": 129361656, "expected": 129361656 },
	        { "time": 63374, "born": 116216, "died": 90456, "heap": 129387416, "expected": 129387416 },
	        { "time": 63984, "born": 73224, "died": 82144, "heap": 129378496, "expected": 129378496 },
	        { "time": 64569, "born": 160720, "died": 185208, "heap": 129354008, "expected": 129354008 },
	        { "time": 65136, "born": 116240, "died": 96872, "heap": 129373376, "expected": 129373376 },
	        { "time": 65763, "born": 7280, "died": 23144, "heap": 129357512, "expected": 129357512 },
	        { "time": 66326, "born": 239992, "died": 194672, "heap": 129402832, "expected": 129402832 },
	        { "time": 66945, "born": 89968, "died": 33240, "heap": 129459560, "expected": 129459560 },
	        { "time": 67528, "born": 27936, "died": 57896, "heap": 129429600, "expected": 129429600 },
	        { "time": 68153, "born": 113872, "died": 165080, "heap": 129378392, "expected": 129378392 },
	        { "time": 68754, "born": 38104, "died": 26312, "heap": 129390184, "expected": 129390184 },
	        { "time": 69341, "born": 71160, "died": 82480, "heap": 129378864, "expected": 129378864 },
	        { "time": 69936, "born": 57944, "died": 61888, "heap": 129374920, "expected": 129374920 },
	        { "time": 70520, "born": 262168, "died": 150248, "heap": 129486840, "expected": 129486840 },
	        { "time": 71110, "born": 467440, "died": 275688, "heap": 129678592, "expected": 129678592 },
	        { "time": 71702, "born": 14080, "died": 25672, "heap": 129667000, "expected": 129667000 },
	        { "time": 72243, "born": 55680, "died": 138904, "heap": 129583776, "expected": 129583776 },
	        { "time": 72782, "born": 7456, "died": 258656, "heap": 129332576, "expected": 129332576 },
	        { "time": 73387, "born": 124880, "died": 82872, "heap": 129374584, "expected": 129374584 },
	        { "time": 73987, "born": 72160, "died": 20088, "heap": 129426656, "expected": 129426656 },
	        { "time": 74529, "born": 181768, "died": 138008, "heap": 129470416, "expected": 129470416 },
	        { "time": 75147, "born": 69512, "died": 69448, "heap": 129470480, "expected": 129470480 },
	        { "time": 75771, "born": 7248, "died": 41296, "heap": 129436432, "expected": 129436432 },
	        { "time": 76301, "born": 51288, "died": 144368, "heap": 129343352, "expected": 129343352 },
	        { "time": 76898, "born": 8800, "died": 18344, "heap": 129333808, "expected": 129333808 },
	        { "time": 77448, "born": 55952, "died": 48832, "heap": 129340928, "expected": 129340928 },
	        { "time": 78016, "born": 111984, "died": 24232, "heap": 129428680, "expected": 129428680 },
	        { "time": 78617, "born": 213240, "died": 164344, "heap": 129477576, "expected": 129477576 },
	        { "time": 79218, "born": 65744, "died": 33520, "heap": 129509800, "expected": 129509800 },
	        { "time": 79755, "born": 8800, "died": 67632, "heap": 129450968, "expected": 129450968 },
	        { "time": 80331, "born": 48576, "died": 141552, "heap": 129357992, "expected": 129357992 },
	        { "time": 80897, "born": 434712, "died": 145440, "heap": 129647264, "expected": 129647264 },
	        { "time": 81470, "born": 92296, "died": 54456, "heap": 129685104, "expected": 129685104 },
	        { "time": 82089, "born": 58280, "died": 31048, "heap": 129712336, "expected": 129712336 },
	        { "time": 82629, "born": 225832, "died": 339912, "heap": 129598256, "expected": 129598256 },
	        { "time": 83213, "born": 117608, "died": 81136, "heap": 129634728, "expected": 129634728 },
	        { "time": 83806, "born": 7072, "died": 56240, "heap": 129585560, "expected": 129585560 },
	        { "time": 84364, "born": 64224, "died": 138744, "heap": 129511040, "expected": 129511040 },
	        { "time": 84905, "born": 19928, "died": 52504, "heap": 129478464, "expected": 129478464 },
	        { "time": 85465, "born": 50272, "died": 53712, "heap": 129475024, "expected": 129475024 },
	        { "time": 86025, "born": 9616, "died": 17776, "heap": 129466864, "expected": 129466864 },
	        { "time": 86600, "born": 242400, "died": 150672, "heap": 129558592, "expected": 129558592 },
	        { "time": 87199, "born": 54064, "died": 16648, "heap": 129596008, "expected": 129596008 },
	        { "time": 87773, "born": 6608, "died": 45384, "heap": 129557232, "expected": 129557232 },
	        { "time": 88340, "born": 114656, "died": 163312, "heap": 129508576, "expected": 129508576 },
	        { "time": 88953, "born": 25784, "died": 11432, "heap": 129522928, "expected": 129522928 },
	        { "time": 89488, "born": 47440, "died": 52016, "heap": 129518352, "expected": 129518352 },
	        { "time": 90031, "born": 8800, "died": 50744, "heap": 129476408, "expected": 129476408 },
	        { "time": 90569, "born": 242752, "died": 149920, "heap": 129569240, "expected": 129569240 },
	        { "time": 91164, "born": 449568, "died": 225456, "heap": 129793352, "expected": 129793352 },
	        { "time": 91729, "born": 57920, "died": 51752, "heap": 129799520, "expected": 129799520 },
	        { "time": 92275, "born": 54960, "died": 122000, "heap": 129732480, "expected": 129732480 },
	        { "time": 92835, "born": 8448, "died": 248160, "heap": 129492768, "expected": 129492768 },
	        { "time": 93553, "born": 136744, "died": 83736, "heap": 129545776, "expected": 129545776 },
	        { "time": 94147, "born": 636328, "died": 141880, "heap": 130040224, "expected": 130040224 },
	        { "time": 94743, "born": 59504, "died": 231912, "heap": 129867816, "expected": 129867816 },
	        { "time": 95290, "born": 59144, "died": 43984, "heap": 129882976, "expected": 129882976 },
	        { "time": 95884, "born": 8240, "died": 326312, "heap": 129564904, "expected": 129564904 },
	        { "time": 96568, "born": 56536, "died": 99936, "heap": 129521504, "expected": 129521504 },
	        { "time": 97149, "born": 1504, "died": 14728, "heap": 129508280, "expected": 129508280 },
	        { "time": 97711, "born": 54368, "died": 48384, "heap": 129514264, "expected": 129514264 },
	        { "time": 98301, "born": 1883064, "died": 1031032, "heap": 130366296, "expected": 130366296 },
	        { "time": 98896, "born": 55472, "died": 77096, "heap": 130344672, "expected": 130344672 },
	        { "time": 99773, "born": 4741192, "died": 2885200, "heap": 132200664, "expected": 132200664 },
	        { "time": 100523, "born": 5285656, "died": 2804992, "heap": 134681328, "expected": 134681328 },
	        { "time": 101156, "born": 2947280, "died": 1783104, "heap": 135845504, "expected": 135845504 },
	        { "time": 101741, "born": 542128, "died": 4520064, "heap": 131867568, "expected": 131867568 },
	        { "time": 102331, "born": 195832, "died": 1173504, "heap": 130889896, "expected": 130889896 },
	        { "time": 102919, "born": 53840, "died": 301360, "heap": 130642376, "expected": 130642376 },
	        { "time": 103522, "born": 472144, "died": 557048, "heap": 130557472, "expected": 130557472 },
	        { "time": 104106, "born": 77752, "died": 128600, "heap": 130506624, "expected": 130506624 },
	        { "time": 104698, "born": 49816, "died": 47216, "heap": 130509224, "expected": 130509224 },
	        { "time": 105279, "born": 17728, "died": 275568, "heap": 130251384, "expected": 130251384 },
	        { "time": 105845, "born": 54088, "died": 64624, "heap": 130240848, "expected": 130240848 },
	        { "time": 106412, "born": 197064, "died": 102680, "heap": 130335232, "expected": 130335232 },
	        { "time": 106984, "born": 54360, "died": 55592, "heap": 130334000, "expected": 130334000 },
	        { "time": 107558, "born": 1504, "died": 4864, "heap": 130330640, "expected": 130330640 },
	        { "time": 108170, "born": 119112, "died": 171608, "heap": 130278144, "expected": 130278144 },
	        { "time": 108783, "born": 54352, "died": 43080, "heap": 130289416, "expected": 130289416 },
	        { "time": 109386, "born": 27688, "died": 37288, "heap": 130279816, "expected": 130279816 },
	        { "time": 109974, "born": 53888, "died": 83840, "heap": 130249864, "expected": 130249864 },
	        { "time": 110567, "born": 193480, "died": 103728, "heap": 130339616, "expected": 130339616 },
	        { "time": 111132, "born": 52352, "died": 61024, "heap": 130330944, "expected": 130330944 },
	        { "time": 111725, "born": 17480, "died": 10608, "heap": 130337816, "expected": 130337816 },
	        { "time": 112317, "born": 9024, "died": 100632, "heap": 130246208, "expected": 130246208 },
	        { "time": 112942, "born": 14176, "died": 37944, "heap": 130222440, "expected": 130222440 },
	        { "time": 113528, "born": 88600, "died": 59368, "heap": 130251672, "expected": 130251672 },
	        { "time": 114193, "born": 209744, "died": 46096, "heap": 130415320, "expected": 130415320 },
	        { "time": 114759, "born": 12536, "died": 83104, "heap": 130344752, "expected": 130344752 },
	        { "time": 115304, "born": 12960, "died": 41976, "heap": 130315736, "expected": 130315736 },
	        { "time": 115901, "born": 11208, "died": 86048, "heap": 130240896, "expected": 130240896 },
	        { "time": 116490, "born": 1712, "died": 33576, "heap": 130209032, "expected": 130209032 },
	        { "time": 117124, "born": 11168, "died": 16768, "heap": 130203432, "expected": 130203432 },
	        { "time": 117713, "born": 11168, "died": 10176, "heap": 130204424, "expected": 130204424 },
	        { "time": 118291, "born": 270688, "died": 85072, "heap": 130390040, "expected": 130390040 },
	        { "time": 118905, "born": 33280, "died": 67784, "heap": 130355536, "expected": 130355536 },
	        { "time": 119494, "born": 0, "died": 7456, "heap": 130348080, "expected": 130348080 },
	        { "time": 120131, "born": 12880, "died": 123712, "heap": 130237248, "expected": 130237248 },
	        { "time": 120719, "born": 11168, "died": 36728, "heap": 130211688, "expected": 130211688 },
	        { "time": 121322, "born": 0, "died": 3496, "heap": 130208192, "expected": 130208192 },
	        { "time": 121910, "born": 14152, "died": 13800, "heap": 130208544, "expected": 130208544 },
	        { "time": 122488, "born": 195560, "died": 103104, "heap": 130301000, "expected": 130301000 },
	        { "time": 123079, "born": 88880, "died": 25024, "heap": 130364856, "expected": 130364856 },
	        { "time": 123674, "born": 13272, "died": 34448, "heap": 130343680, "expected": 130343680 },
	        { "time": 124244, "born": 141248, "died": 105864, "heap": 130379064, "expected": 130379064 },
	        { "time": 124842, "born": 26288, "died": 112016, "heap": 130293336, "expected": 130293336 },
	        { "time": 125420, "born": 37896, "died": 34176, "heap": 130297056, "expected": 130297056 },
	        { "time": 126006, "born": 11240, "died": 68088, "heap": 130240208, "expected": 130240208 },
	        { "time": 126576, "born": 217328, "died": 126848, "heap": 130330688, "expected": 130330688 },
	        { "time": 127158, "born": 57640, "died": 38040, "heap": 130350288, "expected": 130350288 },
	        { "time": 127741, "born": 13496, "died": 18176, "heap": 130345608, "expected": 130345608 },
	        { "time": 128320, "born": 76568, "died": 131752, "heap": 130290424, "expected": 130290424 },
	        { "time": 128926, "born": 66080, "died": 56952, "heap": 130299552, "expected": 130299552 },
	        { "time": 129560, "born": 4088, "died": 17768, "heap": 130285872, "expected": 130285872 },
	        { "time": 130199, "born": 77184, "died": 55608, "heap": 130307448, "expected": 130307448 },
	        { "time": 130833, "born": 206144, "died": 154744, "heap": 130358848, "expected": 130358848 },
	        { "time": 131431, "born": 80432, "died": 32552, "heap": 130406728, "expected": 130406728 },
	        { "time": 132033, "born": 16744, "died": 46944, "heap": 130376528, "expected": 130376528 },
	        { "time": 132602, "born": 7536, "died": 105752, "heap": 130278312, "expected": 130278312 },
	        { "time": 133212, "born": 99944, "died": 79176, "heap": 130299080, "expected": 130299080 },
	        { "time": 133801, "born": 11304, "died": 31184, "heap": 130279200, "expected": 130279200 },
	        { "time": 134399, "born": 201192, "died": 69584, "heap": 130410808, "expected": 130410808 },
	        { "time": 134954, "born": 22928, "died": 83632, "heap": 130350104, "expected": 130350104 },
	        { "time": 135585, "born": 1776, "died": 4928, "heap": 130346952, "expected": 130346952 },
	        { "time": 136177, "born": 11168, "died": 75704, "heap": 130282416, "expected": 130282416 },
	        { "time": 136767, "born": 11168, "died": 57424, "heap": 130236160, "expected": 130236160 },
	        { "time": 137355, "born": 0, "died": 3200, "heap": 130232960, "expected": 130232960 },
	        { "time": 137899, "born": 446056, "died": 233160, "heap": 130445856, "expected": 130445856 },
	        { "time": 138531, "born": 262088, "died": 131368, "heap": 130576576, "expected": 130576576 },
	        { "time": 139158, "born": 32440, "died": 20296, "heap": 130588720, "expected": 130588720 },
	        { "time": 139703, "born": 14944, "died": 204288, "heap": 130399376, "expected": 130399376 },
	        { "time": 140243, "born": 0, "died": 133184, "heap": 130266192, "expected": 130266192 },
	        { "time": 140830, "born": 35560, "died": 38248, "heap": 130263504, "expected": 130263504 },
	        { "time": 141378, "born": 28728, "died": 2000, "heap": 130290232, "expected": 130290232 },
	        { "time": 141915, "born": 156904, "died": 159288, "heap": 130287848, "expected": 130287848 },
	        { "time": 142453, "born": 195592, "died": 104368, "heap": 130379072, "expected": 130379072 },
	        { "time": 143061, "born": 90656, "died": 36856, "heap": 130432872, "expected": 130432872 },
	        { "time": 143595, "born": 407272, "died": 261592, "heap": 130578552, "expected": 130578552 },
	        { "time": 144180, "born": 228600, "died": 223720, "heap": 130583432, "expected": 130583432 },
	        { "time": 144796, "born": 21272, "died": 31408, "heap": 130573296, "expected": 130573296 },
	        { "time": 145348, "born": 12960, "died": 20152, "heap": 130566104, "expected": 130566104 },
	        { "time": 145957, "born": 11880, "died": 264480, "heap": 130313504, "expected": 130313504 },
	        { "time": 146498, "born": 197232, "died": 102240, "heap": 130408496, "expected": 130408496 },
	        { "time": 147067, "born": 12312, "died": 16888, "heap": 130403920, "expected": 130403920 },
	        { "time": 147638, "born": 0, "died": 272, "heap": 130403648, "expected": 130403648 },
	        { "time": 148251, "born": 87736, "died": 134264, "heap": 130357120, "expected": 130357120 },
	        { "time": 148826, "born": 11560, "died": 34160, "heap": 130334520, "expected": 130334520 },
	        { "time": 149418, "born": 25632, "died": 13632, "heap": 130346520, "expected": 130346520 },
	        { "time": 149973, "born": 11168, "died": 44688, "heap": 130313000, "expected": 130313000 },
	        { "time": 150536, "born": 193672, "died": 99320, "heap": 130407352, "expected": 130407352 },
	        { "time": 151132, "born": 12312, "died": 21856, "heap": 130397808, "expected": 130397808 },
	        { "time": 151715, "born": 11168, "died": 7592, "heap": 130401384, "expected": 130401384 },
	        { "time": 152304, "born": 9024, "died": 103904, "heap": 130306504, "expected": 130306504 },
	        { "time": 152879, "born": 11368, "died": 12840, "heap": 130305032, "expected": 130305032 },
	        { "time": 153523, "born": 90296, "died": 44168, "heap": 130351160, "expected": 130351160 },
	        { "time": 154118, "born": 33848, "died": 27192, "heap": 130357816, "expected": 130357816 },
	        { "time": 154753, "born": 598984, "died": 352416, "heap": 130604384, "expected": 130604384 },
	        { "time": 155350, "born": 26800, "died": 32744, "heap": 130598440, "expected": 130598440 },
	        { "time": 155971, "born": 11208, "died": 22176, "heap": 130587472, "expected": 130587472 },
	        { "time": 156546, "born": 0, "died": 307512, "heap": 130279960, "expected": 130279960 },
	        { "time": 157134, "born": 11168, "died": 17968, "heap": 130273160, "expected": 130273160 },
	        { "time": 157726, "born": 12880, "died": 7856, "heap": 130278184, "expected": 130278184 },
	        { "time": 158344, "born": 273888, "died": 110552, "heap": 130441520, "expected": 130441520 },
	        { "time": 158969, "born": 31680, "died": 50536, "heap": 130422664, "expected": 130422664 },
	        { "time": 159554, "born": 64, "died": 7992, "heap": 130414736, "expected": 130414736 },
	        { "time": 160162, "born": 11168, "died": 138312, "heap": 130287592, "expected": 130287592 },
	        { "time": 160749, "born": 81888, "died": 47400, "heap": 130322080, "expected": 130322080 },
	        { "time": 161334, "born": 9480, "died": 15632, "heap": 130315928, "expected": 130315928 },
	        { "time": 161971, "born": 11168, "died": 11120, "heap": 130315976, "expected": 130315976 },
	        { "time": 162525, "born": 195560, "died": 138088, "heap": 130373448, "expected": 130373448 },
	        { "time": 163137, "born": 88880, "died": 26800, "heap": 130435528, "expected": 130435528 },
	        { "time": 163727, "born": 11560, "died": 34408, "heap": 130412680, "expected": 130412680 },
	        { "time": 164299, "born": 22048, "died": 98776, "heap": 130335952, "expected": 130335952 },
	        { "time": 164912, "born": 21560, "died": 41872, "heap": 130315640, "expected": 130315640 },
	        { "time": 165485, "born": 1752, "died": 18616, "heap": 130298776, "expected": 130298776 },
	        { "time": 166075, "born": 11168, "died": 23888, "heap": 130286056, "expected": 130286056 },
	        { "time": 166728, "born": 203040, "died": 110496, "heap": 130378600, "expected": 130378600 },
	        { "time": 167310, "born": 1144, "died": 4528, "heap": 130375216, "expected": 130375216 },
	        { "time": 167879, "born": 11168, "died": 10760, "heap": 130375624, "expected": 130375624 },
	        { "time": 168410, "born": 76592, "died": 127384, "heap": 130324832, "expected": 130324832 },
	        { "time": 169006, "born": 36600, "died": 17400, "heap": 130344032, "expected": 130344032 },
	        { "time": 169540, "born": 0, "died": 4552, "heap": 130339480, "expected": 130339480 },
	        { "time": 170118, "born": 11168, "died": 54576, "heap": 130296072, "expected": 130296072 },
	        { "time": 170651, "born": 191976, "died": 110080, "heap": 130377968, "expected": 130377968 },
	        { "time": 171252, "born": 12312, "died": 11240, "heap": 130379040, "expected": 130379040 },
	        { "time": 171781, "born": 11168, "died": 9952, "heap": 130380256, "expected": 130380256 },
	        { "time": 172310, "born": 9024, "died": 100232, "heap": 130289048, "expected": 130289048 },
	        { "time": 172841, "born": 13104, "died": 12920, "heap": 130289232, "expected": 130289232 },
	        { "time": 173393, "born": 88600, "died": 44144, "heap": 130333688, "expected": 130333688 },
	        { "time": 173930, "born": 33872, "died": 17056, "heap": 130350504, "expected": 130350504 },
	        { "time": 174479, "born": 179264, "died": 67024, "heap": 130462744, "expected": 130462744 },
	        { "time": 175038, "born": 22552, "died": 81968, "heap": 130403328, "expected": 130403328 },
	        { "time": 175577, "born": 40, "died": 14984, "heap": 130388384, "expected": 130388384 },
	        { "time": 176129, "born": 12880, "died": 98112, "heap": 130303152, "expected": 130303152 },
	        { "time": 176670, "born": 0, "died": 15536, "heap": 130287616, "expected": 130287616 },
	        { "time": 177237, "born": 11840, "died": 12016, "heap": 130287440, "expected": 130287440 },
	        { "time": 177773, "born": 11168, "died": 9888, "heap": 130288720, "expected": 130288720 },
	        { "time": 178344, "born": 271608, "died": 68376, "heap": 130491952, "expected": 130491952 },
	        { "time": 178942, "born": 31264, "died": 83320, "heap": 130439896, "expected": 130439896 },
	        { "time": 179496, "born": 0, "died": 7816, "heap": 130432080, "expected": 130432080 },
	        { "time": 180039, "born": 84952, "died": 135344, "heap": 130381688, "expected": 130381688 },
	        { "time": 180630, "born": 9056, "died": 50944, "heap": 130339800, "expected": 130339800 },
	        { "time": 181158, "born": 11168, "died": 13352, "heap": 130337616, "expected": 130337616 },
	        { "time": 181736, "born": 33752, "died": 54528, "heap": 130316840, "expected": 130316840 },
	        { "time": 182347, "born": 195984, "died": 38464, "heap": 130474360, "expected": 130474360 },
	        { "time": 182885, "born": 11712, "died": 92552, "heap": 130393520, "expected": 130393520 },
	        { "time": 183424, "born": 76592, "died": 52344, "heap": 130417768, "expected": 130417768 },
	        { "time": 183973, "born": 32536, "died": 87664, "heap": 130362640, "expected": 130362640 },
	        { "time": 184549, "born": 567872, "died": 314824, "heap": 130615688, "expected": 130615688 },
	        { "time": 185180, "born": 59960, "died": 45744, "heap": 130629904, "expected": 130629904 },
	        { "time": 185749, "born": 11240, "died": 25192, "heap": 130615952, "expected": 130615952 },
	        { "time": 186324, "born": 144200, "died": 308048, "heap": 130452104, "expected": 130452104 },
	        { "time": 186940, "born": 98864, "died": 117288, "heap": 130433680, "expected": 130433680 },
	        { "time": 187467, "born": 33936, "died": 37632, "heap": 130429984, "expected": 130429984 },
	        { "time": 188096, "born": 226760, "died": 62728, "heap": 130594016, "expected": 130594016 },
	        { "time": 188715, "born": 32880, "died": 126944, "heap": 130499952, "expected": 130499952 },
	        { "time": 189320, "born": 584128, "died": 246440, "heap": 130837640, "expected": 130837640 },
	        { "time": 189979, "born": 23800, "died": 228048, "heap": 130633392, "expected": 130633392 },
	        { "time": 190588, "born": 230832, "died": 109608, "heap": 130754616, "expected": 130754616 },
	        { "time": 191182, "born": 13272, "died": 280024, "heap": 130487864, "expected": 130487864 },
	        { "time": 192289, "born": 20192, "died": 62312, "heap": 130445744, "expected": 130445744 },
	        { "time": 192872, "born": 11320, "died": 110248, "heap": 130346816, "expected": 130346816 },
	        { "time": 193463, "born": 88600, "died": 92664, "heap": 130342752, "expected": 130342752 },
	        { "time": 194060, "born": 33872, "died": 25144, "heap": 130351480, "expected": 130351480 },
	        { "time": 194592, "born": 179528, "died": 95872, "heap": 130435136, "expected": 130435136 },
	        { "time": 195127, "born": 30136, "died": 55200, "heap": 130410072, "expected": 130410072 },
	        { "time": 195686, "born": 40, "died": 11392, "heap": 130398720, "expected": 130398720 },
	        { "time": 196290, "born": 11168, "died": 107000, "heap": 130302888, "expected": 130302888 },
	        { "time": 196908, "born": 11168, "died": 17856, "heap": 130296200, "expected": 130296200 },
	        { "time": 197456, "born": 0, "died": 936, "heap": 130295264, "expected": 130295264 },
	        { "time": 198037, "born": 448096, "died": 105520, "heap": 130637840, "expected": 130637840 },
	        { "time": 198593, "born": 284904, "died": 273784, "heap": 130648960, "expected": 130648960 },
	        { "time": 199237, "born": 32264, "died": 20120, "heap": 130661104, "expected": 130661104 },
	        { "time": 199770, "born": 11168, "died": 194336, "heap": 130477936, "expected": 130477936 },
	        { "time": 200314, "born": 0, "died": 155072, "heap": 130322864, "expected": 130322864 },
	        { "time": 200894, "born": 11168, "died": 24344, "heap": 130309688, "expected": 130309688 },
	        { "time": 201477, "born": 56912, "died": 10072, "heap": 130356528, "expected": 130356528 },
	        { "time": 202051, "born": 11672, "died": 27032, "heap": 130341168, "expected": 130341168 },
	        { "time": 202627, "born": 197256, "died": 100304, "heap": 130438120, "expected": 130438120 },
	        { "time": 203163, "born": 88880, "died": 59032, "heap": 130467968, "expected": 130467968 },
	        { "time": 203762, "born": 11560, "died": 40960, "heap": 130438568, "expected": 130438568 },
	        { "time": 204296, "born": 22048, "died": 100096, "heap": 130360520, "expected": 130360520 },
	        { "time": 204922, "born": 21560, "died": 44872, "heap": 130337208, "expected": 130337208 },
	        { "time": 205483, "born": 40, "died": 15136, "heap": 130322112, "expected": 130322112 },
	        { "time": 206053, "born": 12880, "died": 23928, "heap": 130311064, "expected": 130311064 },
	        { "time": 206575, "born": 195560, "died": 106408, "heap": 130400216, "expected": 130400216 },
	        { "time": 207119, "born": 12312, "died": 11464, "heap": 130401064, "expected": 130401064 }
	    ] };
	var website_log5 = { "data": [
	        { "time": 0, "born": 0, "died": 0, "heap": 0, "expected": 0 },
	        { "time": 1101, "born": 84098424, "died": 72437712, "heap": 11660712, "expected": 11660712 },
	        { "time": 1442, "born": 6800, "died": 49840, "heap": 11617672, "expected": 11617672 },
	        { "time": 1840, "born": 2894040, "died": 1001104, "heap": 13510608, "expected": 13510608 },
	        { "time": 2159, "born": 54920, "died": 2716976, "heap": 10848552, "expected": 10848552 },
	        { "time": 2486, "born": 2046048, "died": 1115488, "heap": 11779112, "expected": 11779112 },
	        { "time": 2815, "born": 1117840, "died": 784760, "heap": 12112192, "expected": 12112192 },
	        { "time": 3144, "born": 1150624, "died": 861248, "heap": 12401568, "expected": 12401568 },
	        { "time": 3481, "born": 5064, "died": 83520, "heap": 12323112, "expected": 12323112 },
	        { "time": 3853, "born": 7282664, "died": 3382456, "heap": 16223320, "expected": 16223320 },
	        { "time": 4191, "born": 912736, "died": 1619336, "heap": 15516720, "expected": 15516720 },
	        { "time": 4526, "born": 5648, "died": 344248, "heap": 15178120, "expected": 15178120 },
	        { "time": 4863, "born": 0, "died": 636040, "heap": 14542080, "expected": 14542080 },
	        { "time": 5193, "born": 2400, "died": 562072, "heap": 13982408, "expected": 13982408 },
	        { "time": 5543, "born": 9742360, "died": 5124544, "heap": 18600224, "expected": 18600224 },
	        { "time": 5878, "born": 1356288, "died": 896816, "heap": 19059696, "expected": 19059696 },
	        { "time": 6212, "born": 25912, "died": 377672, "heap": 18707936, "expected": 18707936 },
	        { "time": 6541, "born": 1176160, "died": 840792, "heap": 19043304, "expected": 19043304 },
	        { "time": 6874, "born": 225096, "died": 390208, "heap": 18878192, "expected": 18878192 },
	        { "time": 7258, "born": 3820136, "died": 507216, "heap": 22191112, "expected": 22191112 },
	        { "time": 7584, "born": 3184064, "died": 5238384, "heap": 20136792, "expected": 20136792 },
	        { "time": 7918, "born": 45960, "died": 275808, "heap": 19906944, "expected": 19906944 },
	        { "time": 8254, "born": 0, "died": 1342472, "heap": 18564472, "expected": 18564472 },
	        { "time": 8586, "born": 0, "died": 805640, "heap": 17758832, "expected": 17758832 },
	        { "time": 8941, "born": 6802152, "died": 2861704, "heap": 21699280, "expected": 21699280 },
	        { "time": 9279, "born": 3192656, "died": 5228936, "heap": 19663000, "expected": 19663000 },
	        { "time": 9612, "born": 57856, "died": 112576, "heap": 19608280, "expected": 19608280 },
	        { "time": 9944, "born": 772528, "died": 469096, "heap": 19911712, "expected": 19911712 },
	        { "time": 10274, "born": 99208, "died": 147104, "heap": 19863816, "expected": 19863816 },
	        { "time": 10605, "born": 2864, "died": 352, "heap": 19866328, "expected": 19866328 },
	        { "time": 10932, "born": 219568, "died": 627296, "heap": 19458600, "expected": 19458600 },
	        { "time": 11266, "born": 34576, "died": 52608, "heap": 19440568, "expected": 19440568 },
	        { "time": 11597, "born": 704, "died": 288, "heap": 19440984, "expected": 19440984 },
	        { "time": 11924, "born": 0, "died": 1173472, "heap": 18267512, "expected": 18267512 },
	        { "time": 12257, "born": 0, "died": 38224, "heap": 18229288, "expected": 18229288 },
	        { "time": 12584, "born": 0, "died": 2032, "heap": 18227256, "expected": 18227256 },
	        { "time": 12910, "born": 0, "died": 0, "heap": 18227256, "expected": 18227256 },
	        { "time": 13242, "born": 0, "died": 0, "heap": 18227256, "expected": 18227256 },
	        { "time": 13567, "born": 0, "died": 0, "heap": 18227256, "expected": 18227256 },
	        { "time": 13898, "born": 22848, "died": 15744, "heap": 18234360, "expected": 18234360 },
	        { "time": 14225, "born": 589256, "died": 196976, "heap": 18626640, "expected": 18626640 },
	        { "time": 14689, "born": 18546816, "died": 7677616, "heap": 29495840, "expected": 29495840 },
	        { "time": 15117, "born": 4285664, "died": 5189392, "heap": 28592112, "expected": 28592112 },
	        { "time": 15485, "born": 4162744, "died": 3333944, "heap": 29420912, "expected": 29420912 },
	        { "time": 15859, "born": 3414104, "died": 3058952, "heap": 29776064, "expected": 29776064 },
	        { "time": 16242, "born": 3203584, "died": 2905408, "heap": 30074240, "expected": 30074240 },
	        { "time": 16592, "born": 4075848, "died": 4883048, "heap": 29267040, "expected": 29267040 },
	        { "time": 16966, "born": 213672, "died": 742912, "heap": 28737800, "expected": 28737800 },
	        { "time": 17307, "born": 229264, "died": 146432, "heap": 28820632, "expected": 28820632 },
	        { "time": 17676, "born": 17152, "died": 877200, "heap": 27960584, "expected": 27960584 },
	        { "time": 18074, "born": 8538168, "died": 2414920, "heap": 34083832, "expected": 34083832 },
	        { "time": 18417, "born": 2141448, "died": 4469624, "heap": 31755656, "expected": 31755656 },
	        { "time": 18773, "born": 4036600, "died": 4874760, "heap": 30917496, "expected": 30917496 },
	        { "time": 19128, "born": 17392, "died": 539928, "heap": 30394960, "expected": 30394960 },
	        { "time": 19486, "born": 0, "died": 47064, "heap": 30347896, "expected": 30347896 },
	        { "time": 19833, "born": 217728, "died": 1094720, "heap": 29470904, "expected": 29470904 },
	        { "time": 20179, "born": 6162688, "died": 3103240, "heap": 32530352, "expected": 32530352 },
	        { "time": 20592, "born": 1472016, "died": 1782456, "heap": 32219912, "expected": 32219912 },
	        { "time": 20949, "born": 603288, "died": 676224, "heap": 32146976, "expected": 32146976 },
	        { "time": 21347, "born": 1145528, "died": 651296, "heap": 32641208, "expected": 32641208 },
	        { "time": 21691, "born": 1143408, "died": 716576, "heap": 33068040, "expected": 33068040 },
	        { "time": 22231, "born": 6026088, "died": 5132512, "heap": 33961616, "expected": 33961616 },
	        { "time": 22585, "born": 675288, "died": 897128, "heap": 33739776, "expected": 33739776 },
	        { "time": 22941, "born": 4060536, "died": 3129944, "heap": 34670368, "expected": 34670368 },
	        { "time": 23313, "born": 675712, "died": 779424, "heap": 34566656, "expected": 34566656 },
	        { "time": 23686, "born": 3440, "died": 360456, "heap": 34209640, "expected": 34209640 },
	        { "time": 24034, "born": 3357896, "died": 1839344, "heap": 35728192, "expected": 35728192 },
	        { "time": 24386, "born": 16008, "died": 785392, "heap": 34958808, "expected": 34958808 },
	        { "time": 24732, "born": 0, "died": 80, "heap": 34958728, "expected": 34958728 },
	        { "time": 25072, "born": 215752, "died": 1137496, "heap": 34036984, "expected": 34036984 },
	        { "time": 25425, "born": 5128, "died": 15312, "heap": 34026800, "expected": 34026800 },
	        { "time": 25764, "born": 7165168, "died": 3287064, "heap": 37904904, "expected": 37904904 },
	        { "time": 26130, "born": 34376, "died": 1356296, "heap": 36582984, "expected": 36582984 },
	        { "time": 26479, "born": 3149392, "died": 1577768, "heap": 38154608, "expected": 38154608 },
	        { "time": 26838, "born": 708736, "died": 1161256, "heap": 37702088, "expected": 37702088 },
	        { "time": 27185, "born": 694920, "died": 363792, "heap": 38033216, "expected": 38033216 },
	        { "time": 27532, "born": 1217120, "died": 762576, "heap": 38487760, "expected": 38487760 },
	        { "time": 27882, "born": 635448, "died": 645544, "heap": 38477664, "expected": 38477664 },
	        { "time": 28235, "born": 267832, "died": 225344, "heap": 38520152, "expected": 38520152 },
	        { "time": 28582, "born": 1953944, "died": 1185088, "heap": 39289008, "expected": 39289008 },
	        { "time": 28932, "born": 497208, "died": 332864, "heap": 39453352, "expected": 39453352 },
	        { "time": 29296, "born": 1015688, "died": 1163192, "heap": 39305848, "expected": 39305848 },
	        { "time": 29638, "born": 883040, "died": 392792, "heap": 39796096, "expected": 39796096 },
	        { "time": 29998, "born": 1078528, "died": 764272, "heap": 40110352, "expected": 40110352 },
	        { "time": 30346, "born": 888512, "died": 680520, "heap": 40318344, "expected": 40318344 },
	        { "time": 30728, "born": 1573136, "died": 941560, "heap": 40949920, "expected": 40949920 },
	        { "time": 31081, "born": 732432, "died": 970096, "heap": 40712256, "expected": 40712256 },
	        { "time": 31437, "born": 1781648, "died": 1008928, "heap": 41484976, "expected": 41484976 },
	        { "time": 31811, "born": 637328, "died": 570088, "heap": 41552216, "expected": 41552216 },
	        { "time": 32176, "born": 2600, "died": 64840, "heap": 41489976, "expected": 41489976 },
	        { "time": 32532, "born": 0, "died": 601160, "heap": 40888816, "expected": 40888816 },
	        { "time": 32889, "born": 0, "died": 1236688, "heap": 39652128, "expected": 39652128 },
	        { "time": 33262, "born": 0, "died": 16760, "heap": 39635368, "expected": 39635368 },
	        { "time": 33620, "born": 0, "died": 832, "heap": 39634536, "expected": 39634536 },
	        { "time": 33978, "born": 0, "died": 0, "heap": 39634536, "expected": 39634536 },
	        { "time": 34324, "born": 14296, "died": 10864, "heap": 39637968, "expected": 39637968 },
	        { "time": 34671, "born": 2696, "died": 1792, "heap": 39638872, "expected": 39638872 },
	        { "time": 35016, "born": 13300856, "died": 6179728, "heap": 46760000, "expected": 46760000 },
	        { "time": 35423, "born": 270528, "died": 2599376, "heap": 44431152, "expected": 44431152 },
	        { "time": 35790, "born": 1059280, "died": 441064, "heap": 45049368, "expected": 45049368 },
	        { "time": 36150, "born": 681400, "died": 696392, "heap": 45034376, "expected": 45034376 },
	        { "time": 36509, "born": 609624, "died": 365512, "heap": 45278488, "expected": 45278488 },
	        { "time": 36867, "born": 1160456, "died": 880224, "heap": 45558720, "expected": 45558720 },
	        { "time": 37230, "born": 1073696, "died": 640936, "heap": 45991480, "expected": 45991480 },
	        { "time": 37588, "born": 217816, "died": 410984, "heap": 45798312, "expected": 45798312 },
	        { "time": 37969, "born": 2420840, "died": 972448, "heap": 47246704, "expected": 47246704 },
	        { "time": 38314, "born": 1971120, "died": 963168, "heap": 48254656, "expected": 48254656 },
	        { "time": 38684, "born": 16896, "died": 1039712, "heap": 47231840, "expected": 47231840 },
	        { "time": 39052, "born": 0, "died": 17104, "heap": 47214736, "expected": 47214736 },
	        { "time": 39401, "born": 0, "died": 1119744, "heap": 46094992, "expected": 46094992 },
	        { "time": 39768, "born": 0, "died": 10720, "heap": 46084272, "expected": 46084272 },
	        { "time": 40143, "born": 440784, "died": 171488, "heap": 46353568, "expected": 46353568 },
	        { "time": 40488, "born": 11379968, "died": 5528352, "heap": 52205184, "expected": 52205184 },
	        { "time": 40843, "born": 15352, "died": 2002112, "heap": 50218424, "expected": 50218424 },
	        { "time": 41201, "born": 2491368, "died": 1228040, "heap": 51481752, "expected": 51481752 },
	        { "time": 41556, "born": 550840, "died": 301016, "heap": 51731576, "expected": 51731576 },
	        { "time": 41907, "born": 774656, "died": 1152600, "heap": 51353632, "expected": 51353632 },
	        { "time": 42261, "born": 961864, "died": 571320, "heap": 51744176, "expected": 51744176 },
	        { "time": 42615, "born": 1072848, "died": 796784, "heap": 52020240, "expected": 52020240 },
	        { "time": 42964, "born": 1186448, "died": 700376, "heap": 52506312, "expected": 52506312 },
	        { "time": 43316, "born": 189176, "died": 502712, "heap": 52192776, "expected": 52192776 },
	        { "time": 43673, "born": 56544, "died": 151928, "heap": 52097392, "expected": 52097392 },
	        { "time": 44020, "born": 0, "died": 552568, "heap": 51544824, "expected": 51544824 },
	        { "time": 44368, "born": 0, "died": 672568, "heap": 50872256, "expected": 50872256 },
	        { "time": 44717, "born": 2400, "died": 10000, "heap": 50864656, "expected": 50864656 },
	        { "time": 45064, "born": 9787848, "died": 4545584, "heap": 56106920, "expected": 56106920 },
	        { "time": 45419, "born": 14496, "died": 1590664, "heap": 54530752, "expected": 54530752 },
	        { "time": 45815, "born": 3029832, "died": 1665456, "heap": 55895128, "expected": 55895128 },
	        { "time": 46176, "born": 520840, "died": 1005128, "heap": 55410840, "expected": 55410840 },
	        { "time": 46537, "born": 553592, "died": 327512, "heap": 55636920, "expected": 55636920 },
	        { "time": 46898, "born": 2291464, "died": 1181432, "heap": 56746952, "expected": 56746952 },
	        { "time": 47258, "born": 578200, "died": 1070800, "heap": 56254352, "expected": 56254352 },
	        { "time": 47621, "born": 782328, "died": 429176, "heap": 56607504, "expected": 56607504 },
	        { "time": 47983, "born": 369168, "died": 216272, "heap": 56760400, "expected": 56760400 },
	        { "time": 48348, "born": 308584, "died": 343704, "heap": 56725280, "expected": 56725280 },
	        { "time": 48714, "born": 731088, "died": 708896, "heap": 56747472, "expected": 56747472 },
	        { "time": 49073, "born": 22392, "died": 172168, "heap": 56597696, "expected": 56597696 },
	        { "time": 49425, "born": 4051200, "died": 2104664, "heap": 58544232, "expected": 58544232 },
	        { "time": 49828, "born": 354384, "died": 1055664, "heap": 57842952, "expected": 57842952 },
	        { "time": 50196, "born": 477688, "died": 325208, "heap": 57995432, "expected": 57995432 },
	        { "time": 50559, "born": 340496, "died": 323872, "heap": 58012056, "expected": 58012056 },
	        { "time": 50927, "born": 243496, "died": 246208, "heap": 58009344, "expected": 58009344 },
	        { "time": 51292, "born": 406264, "died": 451048, "heap": 57964560, "expected": 57964560 },
	        { "time": 51651, "born": 285896, "died": 267216, "heap": 57983240, "expected": 57983240 },
	        { "time": 52019, "born": 323800, "died": 395592, "heap": 57911448, "expected": 57911448 },
	        { "time": 52379, "born": 10912, "died": 94096, "heap": 57828264, "expected": 57828264 },
	        { "time": 52740, "born": 216072, "died": 113096, "heap": 57931240, "expected": 57931240 },
	        { "time": 53101, "born": 2424, "died": 1063600, "heap": 56870064, "expected": 56870064 },
	        { "time": 53462, "born": 0, "died": 12048, "heap": 56858016, "expected": 56858016 },
	        { "time": 53828, "born": 0, "died": 323576, "heap": 56534440, "expected": 56534440 },
	        { "time": 54208, "born": 0, "died": 2608, "heap": 56531832, "expected": 56531832 },
	        { "time": 54566, "born": 0, "died": 1632, "heap": 56530200, "expected": 56530200 },
	        { "time": 54924, "born": 459456, "died": 179240, "heap": 56810416, "expected": 56810416 },
	        { "time": 55290, "born": 3360, "died": 192, "heap": 56813584, "expected": 56813584 },
	        { "time": 55660, "born": 0, "died": 0, "heap": 56813584, "expected": 56813584 },
	        { "time": 56051, "born": 0, "died": 300800, "heap": 56512784, "expected": 56512784 },
	        { "time": 56410, "born": 27808, "died": 19928, "heap": 56520664, "expected": 56520664 },
	        { "time": 56770, "born": 368, "died": 1728, "heap": 56519304, "expected": 56519304 },
	        { "time": 57127, "born": 0, "died": 0, "heap": 56519304, "expected": 56519304 },
	        { "time": 57489, "born": 442672, "died": 152048, "heap": 56809928, "expected": 56809928 },
	        { "time": 57854, "born": 3360, "died": 192, "heap": 56813096, "expected": 56813096 },
	        { "time": 58206, "born": 0, "died": 0, "heap": 56813096, "expected": 56813096 },
	        { "time": 58558, "born": 0, "died": 300800, "heap": 56512296, "expected": 56512296 },
	        { "time": 58921, "born": 0, "died": 896, "heap": 56511400, "expected": 56511400 },
	        { "time": 59269, "born": 0, "died": 1632, "heap": 56509768, "expected": 56509768 },
	        { "time": 59615, "born": 0, "died": 0, "heap": 56509768, "expected": 56509768 },
	        { "time": 59959, "born": 459456, "died": 160016, "heap": 56809208, "expected": 56809208 },
	        { "time": 60311, "born": 3360, "died": 192, "heap": 56812376, "expected": 56812376 },
	        { "time": 60657, "born": 0, "died": 0, "heap": 56812376, "expected": 56812376 },
	        { "time": 61009, "born": 0, "died": 300800, "heap": 56511576, "expected": 56511576 },
	        { "time": 61381, "born": 36008, "died": 21056, "heap": 56526528, "expected": 56526528 },
	        { "time": 61731, "born": 896, "died": 1704, "heap": 56525720, "expected": 56525720 },
	        { "time": 62089, "born": 5288, "died": 38000, "heap": 56493008, "expected": 56493008 },
	        { "time": 62494, "born": 441872, "died": 153848, "heap": 56781032, "expected": 56781032 },
	        { "time": 62847, "born": 3408, "died": 192, "heap": 56784248, "expected": 56784248 },
	        { "time": 63211, "born": 3112, "died": 3192, "heap": 56784168, "expected": 56784168 },
	        { "time": 63561, "born": 632, "died": 293040, "heap": 56491760, "expected": 56491760 },
	        { "time": 63915, "born": 0, "died": 896, "heap": 56490864, "expected": 56490864 },
	        { "time": 64267, "born": 0, "died": 12056, "heap": 56478808, "expected": 56478808 },
	        { "time": 64619, "born": 0, "died": 80, "heap": 56478728, "expected": 56478728 },
	        { "time": 64972, "born": 459456, "died": 161336, "heap": 56776848, "expected": 56776848 },
	        { "time": 65324, "born": 3360, "died": 192, "heap": 56780016, "expected": 56780016 },
	        { "time": 65702, "born": 0, "died": 0, "heap": 56780016, "expected": 56780016 },
	        { "time": 66065, "born": 0, "died": 300800, "heap": 56479216, "expected": 56479216 },
	        { "time": 66411, "born": 32520, "died": 23512, "heap": 56488224, "expected": 56488224 },
	        { "time": 66758, "born": 3160, "died": 11416, "heap": 56479968, "expected": 56479968 },
	        { "time": 67127, "born": 632, "died": 0, "heap": 56480600, "expected": 56480600 },
	        { "time": 67514, "born": 441808, "died": 151976, "heap": 56770432, "expected": 56770432 },
	        { "time": 67862, "born": 3408, "died": 2856, "heap": 56770984, "expected": 56770984 },
	        { "time": 68208, "born": 0, "died": 0, "heap": 56770984, "expected": 56770984 },
	        { "time": 68559, "born": 0, "died": 300800, "heap": 56470184, "expected": 56470184 },
	        { "time": 68906, "born": 0, "died": 896, "heap": 56469288, "expected": 56469288 },
	        { "time": 69258, "born": 254168, "died": 112400, "heap": 56611056, "expected": 56611056 },
	        { "time": 69606, "born": 44976, "died": 31576, "heap": 56624456, "expected": 56624456 },
	        { "time": 69962, "born": 6792, "died": 5488, "heap": 56625760, "expected": 56625760 },
	        { "time": 70326, "born": 234480, "died": 87432, "heap": 56772808, "expected": 56772808 },
	        { "time": 70695, "born": 34632, "died": 33920, "heap": 56773520, "expected": 56773520 },
	        { "time": 71043, "born": 33912, "died": 35504, "heap": 56771928, "expected": 56771928 },
	        { "time": 71402, "born": 37960, "died": 182656, "heap": 56627232, "expected": 56627232 },
	        { "time": 71752, "born": 34144, "died": 35112, "heap": 56626264, "expected": 56626264 },
	        { "time": 72104, "born": 1944, "died": 1632, "heap": 56626576, "expected": 56626576 },
	        { "time": 72455, "born": 0, "died": 2496, "heap": 56624080, "expected": 56624080 },
	        { "time": 72802, "born": 234208, "died": 88960, "heap": 56769328, "expected": 56769328 },
	        { "time": 73153, "born": 2328, "died": 192, "heap": 56771464, "expected": 56771464 },
	        { "time": 73509, "born": 0, "died": 0, "heap": 56771464, "expected": 56771464 },
	        { "time": 73875, "born": 0, "died": 300832, "heap": 56470632, "expected": 56470632 },
	        { "time": 74237, "born": 0, "died": 896, "heap": 56469736, "expected": 56469736 },
	        { "time": 74598, "born": 0, "died": 1632, "heap": 56468104, "expected": 56468104 },
	        { "time": 74944, "born": 0, "died": 0, "heap": 56468104, "expected": 56468104 },
	        { "time": 75292, "born": 459488, "died": 164744, "heap": 56762848, "expected": 56762848 },
	        { "time": 75642, "born": 3360, "died": 192, "heap": 56766016, "expected": 56766016 },
	        { "time": 76001, "born": 0, "died": 0, "heap": 56766016, "expected": 56766016 },
	        { "time": 76362, "born": 14816, "died": 300896, "heap": 56479936, "expected": 56479936 },
	        { "time": 76727, "born": 800, "died": 896, "heap": 56479840, "expected": 56479840 },
	        { "time": 77081, "born": 0, "died": 1632, "heap": 56478208, "expected": 56478208 },
	        { "time": 77441, "born": 0, "died": 15392, "heap": 56462816, "expected": 56462816 },
	        { "time": 77799, "born": 459488, "died": 160432, "heap": 56761872, "expected": 56761872 },
	        { "time": 78162, "born": 3360, "died": 192, "heap": 56765040, "expected": 56765040 },
	        { "time": 78530, "born": 0, "died": 0, "heap": 56765040, "expected": 56765040 },
	        { "time": 78881, "born": 0, "died": 300832, "heap": 56464208, "expected": 56464208 },
	        { "time": 79230, "born": 0, "died": 896, "heap": 56463312, "expected": 56463312 },
	        { "time": 79588, "born": 0, "died": 1632, "heap": 56461680, "expected": 56461680 },
	        { "time": 79946, "born": 0, "died": 0, "heap": 56461680, "expected": 56461680 },
	        { "time": 80294, "born": 459488, "died": 159272, "heap": 56761896, "expected": 56761896 },
	        { "time": 80647, "born": 3360, "died": 192, "heap": 56765064, "expected": 56765064 },
	        { "time": 80997, "born": 0, "died": 0, "heap": 56765064, "expected": 56765064 },
	        { "time": 81344, "born": 14816, "died": 299896, "heap": 56479984, "expected": 56479984 },
	        { "time": 81698, "born": 800, "died": 896, "heap": 56479888, "expected": 56479888 },
	        { "time": 82062, "born": 5624, "died": 6120, "heap": 56479392, "expected": 56479392 },
	        { "time": 82405, "born": 3112, "died": 10000, "heap": 56472504, "expected": 56472504 },
	        { "time": 82753, "born": 447624, "died": 154344, "heap": 56765784, "expected": 56765784 },
	        { "time": 83106, "born": 3280, "died": 192, "heap": 56768872, "expected": 56768872 },
	        { "time": 83452, "born": 0, "died": 2664, "heap": 56766208, "expected": 56766208 },
	        { "time": 83796, "born": 0, "died": 300832, "heap": 56465376, "expected": 56465376 },
	        { "time": 84140, "born": 0, "died": 896, "heap": 56464480, "expected": 56464480 },
	        { "time": 84490, "born": 0, "died": 1632, "heap": 56462848, "expected": 56462848 },
	        { "time": 84835, "born": 0, "died": 0, "heap": 56462848, "expected": 56462848 },
	        { "time": 85185, "born": 459488, "died": 160544, "heap": 56761792, "expected": 56761792 },
	        { "time": 85536, "born": 3360, "died": 192, "heap": 56764960, "expected": 56764960 },
	        { "time": 85889, "born": 0, "died": 0, "heap": 56764960, "expected": 56764960 },
	        { "time": 86235, "born": 0, "died": 300832, "heap": 56464128, "expected": 56464128 },
	        { "time": 86586, "born": 27808, "died": 19128, "heap": 56472808, "expected": 56472808 },
	        { "time": 86939, "born": 368, "died": 1728, "heap": 56471448, "expected": 56471448 },
	        { "time": 87294, "born": 0, "died": 0, "heap": 56471448, "expected": 56471448 },
	        { "time": 87638, "born": 442704, "died": 152048, "heap": 56762104, "expected": 56762104 },
	        { "time": 87986, "born": 3360, "died": 192, "heap": 56765272, "expected": 56765272 },
	        { "time": 88343, "born": 393376, "died": 257296, "heap": 56901352, "expected": 56901352 },
	        { "time": 88698, "born": 7928, "died": 264360, "heap": 56644920, "expected": 56644920 },
	        { "time": 89044, "born": 0, "died": 448, "heap": 56644472, "expected": 56644472 },
	        { "time": 89388, "born": 0, "died": 230512, "heap": 56413960, "expected": 56413960 },
	        { "time": 89742, "born": 0, "died": 1008, "heap": 56412952, "expected": 56412952 },
	        { "time": 90087, "born": 458656, "died": 163296, "heap": 56708312, "expected": 56708312 },
	        { "time": 90434, "born": 3392, "died": 192, "heap": 56711512, "expected": 56711512 },
	        { "time": 90797, "born": 0, "died": 0, "heap": 56711512, "expected": 56711512 },
	        { "time": 91153, "born": 0, "died": 300832, "heap": 56410680, "expected": 56410680 },
	        { "time": 91501, "born": 27808, "died": 18672, "heap": 56419816, "expected": 56419816 },
	        { "time": 91850, "born": 368, "died": 1728, "heap": 56418456, "expected": 56418456 },
	        { "time": 92197, "born": 0, "died": 0, "heap": 56418456, "expected": 56418456 },
	        { "time": 92545, "born": 0, "died": 15664, "heap": 56402792, "expected": 56402792 },
	        { "time": 92896, "born": 459488, "died": 156000, "heap": 56706280, "expected": 56706280 },
	        { "time": 93243, "born": 3528, "died": 192, "heap": 56709616, "expected": 56709616 },
	        { "time": 93598, "born": 0, "died": 0, "heap": 56709616, "expected": 56709616 },
	        { "time": 93953, "born": 0, "died": 300832, "heap": 56408784, "expected": 56408784 },
	        { "time": 94323, "born": 0, "died": 896, "heap": 56407888, "expected": 56407888 },
	        { "time": 94679, "born": 0, "died": 1632, "heap": 56406256, "expected": 56406256 },
	        { "time": 95051, "born": 0, "died": 0, "heap": 56406256, "expected": 56406256 },
	        { "time": 95433, "born": 459488, "died": 159272, "heap": 56706472, "expected": 56706472 },
	        { "time": 95784, "born": 3360, "died": 192, "heap": 56709640, "expected": 56709640 },
	        { "time": 96138, "born": 0, "died": 0, "heap": 56709640, "expected": 56709640 },
	        { "time": 96488, "born": 14816, "died": 299896, "heap": 56424560, "expected": 56424560 },
	        { "time": 96854, "born": 800, "died": 896, "heap": 56424464, "expected": 56424464 },
	        { "time": 97228, "born": 0, "died": 1632, "heap": 56422832, "expected": 56422832 },
	        { "time": 97600, "born": 441408, "died": 157152, "heap": 56707088, "expected": 56707088 },
	        { "time": 97950, "born": 7488, "died": 3624, "heap": 56710952, "expected": 56710952 },
	        { "time": 98295, "born": 632, "died": 0, "heap": 56711584, "expected": 56711584 },
	        { "time": 98645, "born": 0, "died": 293568, "heap": 56418016, "expected": 56418016 },
	        { "time": 99001, "born": 0, "died": 8160, "heap": 56409856, "expected": 56409856 },
	        { "time": 99349, "born": 0, "died": 1632, "heap": 56408224, "expected": 56408224 },
	        { "time": 99696, "born": 0, "died": 0, "heap": 56408224, "expected": 56408224 },
	        { "time": 100047, "born": 0, "died": 0, "heap": 56408224, "expected": 56408224 },
	        { "time": 100408, "born": 459488, "died": 161192, "heap": 56706520, "expected": 56706520 },
	        { "time": 100795, "born": 3360, "died": 192, "heap": 56709688, "expected": 56709688 },
	        { "time": 101143, "born": 0, "died": 0, "heap": 56709688, "expected": 56709688 },
	        { "time": 101498, "born": 14816, "died": 299896, "heap": 56424608, "expected": 56424608 },
	        { "time": 101853, "born": 800, "died": 896, "heap": 56424512, "expected": 56424512 },
	        { "time": 102204, "born": 0, "died": 1632, "heap": 56422880, "expected": 56422880 },
	        { "time": 102558, "born": 0, "died": 15392, "heap": 56407488, "expected": 56407488 },
	        { "time": 102904, "born": 459488, "died": 160600, "heap": 56706376, "expected": 56706376 },
	        { "time": 103276, "born": 3528, "died": 192, "heap": 56709712, "expected": 56709712 },
	        { "time": 103626, "born": 0, "died": 0, "heap": 56709712, "expected": 56709712 },
	        { "time": 103985, "born": 0, "died": 300832, "heap": 56408880, "expected": 56408880 },
	        { "time": 104339, "born": 0, "died": 896, "heap": 56407984, "expected": 56407984 },
	        { "time": 104696, "born": 0, "died": 1632, "heap": 56406352, "expected": 56406352 },
	        { "time": 105053, "born": 0, "died": 0, "heap": 56406352, "expected": 56406352 },
	        { "time": 105403, "born": 459488, "died": 159272, "heap": 56706568, "expected": 56706568 },
	        { "time": 105755, "born": 3360, "died": 192, "heap": 56709736, "expected": 56709736 },
	        { "time": 106127, "born": 0, "died": 0, "heap": 56709736, "expected": 56709736 },
	        { "time": 106475, "born": 14816, "died": 299896, "heap": 56424656, "expected": 56424656 },
	        { "time": 106823, "born": 800, "died": 896, "heap": 56424560, "expected": 56424560 },
	        { "time": 107169, "born": 0, "died": 1632, "heap": 56422928, "expected": 56422928 },
	        { "time": 107519, "born": 0, "died": 15392, "heap": 56407536, "expected": 56407536 },
	        { "time": 107899, "born": 459488, "died": 160432, "heap": 56706592, "expected": 56706592 },
	        { "time": 108255, "born": 3360, "died": 192, "heap": 56709760, "expected": 56709760 },
	        { "time": 108605, "born": 0, "died": 0, "heap": 56709760, "expected": 56709760 },
	        { "time": 108957, "born": 0, "died": 300832, "heap": 56408928, "expected": 56408928 },
	        { "time": 109304, "born": 0, "died": 896, "heap": 56408032, "expected": 56408032 },
	        { "time": 109659, "born": 0, "died": 1632, "heap": 56406400, "expected": 56406400 },
	        { "time": 110010, "born": 0, "died": 0, "heap": 56406400, "expected": 56406400 },
	        { "time": 110360, "born": 459488, "died": 159272, "heap": 56706616, "expected": 56706616 },
	        { "time": 110729, "born": 3360, "died": 192, "heap": 56709784, "expected": 56709784 },
	        { "time": 111085, "born": 0, "died": 0, "heap": 56709784, "expected": 56709784 },
	        { "time": 111452, "born": 14864, "died": 299856, "heap": 56424792, "expected": 56424792 },
	        { "time": 111802, "born": 2280, "died": 896, "heap": 56426176, "expected": 56426176 },
	        { "time": 112158, "born": 0, "died": 1632, "heap": 56424544, "expected": 56424544 },
	        { "time": 112507, "born": 0, "died": 15392, "heap": 56409152, "expected": 56409152 },
	        { "time": 112858, "born": 465512, "died": 162080, "heap": 56712584, "expected": 56712584 },
	        { "time": 113206, "born": 3528, "died": 192, "heap": 56715920, "expected": 56715920 },
	        { "time": 113565, "born": 0, "died": 0, "heap": 56715920, "expected": 56715920 },
	        { "time": 113915, "born": 0, "died": 300832, "heap": 56415088, "expected": 56415088 },
	        { "time": 114259, "born": 0, "died": 896, "heap": 56414192, "expected": 56414192 },
	        { "time": 114624, "born": 0, "died": 1632, "heap": 56412560, "expected": 56412560 },
	        { "time": 115000, "born": 0, "died": 0, "heap": 56412560, "expected": 56412560 },
	        { "time": 115349, "born": 459488, "died": 159272, "heap": 56712776, "expected": 56712776 },
	        { "time": 115707, "born": 3360, "died": 192, "heap": 56715944, "expected": 56715944 },
	        { "time": 116054, "born": 0, "died": 0, "heap": 56715944, "expected": 56715944 },
	        { "time": 116405, "born": 14816, "died": 299896, "heap": 56430864, "expected": 56430864 },
	        { "time": 116761, "born": 800, "died": 896, "heap": 56430768, "expected": 56430768 },
	        { "time": 117123, "born": 0, "died": 1632, "heap": 56429136, "expected": 56429136 },
	        { "time": 117470, "born": 0, "died": 15392, "heap": 56413744, "expected": 56413744 },
	        { "time": 117815, "born": 459488, "died": 160432, "heap": 56712800, "expected": 56712800 },
	        { "time": 118170, "born": 3360, "died": 192, "heap": 56715968, "expected": 56715968 },
	        { "time": 118545, "born": 0, "died": 0, "heap": 56715968, "expected": 56715968 },
	        { "time": 118893, "born": 0, "died": 300832, "heap": 56415136, "expected": 56415136 },
	        { "time": 119248, "born": 0, "died": 896, "heap": 56414240, "expected": 56414240 },
	        { "time": 119626, "born": 0, "died": 1632, "heap": 56412608, "expected": 56412608 },
	        { "time": 119982, "born": 0, "died": 0, "heap": 56412608, "expected": 56412608 },
	        { "time": 120339, "born": 459488, "died": 159272, "heap": 56712824, "expected": 56712824 },
	        { "time": 120689, "born": 3360, "died": 192, "heap": 56715992, "expected": 56715992 },
	        { "time": 121038, "born": 0, "died": 0, "heap": 56715992, "expected": 56715992 },
	        { "time": 121392, "born": 20392, "died": 302416, "heap": 56433968, "expected": 56433968 },
	        { "time": 121751, "born": 992, "died": 896, "heap": 56434064, "expected": 56434064 },
	        { "time": 122098, "born": 0, "died": 1632, "heap": 56432432, "expected": 56432432 },
	        { "time": 122446, "born": 0, "died": 17896, "heap": 56414536, "expected": 56414536 },
	        { "time": 122792, "born": 471192, "died": 164408, "heap": 56721320, "expected": 56721320 },
	        { "time": 123142, "born": 47504, "died": 38336, "heap": 56730488, "expected": 56730488 },
	        { "time": 123495, "born": 2296, "died": 0, "heap": 56732784, "expected": 56732784 },
	        { "time": 123841, "born": 0, "died": 149624, "heap": 56583160, "expected": 56583160 },
	        { "time": 124189, "born": 0, "died": 161576, "heap": 56421584, "expected": 56421584 },
	        { "time": 124533, "born": 0, "died": 2048, "heap": 56419536, "expected": 56419536 },
	        { "time": 124883, "born": 0, "died": 0, "heap": 56419536, "expected": 56419536 },
	        { "time": 125231, "born": 459488, "died": 165944, "heap": 56713080, "expected": 56713080 },
	        { "time": 125576, "born": 3360, "died": 192, "heap": 56716248, "expected": 56716248 },
	        { "time": 125926, "born": 0, "died": 0, "heap": 56716248, "expected": 56716248 },
	        { "time": 126275, "born": 0, "died": 300832, "heap": 56415416, "expected": 56415416 },
	        { "time": 126621, "born": 1149576, "died": 455168, "heap": 57109824, "expected": 57109824 },
	        { "time": 126977, "born": 20592, "died": 1024, "heap": 57129392, "expected": 57129392 },
	        { "time": 127343, "born": 0, "died": 0, "heap": 57129392, "expected": 57129392 },
	        { "time": 127696, "born": 48080, "died": 632872, "heap": 56544600, "expected": 56544600 },
	        { "time": 128076, "born": 2096, "died": 35736, "heap": 56510960, "expected": 56510960 },
	        { "time": 128438, "born": 0, "died": 1872, "heap": 56509088, "expected": 56509088 },
	        { "time": 128789, "born": 0, "died": 165616, "heap": 56343472, "expected": 56343472 },
	        { "time": 129146, "born": 0, "died": 448, "heap": 56343024, "expected": 56343024 },
	        { "time": 129499, "born": 0, "died": 0, "heap": 56343024, "expected": 56343024 },
	        { "time": 129861, "born": 0, "died": 0, "heap": 56343024, "expected": 56343024 },
	        { "time": 130221, "born": 459984, "died": 166512, "heap": 56636496, "expected": 56636496 },
	        { "time": 130616, "born": 3464, "died": 192, "heap": 56639768, "expected": 56639768 },
	        { "time": 130974, "born": 0, "died": 0, "heap": 56639768, "expected": 56639768 },
	        { "time": 131331, "born": 0, "died": 300800, "heap": 56338968, "expected": 56338968 },
	        { "time": 131691, "born": 27808, "died": 19368, "heap": 56347408, "expected": 56347408 },
	        { "time": 132046, "born": 368, "died": 1728, "heap": 56346048, "expected": 56346048 },
	        { "time": 132425, "born": 0, "died": 0, "heap": 56346048, "expected": 56346048 },
	        { "time": 132770, "born": 442672, "died": 152048, "heap": 56636672, "expected": 56636672 },
	        { "time": 133115, "born": 3360, "died": 192, "heap": 56639840, "expected": 56639840 },
	        { "time": 133464, "born": 0, "died": 0, "heap": 56639840, "expected": 56639840 },
	        { "time": 133812, "born": 0, "died": 300800, "heap": 56339040, "expected": 56339040 },
	        { "time": 134156, "born": 0, "died": 896, "heap": 56338144, "expected": 56338144 },
	        { "time": 134505, "born": 0, "died": 1632, "heap": 56336512, "expected": 56336512 },
	        { "time": 134851, "born": 0, "died": 0, "heap": 56336512, "expected": 56336512 },
	        { "time": 135196, "born": 459456, "died": 160016, "heap": 56635952, "expected": 56635952 },
	        { "time": 135542, "born": 3360, "died": 192, "heap": 56639120, "expected": 56639120 },
	        { "time": 135887, "born": 0, "died": 0, "heap": 56639120, "expected": 56639120 },
	        { "time": 136239, "born": 0, "died": 300800, "heap": 56338320, "expected": 56338320 },
	        { "time": 136586, "born": 27808, "died": 18672, "heap": 56347456, "expected": 56347456 },
	        { "time": 136932, "born": 368, "died": 1728, "heap": 56346096, "expected": 56346096 },
	        { "time": 137279, "born": 0, "died": 0, "heap": 56346096, "expected": 56346096 },
	        { "time": 137624, "born": 0, "died": 15664, "heap": 56330432, "expected": 56330432 },
	        { "time": 137975, "born": 459456, "died": 154016, "heap": 56635872, "expected": 56635872 },
	        { "time": 138333, "born": 3528, "died": 192, "heap": 56639208, "expected": 56639208 },
	        { "time": 138677, "born": 0, "died": 0, "heap": 56639208, "expected": 56639208 },
	        { "time": 139023, "born": 0, "died": 300800, "heap": 56338408, "expected": 56338408 },
	        { "time": 139370, "born": 0, "died": 896, "heap": 56337512, "expected": 56337512 },
	        { "time": 139715, "born": 0, "died": 1632, "heap": 56335880, "expected": 56335880 },
	        { "time": 140063, "born": 0, "died": 0, "heap": 56335880, "expected": 56335880 },
	        { "time": 140413, "born": 459456, "died": 159272, "heap": 56636064, "expected": 56636064 },
	        { "time": 140758, "born": 3360, "died": 192, "heap": 56639232, "expected": 56639232 },
	        { "time": 141105, "born": 0, "died": 0, "heap": 56639232, "expected": 56639232 },
	        { "time": 141457, "born": 14816, "died": 299864, "heap": 56354184, "expected": 56354184 },
	        { "time": 141802, "born": 800, "died": 896, "heap": 56354088, "expected": 56354088 },
	        { "time": 142151, "born": 0, "died": 1632, "heap": 56352456, "expected": 56352456 },
	        { "time": 142498, "born": 0, "died": 15392, "heap": 56337064, "expected": 56337064 },
	        { "time": 142843, "born": 459456, "died": 160432, "heap": 56636088, "expected": 56636088 },
	        { "time": 143204, "born": 3360, "died": 192, "heap": 56639256, "expected": 56639256 },
	        { "time": 143571, "born": 0, "died": 0, "heap": 56639256, "expected": 56639256 },
	        { "time": 143928, "born": 0, "died": 300800, "heap": 56338456, "expected": 56338456 },
	        { "time": 144292, "born": 0, "died": 896, "heap": 56337560, "expected": 56337560 },
	        { "time": 144650, "born": 0, "died": 1632, "heap": 56335928, "expected": 56335928 },
	        { "time": 145010, "born": 0, "died": 0, "heap": 56335928, "expected": 56335928 },
	        { "time": 145373, "born": 459456, "died": 159272, "heap": 56636112, "expected": 56636112 },
	        { "time": 145734, "born": 3360, "died": 192, "heap": 56639280, "expected": 56639280 },
	        { "time": 146097, "born": 0, "died": 0, "heap": 56639280, "expected": 56639280 },
	        { "time": 146448, "born": 45136, "died": 185752, "heap": 56498664, "expected": 56498664 },
	        { "time": 146796, "born": 2208, "died": 696, "heap": 56500176, "expected": 56500176 },
	        { "time": 147144, "born": 0, "died": 1632, "heap": 56498544, "expected": 56498544 },
	        { "time": 147490, "born": 0, "died": 158248, "heap": 56340296, "expected": 56340296 },
	        { "time": 147840, "born": 459488, "died": 163984, "heap": 56635800, "expected": 56635800 },
	        { "time": 148191, "born": 3528, "died": 192, "heap": 56639136, "expected": 56639136 },
	        { "time": 148539, "born": 0, "died": 0, "heap": 56639136, "expected": 56639136 },
	        { "time": 148887, "born": 0, "died": 300832, "heap": 56338304, "expected": 56338304 },
	        { "time": 149235, "born": 0, "died": 896, "heap": 56337408, "expected": 56337408 },
	        { "time": 149582, "born": 0, "died": 1632, "heap": 56335776, "expected": 56335776 },
	        { "time": 149929, "born": 0, "died": 0, "heap": 56335776, "expected": 56335776 },
	        { "time": 150275, "born": 459488, "died": 159272, "heap": 56635992, "expected": 56635992 },
	        { "time": 150625, "born": 3360, "died": 192, "heap": 56639160, "expected": 56639160 },
	        { "time": 150974, "born": 0, "died": 0, "heap": 56639160, "expected": 56639160 },
	        { "time": 151328, "born": 0, "died": 300832, "heap": 56338328, "expected": 56338328 },
	        { "time": 151678, "born": 27808, "died": 19128, "heap": 56347008, "expected": 56347008 },
	        { "time": 152023, "born": 368, "died": 1728, "heap": 56345648, "expected": 56345648 },
	        { "time": 152368, "born": 429648, "died": 212912, "heap": 56562384, "expected": 56562384 },
	        { "time": 152734, "born": 408976, "died": 143528, "heap": 56827832, "expected": 56827832 },
	        { "time": 153081, "born": 5904, "died": 2464, "heap": 56831272, "expected": 56831272 },
	        { "time": 153433, "born": 648, "died": 192936, "heap": 56638984, "expected": 56638984 },
	        { "time": 153782, "born": 0, "died": 294632, "heap": 56344352, "expected": 56344352 },
	        { "time": 154127, "born": 0, "died": 8552, "heap": 56335800, "expected": 56335800 },
	        { "time": 154476, "born": 0, "died": 1632, "heap": 56334168, "expected": 56334168 },
	        { "time": 154826, "born": 0, "died": 0, "heap": 56334168, "expected": 56334168 },
	        { "time": 155170, "born": 0, "died": 0, "heap": 56334168, "expected": 56334168 },
	        { "time": 155515, "born": 459488, "died": 162712, "heap": 56630944, "expected": 56630944 },
	        { "time": 155864, "born": 3360, "died": 192, "heap": 56634112, "expected": 56634112 },
	        { "time": 156211, "born": 0, "died": 0, "heap": 56634112, "expected": 56634112 },
	        { "time": 156562, "born": 14816, "died": 299896, "heap": 56349032, "expected": 56349032 },
	        { "time": 156921, "born": 800, "died": 896, "heap": 56348936, "expected": 56348936 },
	        { "time": 157269, "born": 0, "died": 1632, "heap": 56347304, "expected": 56347304 },
	        { "time": 157620, "born": 0, "died": 15392, "heap": 56331912, "expected": 56331912 },
	        { "time": 157969, "born": 459488, "died": 160600, "heap": 56630800, "expected": 56630800 },
	        { "time": 158330, "born": 3528, "died": 192, "heap": 56634136, "expected": 56634136 },
	        { "time": 158714, "born": 0, "died": 0, "heap": 56634136, "expected": 56634136 },
	        { "time": 159063, "born": 0, "died": 300832, "heap": 56333304, "expected": 56333304 },
	        { "time": 159411, "born": 0, "died": 896, "heap": 56332408, "expected": 56332408 },
	        { "time": 159758, "born": 0, "died": 1632, "heap": 56330776, "expected": 56330776 },
	        { "time": 160106, "born": 0, "died": 0, "heap": 56330776, "expected": 56330776 },
	        { "time": 160455, "born": 459488, "died": 159272, "heap": 56630992, "expected": 56630992 },
	        { "time": 160806, "born": 3360, "died": 192, "heap": 56634160, "expected": 56634160 },
	        { "time": 161161, "born": 0, "died": 0, "heap": 56634160, "expected": 56634160 },
	        { "time": 161508, "born": 14816, "died": 299896, "heap": 56349080, "expected": 56349080 },
	        { "time": 161854, "born": 800, "died": 896, "heap": 56348984, "expected": 56348984 },
	        { "time": 162202, "born": 0, "died": 1632, "heap": 56347352, "expected": 56347352 },
	        { "time": 162554, "born": 0, "died": 15392, "heap": 56331960, "expected": 56331960 },
	        { "time": 162917, "born": 459488, "died": 160432, "heap": 56631016, "expected": 56631016 },
	        { "time": 163280, "born": 3360, "died": 192, "heap": 56634184, "expected": 56634184 },
	        { "time": 163646, "born": 0, "died": 0, "heap": 56634184, "expected": 56634184 },
	        { "time": 164008, "born": 0, "died": 300832, "heap": 56333352, "expected": 56333352 },
	        { "time": 164371, "born": 0, "died": 896, "heap": 56332456, "expected": 56332456 },
	        { "time": 164736, "born": 0, "died": 1632, "heap": 56330824, "expected": 56330824 },
	        { "time": 165097, "born": 0, "died": 0, "heap": 56330824, "expected": 56330824 },
	        { "time": 165458, "born": 460016, "died": 159320, "heap": 56631520, "expected": 56631520 },
	        { "time": 165824, "born": 3360, "died": 192, "heap": 56634688, "expected": 56634688 },
	        { "time": 166188, "born": 0, "died": 0, "heap": 56634688, "expected": 56634688 },
	        { "time": 166553, "born": 14288, "died": 299848, "heap": 56349128, "expected": 56349128 },
	        { "time": 166917, "born": 800, "died": 896, "heap": 56349032, "expected": 56349032 },
	        { "time": 167261, "born": 0, "died": 1632, "heap": 56347400, "expected": 56347400 },
	        { "time": 167606, "born": 0, "died": 15392, "heap": 56332008, "expected": 56332008 },
	        { "time": 167953, "born": 459488, "died": 160600, "heap": 56630896, "expected": 56630896 },
	        { "time": 168304, "born": 3528, "died": 192, "heap": 56634232, "expected": 56634232 },
	        { "time": 168652, "born": 0, "died": 0, "heap": 56634232, "expected": 56634232 },
	        { "time": 168996, "born": 0, "died": 300832, "heap": 56333400, "expected": 56333400 },
	        { "time": 169344, "born": 0, "died": 896, "heap": 56332504, "expected": 56332504 },
	        { "time": 169688, "born": 0, "died": 1632, "heap": 56330872, "expected": 56330872 },
	        { "time": 170038, "born": 0, "died": 0, "heap": 56330872, "expected": 56330872 },
	        { "time": 170387, "born": 459488, "died": 159272, "heap": 56631088, "expected": 56631088 },
	        { "time": 170736, "born": 3360, "died": 192, "heap": 56634256, "expected": 56634256 },
	        { "time": 171084, "born": 0, "died": 0, "heap": 56634256, "expected": 56634256 },
	        { "time": 171433, "born": 14816, "died": 299896, "heap": 56349176, "expected": 56349176 },
	        { "time": 171780, "born": 800, "died": 896, "heap": 56349080, "expected": 56349080 },
	        { "time": 172126, "born": 0, "died": 1632, "heap": 56347448, "expected": 56347448 },
	        { "time": 172470, "born": 0, "died": 15392, "heap": 56332056, "expected": 56332056 },
	        { "time": 172823, "born": 457352, "died": 159312, "heap": 56630096, "expected": 56630096 },
	        { "time": 173179, "born": 8328, "died": 3744, "heap": 56634680, "expected": 56634680 },
	        { "time": 173543, "born": 632, "died": 0, "heap": 56635312, "expected": 56635312 },
	        { "time": 173903, "born": 0, "died": 293568, "heap": 56341744, "expected": 56341744 },
	        { "time": 174261, "born": 0, "died": 8160, "heap": 56333584, "expected": 56333584 },
	        { "time": 174627, "born": 0, "died": 1632, "heap": 56331952, "expected": 56331952 },
	        { "time": 174989, "born": 0, "died": 0, "heap": 56331952, "expected": 56331952 },
	        { "time": 175346, "born": 459488, "died": 160304, "heap": 56631136, "expected": 56631136 },
	        { "time": 175696, "born": 3360, "died": 192, "heap": 56634304, "expected": 56634304 },
	        { "time": 176040, "born": 0, "died": 0, "heap": 56634304, "expected": 56634304 },
	        { "time": 176394, "born": 0, "died": 300832, "heap": 56333472, "expected": 56333472 },
	        { "time": 176740, "born": 27808, "died": 18672, "heap": 56342608, "expected": 56342608 },
	        { "time": 177084, "born": 368, "died": 1728, "heap": 56341248, "expected": 56341248 },
	        { "time": 177432, "born": 0, "died": 0, "heap": 56341248, "expected": 56341248 },
	        { "time": 177781, "born": 0, "died": 15664, "heap": 56325584, "expected": 56325584 },
	        { "time": 178145, "born": 459488, "died": 154080, "heap": 56630992, "expected": 56630992 },
	        { "time": 178517, "born": 3528, "died": 192, "heap": 56634328, "expected": 56634328 },
	        { "time": 178884, "born": 0, "died": 0, "heap": 56634328, "expected": 56634328 },
	        { "time": 179239, "born": 0, "died": 300832, "heap": 56333496, "expected": 56333496 },
	        { "time": 179605, "born": 0, "died": 896, "heap": 56332600, "expected": 56332600 },
	        { "time": 179955, "born": 0, "died": 1632, "heap": 56330968, "expected": 56330968 },
	        { "time": 180327, "born": 0, "died": 0, "heap": 56330968, "expected": 56330968 },
	        { "time": 180689, "born": 459488, "died": 159272, "heap": 56631184, "expected": 56631184 },
	        { "time": 181048, "born": 3360, "died": 192, "heap": 56634352, "expected": 56634352 },
	        { "time": 181411, "born": 11248, "died": 6272, "heap": 56639328, "expected": 56639328 },
	        { "time": 181771, "born": 12416, "died": 299272, "heap": 56352472, "expected": 56352472 },
	        { "time": 182136, "born": 848, "died": 896, "heap": 56352424, "expected": 56352424 },
	        { "time": 182500, "born": 0, "died": 4136, "heap": 56348288, "expected": 56348288 },
	        { "time": 182872, "born": 441408, "died": 155896, "heap": 56633800, "expected": 56633800 },
	        { "time": 183233, "born": 3120, "died": 192, "heap": 56636728, "expected": 56636728 },
	        { "time": 183592, "born": 0, "died": 0, "heap": 56636728, "expected": 56636728 },
	        { "time": 183946, "born": 0, "died": 300832, "heap": 56335896, "expected": 56335896 },
	        { "time": 184298, "born": 0, "died": 896, "heap": 56335000, "expected": 56335000 },
	        { "time": 184650, "born": 0, "died": 1632, "heap": 56333368, "expected": 56333368 },
	        { "time": 184997, "born": 0, "died": 0, "heap": 56333368, "expected": 56333368 },
	        { "time": 185356, "born": 457352, "died": 159760, "heap": 56630960, "expected": 56630960 },
	        { "time": 185722, "born": 8328, "died": 3744, "heap": 56635544, "expected": 56635544 },
	        { "time": 186117, "born": 632, "died": 0, "heap": 56636176, "expected": 56636176 },
	        { "time": 186476, "born": 14816, "died": 301432, "heap": 56349560, "expected": 56349560 },
	        { "time": 186834, "born": 800, "died": 896, "heap": 56349464, "expected": 56349464 },
	        { "time": 187197, "born": 0, "died": 1632, "heap": 56347832, "expected": 56347832 },
	        { "time": 187557, "born": 0, "died": 15392, "heap": 56332440, "expected": 56332440 },
	        { "time": 187925, "born": 459488, "died": 160840, "heap": 56631088, "expected": 56631088 },
	        { "time": 188279, "born": 3528, "died": 192, "heap": 56634424, "expected": 56634424 },
	        { "time": 188631, "born": 0, "died": 0, "heap": 56634424, "expected": 56634424 },
	        { "time": 188985, "born": 0, "died": 300832, "heap": 56333592, "expected": 56333592 },
	        { "time": 189360, "born": 0, "died": 896, "heap": 56332696, "expected": 56332696 },
	        { "time": 189712, "born": 0, "died": 1632, "heap": 56331064, "expected": 56331064 },
	        { "time": 190076, "born": 0, "died": 0, "heap": 56331064, "expected": 56331064 },
	        { "time": 190428, "born": 459488, "died": 159272, "heap": 56631280, "expected": 56631280 },
	        { "time": 190784, "born": 3360, "died": 192, "heap": 56634448, "expected": 56634448 },
	        { "time": 191143, "born": 0, "died": 0, "heap": 56634448, "expected": 56634448 },
	        { "time": 191506, "born": 14816, "died": 299896, "heap": 56349368, "expected": 56349368 },
	        { "time": 191863, "born": 800, "died": 896, "heap": 56349272, "expected": 56349272 },
	        { "time": 192216, "born": 0, "died": 1632, "heap": 56347640, "expected": 56347640 },
	        { "time": 192572, "born": 0, "died": 15392, "heap": 56332248, "expected": 56332248 },
	        { "time": 192927, "born": 459488, "died": 160432, "heap": 56631304, "expected": 56631304 },
	        { "time": 193277, "born": 3360, "died": 192, "heap": 56634472, "expected": 56634472 },
	        { "time": 193630, "born": 0, "died": 0, "heap": 56634472, "expected": 56634472 },
	        { "time": 193988, "born": 0, "died": 300832, "heap": 56333640, "expected": 56333640 },
	        { "time": 194348, "born": 743624, "died": 264008, "heap": 56813256, "expected": 56813256 },
	        { "time": 194702, "born": 16280, "died": 680, "heap": 56828856, "expected": 56828856 },
	        { "time": 195058, "born": 785840, "died": 376136, "heap": 57238560, "expected": 57238560 },
	        { "time": 195418, "born": 30568, "died": 158792, "heap": 57110336, "expected": 57110336 },
	        { "time": 195772, "born": 5587976, "died": 2812328, "heap": 59885984, "expected": 59885984 },
	        { "time": 196134, "born": 3518136, "died": 3268784, "heap": 60135336, "expected": 60135336 },
	        { "time": 196527, "born": 447576, "died": 1109600, "heap": 59473312, "expected": 59473312 },
	        { "time": 196884, "born": 12696, "died": 620784, "heap": 58865224, "expected": 58865224 },
	        { "time": 197255, "born": 0, "died": 268360, "heap": 58596864, "expected": 58596864 },
	        { "time": 197621, "born": 0, "died": 1263640, "heap": 57333224, "expected": 57333224 },
	        { "time": 197986, "born": 0, "died": 11056, "heap": 57322168, "expected": 57322168 },
	        { "time": 198349, "born": 0, "died": 1632, "heap": 57320536, "expected": 57320536 },
	        { "time": 198705, "born": 0, "died": 0, "heap": 57320536, "expected": 57320536 },
	        { "time": 199059, "born": 13048, "died": 8976, "heap": 57324608, "expected": 57324608 },
	        { "time": 199420, "born": 296, "died": 24, "heap": 57324880, "expected": 57324880 },
	        { "time": 199776, "born": 0, "died": 0, "heap": 57324880, "expected": 57324880 },
	        { "time": 200150, "born": 0, "died": 7264, "heap": 57317616, "expected": 57317616 },
	        { "time": 200509, "born": 460328, "died": 183192, "heap": 57594752, "expected": 57594752 },
	        { "time": 200875, "born": 3392, "died": 192, "heap": 57597952, "expected": 57597952 },
	        { "time": 201238, "born": 0, "died": 0, "heap": 57597952, "expected": 57597952 },
	        { "time": 201582, "born": 14816, "died": 301704, "heap": 57311064, "expected": 57311064 },
	        { "time": 201933, "born": 800, "died": 896, "heap": 57310968, "expected": 57310968 },
	        { "time": 202312, "born": 0, "died": 1632, "heap": 57309336, "expected": 57309336 },
	        { "time": 202676, "born": 0, "died": 15392, "heap": 57293944, "expected": 57293944 },
	        { "time": 203029, "born": 460328, "died": 160720, "heap": 57593552, "expected": 57593552 },
	        { "time": 203434, "born": 3360, "died": 192, "heap": 57596720, "expected": 57596720 },
	        { "time": 203797, "born": 72208, "died": 53528, "heap": 57615400, "expected": 57615400 },
	        { "time": 204156, "born": 3552, "died": 808, "heap": 57618144, "expected": 57618144 },
	        { "time": 204527, "born": 0, "died": 0, "heap": 57618144, "expected": 57618144 }
	    ] };
	var website_log6 = { "data": [
	        { "time": 0, "born": 0, "died": 0, "heap": 0, "expected": 0 },
	        { "time": 1101, "born": 6977240, "died": 2663568, "heap": 4313672, "expected": 4313672 },
	        { "time": 1419, "born": 123640, "died": 33200, "heap": 4404112, "expected": 4404112 },
	        { "time": 1815, "born": 4917920, "died": 5008224, "heap": 4313808, "expected": 4313808 },
	        { "time": 2133, "born": 2536, "died": 79144, "heap": 4237200, "expected": 4237200 },
	        { "time": 2453, "born": 0, "died": 536, "heap": 4236664, "expected": 4236664 },
	        { "time": 3433, "born": 26464768, "died": 10238776, "heap": 20462656, "expected": 20462656 },
	        { "time": 5111, "born": 36666792, "died": 18038936, "heap": 39090512, "expected": 39090512 },
	        { "time": 5993, "born": 7087008, "died": 3518256, "heap": 42659264, "expected": 42659264 },
	        { "time": 6400, "born": 639104, "died": 3668688, "heap": 39629680, "expected": 39629680 },
	        { "time": 6820, "born": 0, "died": 3690648, "heap": 35939032, "expected": 35939032 },
	        { "time": 7269, "born": 0, "died": 2615552, "heap": 33323480, "expected": 33323480 },
	        { "time": 7645, "born": 0, "died": 139440, "heap": 33184040, "expected": 33184040 },
	        { "time": 8024, "born": 0, "died": 160, "heap": 33183880, "expected": 33183880 },
	        { "time": 8755, "born": 8822024, "died": 1844800, "heap": 40161104, "expected": 40161104 },
	        { "time": 9633, "born": 33074928, "died": 19672840, "heap": 53563192, "expected": 53563192 },
	        { "time": 10104, "born": 726360, "died": 1590056, "heap": 52699496, "expected": 52699496 },
	        { "time": 10519, "born": 197520, "died": 1587952, "heap": 51309064, "expected": 51309064 },
	        { "time": 10940, "born": 16944, "died": 3232512, "heap": 48093496, "expected": 48093496 },
	        { "time": 11384, "born": 358240, "died": 475928, "heap": 47975808, "expected": 47975808 },
	        { "time": 11787, "born": 198128, "died": 129608, "heap": 48044328, "expected": 48044328 },
	        { "time": 12215, "born": 138032, "died": 97640, "heap": 48084720, "expected": 48084720 },
	        { "time": 12612, "born": 305240, "died": 103064, "heap": 48286896, "expected": 48286896 },
	        { "time": 13017, "born": 14840, "died": 153464, "heap": 48148272, "expected": 48148272 },
	        { "time": 13415, "born": 118048, "died": 286048, "heap": 47980272, "expected": 47980272 },
	        { "time": 13827, "born": 5096, "died": 163072, "heap": 47822296, "expected": 47822296 },
	        { "time": 14250, "born": 0, "died": 1904, "heap": 47820392, "expected": 47820392 },
	        { "time": 14650, "born": 0, "died": 103176, "heap": 47717216, "expected": 47717216 },
	        { "time": 15094, "born": 0, "died": 2032, "heap": 47715184, "expected": 47715184 },
	        { "time": 15521, "born": 0, "died": 0, "heap": 47715184, "expected": 47715184 },
	        { "time": 15916, "born": 0, "died": 0, "heap": 47715184, "expected": 47715184 },
	        { "time": 16319, "born": 0, "died": 0, "heap": 47715184, "expected": 47715184 },
	        { "time": 16711, "born": 0, "died": 0, "heap": 47715184, "expected": 47715184 },
	        { "time": 17115, "born": 0, "died": 0, "heap": 47715184, "expected": 47715184 },
	        { "time": 17525, "born": 0, "died": 0, "heap": 47715184, "expected": 47715184 },
	        { "time": 17921, "born": 0, "died": 0, "heap": 47715184, "expected": 47715184 },
	        { "time": 18310, "born": 0, "died": 0, "heap": 47715184, "expected": 47715184 },
	        { "time": 18709, "born": 46640, "died": 20704, "heap": 47741120, "expected": 47741120 },
	        { "time": 19170, "born": 1080, "died": 2016, "heap": 47740184, "expected": 47740184 },
	        { "time": 19571, "born": 403664, "died": 193632, "heap": 47950216, "expected": 47950216 },
	        { "time": 19968, "born": 304400, "died": 198416, "heap": 48056200, "expected": 48056200 },
	        { "time": 20398, "born": 11832, "died": 26112, "heap": 48041920, "expected": 48041920 },
	        { "time": 21156, "born": 36153952, "died": 23044608, "heap": 61151264, "expected": 61151264 },
	        { "time": 21612, "born": 23972432, "died": 18471048, "heap": 66652648, "expected": 66652648 },
	        { "time": 22017, "born": 72936, "died": 4975152, "heap": 61750432, "expected": 61750432 },
	        { "time": 22512, "born": 2120, "died": 189352, "heap": 61563200, "expected": 61563200 },
	        { "time": 22925, "born": 0, "died": 253248, "heap": 61309952, "expected": 61309952 },
	        { "time": 23326, "born": 161008, "died": 174752, "heap": 61296208, "expected": 61296208 },
	        { "time": 23730, "born": 7776, "died": 1216, "heap": 61302768, "expected": 61302768 },
	        { "time": 24131, "born": 0, "died": 0, "heap": 61302768, "expected": 61302768 },
	        { "time": 24534, "born": 0, "died": 100136, "heap": 61202632, "expected": 61202632 },
	        { "time": 24945, "born": 0, "died": 320, "heap": 61202312, "expected": 61202312 },
	        { "time": 25350, "born": 0, "died": 0, "heap": 61202312, "expected": 61202312 },
	        { "time": 25753, "born": 0, "died": 0, "heap": 61202312, "expected": 61202312 },
	        { "time": 26155, "born": 0, "died": 0, "heap": 61202312, "expected": 61202312 },
	        { "time": 26560, "born": 400688, "died": 179608, "heap": 61423392, "expected": 61423392 },
	        { "time": 26986, "born": 230616, "died": 33392, "heap": 61620616, "expected": 61620616 },
	        { "time": 27400, "born": 77040, "died": 122912, "heap": 61574744, "expected": 61574744 },
	        { "time": 27802, "born": 160, "died": 147144, "heap": 61427760, "expected": 61427760 },
	        { "time": 28228, "born": 0, "died": 88768, "heap": 61338992, "expected": 61338992 },
	        { "time": 28655, "born": 0, "died": 130192, "heap": 61208800, "expected": 61208800 },
	        { "time": 29089, "born": 0, "died": 1256, "heap": 61207544, "expected": 61207544 },
	        { "time": 29491, "born": 53352, "died": 22664, "heap": 61238232, "expected": 61238232 },
	        { "time": 29916, "born": 600, "died": 0, "heap": 61238832, "expected": 61238832 },
	        { "time": 30326, "born": 0, "died": 0, "heap": 61238832, "expected": 61238832 },
	        { "time": 30735, "born": 323776, "died": 167584, "heap": 61395024, "expected": 61395024 },
	        { "time": 31212, "born": 135632, "died": 12744, "heap": 61517912, "expected": 61517912 },
	        { "time": 31626, "born": 1936, "died": 58144, "heap": 61461704, "expected": 61461704 },
	        { "time": 32056, "born": 0, "died": 153128, "heap": 61308576, "expected": 61308576 },
	        { "time": 32480, "born": 0, "died": 64112, "heap": 61244464, "expected": 61244464 },
	        { "time": 32886, "born": 1376, "died": 44464, "heap": 61201376, "expected": 61201376 },
	        { "time": 33310, "born": 165976, "died": 3792, "heap": 61363560, "expected": 61363560 },
	        { "time": 33746, "born": 0, "died": 29480, "heap": 61334080, "expected": 61334080 },
	        { "time": 34151, "born": 0, "died": 84552, "heap": 61249528, "expected": 61249528 },
	        { "time": 34568, "born": 0, "died": 23768, "heap": 61225760, "expected": 61225760 },
	        { "time": 34975, "born": 0, "died": 10968, "heap": 61214792, "expected": 61214792 },
	        { "time": 35586, "born": 22089672, "died": 13776784, "heap": 69527680, "expected": 69527680 },
	        { "time": 36002, "born": 2403768, "died": 2683592, "heap": 69247856, "expected": 69247856 },
	        { "time": 36413, "born": 9136, "died": 3168232, "heap": 66088760, "expected": 66088760 },
	        { "time": 36829, "born": 0, "died": 51456, "heap": 66037304, "expected": 66037304 },
	        { "time": 37239, "born": 0, "died": 272008, "heap": 65765296, "expected": 65765296 },
	        { "time": 37661, "born": 0, "died": 3256, "heap": 65762040, "expected": 65762040 },
	        { "time": 38069, "born": 0, "died": 0, "heap": 65762040, "expected": 65762040 },
	        { "time": 38507, "born": 0, "died": 0, "heap": 65762040, "expected": 65762040 },
	        { "time": 38910, "born": 463696, "died": 175304, "heap": 66050432, "expected": 66050432 },
	        { "time": 39312, "born": 5176, "died": 712, "heap": 66054896, "expected": 66054896 },
	        { "time": 39714, "born": 0, "died": 0, "heap": 66054896, "expected": 66054896 },
	        { "time": 40125, "born": 0, "died": 276344, "heap": 65778552, "expected": 65778552 },
	        { "time": 40524, "born": 0, "died": 3448, "heap": 65775104, "expected": 65775104 },
	        { "time": 40964, "born": 0, "died": 0, "heap": 65775104, "expected": 65775104 },
	        { "time": 41369, "born": 0, "died": 0, "heap": 65775104, "expected": 65775104 },
	        { "time": 41817, "born": 0, "died": 0, "heap": 65775104, "expected": 65775104 },
	        { "time": 42221, "born": 0, "died": 0, "heap": 65775104, "expected": 65775104 },
	        { "time": 42645, "born": 0, "died": 0, "heap": 65775104, "expected": 65775104 },
	        { "time": 43050, "born": 0, "died": 0, "heap": 65775104, "expected": 65775104 },
	        { "time": 43456, "born": 0, "died": 0, "heap": 65775104, "expected": 65775104 },
	        { "time": 43910, "born": 6746192, "died": 8792, "heap": 72512504, "expected": 72512504 },
	        { "time": 44334, "born": 19111416, "died": 16618344, "heap": 75005576, "expected": 75005576 },
	        { "time": 44759, "born": 231040, "died": 4040280, "heap": 71196336, "expected": 71196336 },
	        { "time": 45184, "born": 0, "died": 23112, "heap": 71173224, "expected": 71173224 },
	        { "time": 45593, "born": 0, "died": 299416, "heap": 70873808, "expected": 70873808 },
	        { "time": 46007, "born": 0, "died": 3256, "heap": 70870552, "expected": 70870552 },
	        { "time": 46418, "born": 0, "died": 0, "heap": 70870552, "expected": 70870552 },
	        { "time": 46870, "born": 0, "died": 0, "heap": 70870552, "expected": 70870552 },
	        { "time": 47315, "born": 0, "died": 0, "heap": 70870552, "expected": 70870552 },
	        { "time": 47764, "born": 0, "died": 0, "heap": 70870552, "expected": 70870552 },
	        { "time": 48204, "born": 0, "died": 0, "heap": 70870552, "expected": 70870552 },
	        { "time": 48626, "born": 0, "died": 0, "heap": 70870552, "expected": 70870552 },
	        { "time": 49050, "born": 0, "died": 0, "heap": 70870552, "expected": 70870552 },
	        { "time": 49514, "born": 22369432, "died": 13524600, "heap": 79715384, "expected": 79715384 },
	        { "time": 49936, "born": 172408, "died": 4299920, "heap": 75587872, "expected": 75587872 },
	        { "time": 50356, "born": 0, "died": 112, "heap": 75587760, "expected": 75587760 },
	        { "time": 50775, "born": 0, "died": 318664, "heap": 75269096, "expected": 75269096 },
	        { "time": 51197, "born": 0, "died": 6424, "heap": 75262672, "expected": 75262672 },
	        { "time": 51612, "born": 0, "died": 0, "heap": 75262672, "expected": 75262672 },
	        { "time": 52033, "born": 0, "died": 0, "heap": 75262672, "expected": 75262672 },
	        { "time": 52585, "born": 18135872, "died": 11023912, "heap": 82374632, "expected": 82374632 },
	        { "time": 53023, "born": 70072, "died": 2508528, "heap": 79936176, "expected": 79936176 },
	        { "time": 53454, "born": 0, "died": 112, "heap": 79936064, "expected": 79936064 },
	        { "time": 53890, "born": 384120, "died": 488552, "heap": 79831632, "expected": 79831632 },
	        { "time": 54403, "born": 302400, "died": 152312, "heap": 79981720, "expected": 79981720 },
	        { "time": 54837, "born": 912, "died": 2816, "heap": 79979816, "expected": 79979816 },
	        { "time": 55265, "born": 0, "died": 146856, "heap": 79832960, "expected": 79832960 },
	        { "time": 55727, "born": 3838608, "died": 223792, "heap": 83447776, "expected": 83447776 },
	        { "time": 56160, "born": 14161832, "died": 10882464, "heap": 86727144, "expected": 86727144 },
	        { "time": 56603, "born": 24728, "died": 2492488, "heap": 84259384, "expected": 84259384 },
	        { "time": 57048, "born": 0, "died": 23640, "heap": 84235744, "expected": 84235744 },
	        { "time": 57502, "born": 0, "died": 297464, "heap": 83938280, "expected": 83938280 },
	        { "time": 57937, "born": 0, "died": 3256, "heap": 83935024, "expected": 83935024 },
	        { "time": 58424, "born": 0, "died": 0, "heap": 83935024, "expected": 83935024 },
	        { "time": 58861, "born": 47008, "died": 34584, "heap": 83947448, "expected": 83947448 },
	        { "time": 59303, "born": 49424, "died": 26984, "heap": 83969888, "expected": 83969888 },
	        { "time": 59740, "born": 808, "died": 1168, "heap": 83969528, "expected": 83969528 },
	        { "time": 60176, "born": 0, "died": 15248, "heap": 83954280, "expected": 83954280 },
	        { "time": 60612, "born": 0, "died": 10312, "heap": 83943968, "expected": 83943968 },
	        { "time": 61050, "born": 0, "died": 13184, "heap": 83930784, "expected": 83930784 },
	        { "time": 61490, "born": 0, "died": 112, "heap": 83930672, "expected": 83930672 },
	        { "time": 61944, "born": 325384, "died": 125960, "heap": 84130096, "expected": 84130096 },
	        { "time": 62452, "born": 690648, "died": 222000, "heap": 84598744, "expected": 84598744 },
	        { "time": 62932, "born": 283800, "died": 281280, "heap": 84601264, "expected": 84601264 },
	        { "time": 63363, "born": 2064, "died": 5656, "heap": 84597672, "expected": 84597672 },
	        { "time": 63800, "born": 5168, "died": 199424, "heap": 84403416, "expected": 84403416 },
	        { "time": 64262, "born": 8663472, "died": 467704, "heap": 92599184, "expected": 92599184 },
	        { "time": 64749, "born": 16639992, "died": 16798256, "heap": 92440920, "expected": 92440920 },
	        { "time": 65242, "born": 10088, "died": 3983840, "heap": 88467168, "expected": 88467168 },
	        { "time": 65765, "born": 0, "died": 21096, "heap": 88446072, "expected": 88446072 },
	        { "time": 66210, "born": 182864, "died": 294384, "heap": 88334552, "expected": 88334552 },
	        { "time": 66661, "born": 10064, "died": 3056, "heap": 88341560, "expected": 88341560 },
	        { "time": 67100, "born": 117928, "died": 101184, "heap": 88358304, "expected": 88358304 },
	        { "time": 67552, "born": 3496, "died": 89128, "heap": 88272672, "expected": 88272672 },
	        { "time": 67989, "born": 0, "died": 2488, "heap": 88270184, "expected": 88270184 },
	        { "time": 68501, "born": 35208, "died": 105160, "heap": 88200232, "expected": 88200232 },
	        { "time": 69031, "born": 81336, "died": 44032, "heap": 88237536, "expected": 88237536 },
	        { "time": 69491, "born": 3706992, "died": 1875136, "heap": 90069392, "expected": 90069392 },
	        { "time": 70049, "born": 16533984, "died": 9806192, "heap": 96797184, "expected": 96797184 },
	        { "time": 70524, "born": 2848, "died": 131096, "heap": 96668936, "expected": 96668936 },
	        { "time": 70992, "born": 400, "died": 182984, "heap": 96486352, "expected": 96486352 },
	        { "time": 71462, "born": 0, "died": 232832, "heap": 96253520, "expected": 96253520 },
	        { "time": 71927, "born": 0, "died": 19448, "heap": 96234072, "expected": 96234072 },
	        { "time": 72394, "born": 0, "died": 0, "heap": 96234072, "expected": 96234072 },
	        { "time": 72858, "born": 0, "died": 0, "heap": 96234072, "expected": 96234072 },
	        { "time": 73366, "born": 24784784, "died": 16377960, "heap": 104640896, "expected": 104640896 },
	        { "time": 73847, "born": 165960, "died": 3911152, "heap": 100895704, "expected": 100895704 },
	        { "time": 74327, "born": 0, "died": 0, "heap": 100895704, "expected": 100895704 },
	        { "time": 74800, "born": 0, "died": 317696, "heap": 100578008, "expected": 100578008 },
	        { "time": 75273, "born": 51280, "died": 40664, "heap": 100588624, "expected": 100588624 },
	        { "time": 75747, "born": 96, "died": 0, "heap": 100588720, "expected": 100588720 },
	        { "time": 76225, "born": 0, "died": 0, "heap": 100588720, "expected": 100588720 },
	        { "time": 76691, "born": 0, "died": 16864, "heap": 100571856, "expected": 100571856 },
	        { "time": 77166, "born": 0, "died": 80, "heap": 100571776, "expected": 100571776 },
	        { "time": 77659, "born": 0, "died": 0, "heap": 100571776, "expected": 100571776 },
	        { "time": 78163, "born": 0, "died": 0, "heap": 100571776, "expected": 100571776 },
	        { "time": 78638, "born": 0, "died": 0, "heap": 100571776, "expected": 100571776 },
	        { "time": 79142, "born": 402176, "died": 188520, "heap": 100785432, "expected": 100785432 },
	        { "time": 80088, "born": 68730936, "died": 64614328, "heap": 104902040, "expected": 104902040 },
	        { "time": 80620, "born": 0, "died": 3129672, "heap": 101772368, "expected": 101772368 },
	        { "time": 81190, "born": 38997416, "died": 12101536, "heap": 128668248, "expected": 128668248 },
	        { "time": 81669, "born": 89032, "died": 22705696, "heap": 106051584, "expected": 106051584 },
	        { "time": 82136, "born": 2048, "died": 5208, "heap": 106048424, "expected": 106048424 },
	        { "time": 82647, "born": 0, "died": 32376, "heap": 106016048, "expected": 106016048 },
	        { "time": 83160, "born": 0, "died": 83256, "heap": 105932792, "expected": 105932792 },
	        { "time": 83636, "born": 0, "died": 616, "heap": 105932176, "expected": 105932176 },
	        { "time": 84101, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 84601, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 85063, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 85546, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 86014, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 86483, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 86948, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 87422, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 87884, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 88355, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 88831, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 89325, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 89787, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 90253, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 90715, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 91201, "born": 0, "died": 0, "heap": 105932176, "expected": 105932176 },
	        { "time": 91682, "born": 404304, "died": 42192, "heap": 106294288, "expected": 106294288 },
	        { "time": 92149, "born": 4152, "died": 142432, "heap": 106156008, "expected": 106156008 },
	        { "time": 92609, "born": 300432, "died": 151592, "heap": 106304848, "expected": 106304848 },
	        { "time": 93087, "born": 672, "died": 128608, "heap": 106176912, "expected": 106176912 },
	        { "time": 93604, "born": 151016, "died": 47736, "heap": 106280192, "expected": 106280192 },
	        { "time": 94123, "born": 0, "died": 297856, "heap": 105982336, "expected": 105982336 },
	        { "time": 94592, "born": 0, "died": 1760, "heap": 105980576, "expected": 105980576 },
	        { "time": 95064, "born": 0, "died": 33232, "heap": 105947344, "expected": 105947344 },
	        { "time": 95529, "born": 52768, "died": 29688, "heap": 105970424, "expected": 105970424 },
	        { "time": 96047, "born": 760, "died": 0, "heap": 105971184, "expected": 105971184 },
	        { "time": 96519, "born": 0, "died": 0, "heap": 105971184, "expected": 105971184 },
	        { "time": 96992, "born": 0, "died": 23440, "heap": 105947744, "expected": 105947744 },
	        { "time": 97499, "born": 0, "died": 168, "heap": 105947576, "expected": 105947576 },
	        { "time": 97973, "born": 0, "died": 0, "heap": 105947576, "expected": 105947576 },
	        { "time": 98491, "born": 0, "died": 0, "heap": 105947576, "expected": 105947576 },
	        { "time": 98981, "born": 27888, "died": 9568, "heap": 105965896, "expected": 105965896 },
	        { "time": 99506, "born": 32, "died": 0, "heap": 105965928, "expected": 105965928 },
	        { "time": 100050, "born": 0, "died": 0, "heap": 105965928, "expected": 105965928 },
	        { "time": 100529, "born": 0, "died": 19976, "heap": 105945952, "expected": 105945952 },
	        { "time": 101013, "born": 0, "died": 112, "heap": 105945840, "expected": 105945840 },
	        { "time": 101508, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 102005, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 102481, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 102963, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 103445, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 103927, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 104419, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 104895, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 105372, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 105851, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 106345, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 106829, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 107308, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 107786, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 108278, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 108748, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 109211, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 109681, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 110152, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 110618, "born": 0, "died": 0, "heap": 105945840, "expected": 105945840 },
	        { "time": 111081, "born": 346032, "died": 129040, "heap": 106162832, "expected": 106162832 },
	        { "time": 111541, "born": 125000, "died": 70648, "heap": 106217184, "expected": 106217184 },
	        { "time": 112024, "born": 1896, "died": 224, "heap": 106218856, "expected": 106218856 },
	        { "time": 112491, "born": 0, "died": 161864, "heap": 106056992, "expected": 106056992 },
	        { "time": 112959, "born": 0, "died": 102016, "heap": 105954976, "expected": 105954976 },
	        { "time": 113437, "born": 436880, "died": 198616, "heap": 106193240, "expected": 106193240 },
	        { "time": 113912, "born": 302600, "died": 145240, "heap": 106350600, "expected": 106350600 },
	        { "time": 114398, "born": 512, "died": 6672, "heap": 106344440, "expected": 106344440 },
	        { "time": 114866, "born": 0, "died": 146904, "heap": 106197536, "expected": 106197536 },
	        { "time": 115339, "born": 0, "died": 190344, "heap": 106007192, "expected": 106007192 },
	        { "time": 115851, "born": 0, "died": 28256, "heap": 105978936, "expected": 105978936 },
	        { "time": 116369, "born": 0, "died": 168, "heap": 105978768, "expected": 105978768 },
	        { "time": 116868, "born": 0, "died": 0, "heap": 105978768, "expected": 105978768 },
	        { "time": 117390, "born": 0, "died": 0, "heap": 105978768, "expected": 105978768 },
	        { "time": 117886, "born": 0, "died": 0, "heap": 105978768, "expected": 105978768 },
	        { "time": 118396, "born": 0, "died": 0, "heap": 105978768, "expected": 105978768 },
	        { "time": 118875, "born": 0, "died": 0, "heap": 105978768, "expected": 105978768 },
	        { "time": 119345, "born": 0, "died": 0, "heap": 105978768, "expected": 105978768 },
	        { "time": 119830, "born": 0, "died": 0, "heap": 105978768, "expected": 105978768 },
	        { "time": 120295, "born": 0, "died": 0, "heap": 105978768, "expected": 105978768 },
	        { "time": 120763, "born": 64248, "died": 41664, "heap": 106001352, "expected": 106001352 },
	        { "time": 121229, "born": 504, "died": 48, "heap": 106001808, "expected": 106001808 },
	        { "time": 121689, "born": 0, "died": 0, "heap": 106001808, "expected": 106001808 },
	        { "time": 122156, "born": 0, "died": 31072, "heap": 105970736, "expected": 105970736 },
	        { "time": 122623, "born": 0, "died": 0, "heap": 105970736, "expected": 105970736 },
	        { "time": 123163, "born": 0, "died": 0, "heap": 105970736, "expected": 105970736 },
	        { "time": 123628, "born": 0, "died": 0, "heap": 105970736, "expected": 105970736 },
	        { "time": 124121, "born": 17768, "died": 1096, "heap": 105987408, "expected": 105987408 },
	        { "time": 124580, "born": 32, "died": 5168, "heap": 105982272, "expected": 105982272 },
	        { "time": 125056, "born": 0, "died": 0, "heap": 105982272, "expected": 105982272 },
	        { "time": 125516, "born": 0, "died": 11536, "heap": 105970736, "expected": 105970736 },
	        { "time": 125994, "born": 27344, "died": 976, "heap": 105997104, "expected": 105997104 },
	        { "time": 126465, "born": 424, "died": 15856, "heap": 105981672, "expected": 105981672 },
	        { "time": 126937, "born": 0, "died": 0, "heap": 105981672, "expected": 105981672 },
	        { "time": 127423, "born": 0, "died": 9928, "heap": 105971744, "expected": 105971744 },
	        { "time": 127895, "born": 0, "died": 112, "heap": 105971632, "expected": 105971632 },
	        { "time": 128378, "born": 0, "died": 0, "heap": 105971632, "expected": 105971632 },
	        { "time": 128589, "born": 6008, "died": 8245032, "heap": 97732608, "expected": 97732608 },
	        { "time": 128852, "born": 31560, "died": 140504, "heap": 97623664, "expected": 97623664 },
	        { "time": 129346, "born": 32, "died": 5856, "heap": 97617840, "expected": 97617840 },
	        { "time": 129856, "born": 0, "died": 1568, "heap": 97616272, "expected": 97616272 },
	        { "time": 130320, "born": 0, "died": 22280, "heap": 97593992, "expected": 97593992 },
	        { "time": 130823, "born": 0, "died": 424, "heap": 97593568, "expected": 97593568 },
	        { "time": 131288, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 131757, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 132208, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 132694, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 133147, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 133608, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 134076, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 134533, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 134982, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 135462, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 135910, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 136427, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 136893, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 137353, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 137805, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 138264, "born": 0, "died": 0, "heap": 97593568, "expected": 97593568 },
	        { "time": 138714, "born": 53248, "died": 19920, "heap": 97626896, "expected": 97626896 },
	        { "time": 139171, "born": 792, "died": 0, "heap": 97627688, "expected": 97627688 },
	        { "time": 139625, "born": 0, "died": 0, "heap": 97627688, "expected": 97627688 },
	        { "time": 140080, "born": 0, "died": 23440, "heap": 97604248, "expected": 97604248 },
	        { "time": 140577, "born": 0, "died": 168, "heap": 97604080, "expected": 97604080 },
	        { "time": 141044, "born": 0, "died": 0, "heap": 97604080, "expected": 97604080 },
	        { "time": 141500, "born": 0, "died": 0, "heap": 97604080, "expected": 97604080 },
	        { "time": 141960, "born": 0, "died": 0, "heap": 97604080, "expected": 97604080 },
	        { "time": 142432, "born": 404656, "died": 133528, "heap": 97875208, "expected": 97875208 },
	        { "time": 142896, "born": 299096, "died": 112032, "heap": 98062272, "expected": 98062272 },
	        { "time": 143367, "born": 1912, "died": 15952, "heap": 98048232, "expected": 98048232 },
	        { "time": 143824, "born": 0, "died": 148496, "heap": 97899736, "expected": 97899736 },
	        { "time": 144270, "born": 0, "died": 180792, "heap": 97718944, "expected": 97718944 },
	        { "time": 144731, "born": 0, "died": 37640, "heap": 97681304, "expected": 97681304 },
	        { "time": 145185, "born": 0, "died": 168, "heap": 97681136, "expected": 97681136 },
	        { "time": 145646, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 146099, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 146562, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 147061, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 147520, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 147969, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 148425, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 148878, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 149359, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 149813, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 150272, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 150722, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 151180, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 151635, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 152095, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 152579, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 153047, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 153544, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 154011, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 154509, "born": 0, "died": 0, "heap": 97681136, "expected": 97681136 },
	        { "time": 155016, "born": 37280, "died": 16856, "heap": 97701560, "expected": 97701560 },
	        { "time": 155520, "born": 424, "died": 0, "heap": 97701984, "expected": 97701984 },
	        { "time": 155997, "born": 0, "died": 0, "heap": 97701984, "expected": 97701984 },
	        { "time": 156498, "born": 0, "died": 17936, "heap": 97684048, "expected": 97684048 },
	        { "time": 156978, "born": 0, "died": 112, "heap": 97683936, "expected": 97683936 },
	        { "time": 157480, "born": 0, "died": 0, "heap": 97683936, "expected": 97683936 },
	        { "time": 157951, "born": 0, "died": 0, "heap": 97683936, "expected": 97683936 },
	        { "time": 158451, "born": 0, "died": 0, "heap": 97683936, "expected": 97683936 },
	        { "time": 158918, "born": 27888, "died": 9568, "heap": 97702256, "expected": 97702256 },
	        { "time": 159417, "born": 32, "died": 0, "heap": 97702288, "expected": 97702288 },
	        { "time": 159877, "born": 0, "died": 0, "heap": 97702288, "expected": 97702288 },
	        { "time": 160377, "born": 0, "died": 19976, "heap": 97682312, "expected": 97682312 },
	        { "time": 160835, "born": 0, "died": 112, "heap": 97682200, "expected": 97682200 },
	        { "time": 161283, "born": 402800, "died": 180360, "heap": 97904640, "expected": 97904640 },
	        { "time": 161732, "born": 295352, "died": 145928, "heap": 98054064, "expected": 98054064 },
	        { "time": 162223, "born": 202184, "died": 121808, "heap": 98134440, "expected": 98134440 },
	        { "time": 162679, "born": 44904, "died": 52480, "heap": 98126864, "expected": 98126864 },
	        { "time": 163129, "born": 144, "died": 112, "heap": 98126896, "expected": 98126896 },
	        { "time": 163594, "born": 0, "died": 205144, "heap": 97921752, "expected": 97921752 },
	        { "time": 164043, "born": 0, "died": 162776, "heap": 97758976, "expected": 97758976 },
	        { "time": 164495, "born": 0, "died": 1680, "heap": 97757296, "expected": 97757296 },
	        { "time": 164942, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 165447, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 165899, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 166365, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 166870, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 167369, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 167815, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 168274, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 168737, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 169250, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 169704, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 170162, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 170618, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 171072, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 171521, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 172030, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 172480, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 172937, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 173383, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 173854, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 174303, "born": 0, "died": 0, "heap": 97757296, "expected": 97757296 },
	        { "time": 174756, "born": 432464, "died": 211792, "heap": 97977968, "expected": 97977968 },
	        { "time": 175216, "born": 293544, "died": 191216, "heap": 98080296, "expected": 98080296 },
	        { "time": 175732, "born": 512, "died": 784, "heap": 98080024, "expected": 98080024 },
	        { "time": 176183, "born": 0, "died": 148496, "heap": 97931528, "expected": 97931528 },
	        { "time": 176640, "born": 0, "died": 217120, "heap": 97714408, "expected": 97714408 },
	        { "time": 177105, "born": 0, "died": 1792, "heap": 97712616, "expected": 97712616 },
	        { "time": 177575, "born": 346512, "died": 100288, "heap": 97958840, "expected": 97958840 },
	        { "time": 178058, "born": 247104, "died": 30616, "heap": 98175328, "expected": 98175328 },
	        { "time": 178516, "born": 12400, "died": 86416, "heap": 98101312, "expected": 98101312 },
	        { "time": 178966, "born": 0, "died": 157824, "heap": 97943488, "expected": 97943488 },
	        { "time": 179428, "born": 0, "died": 94920, "heap": 97848568, "expected": 97848568 },
	        { "time": 179878, "born": 0, "died": 68928, "heap": 97779640, "expected": 97779640 },
	        { "time": 180337, "born": 0, "died": 808, "heap": 97778832, "expected": 97778832 },
	        { "time": 180789, "born": 0, "died": 0, "heap": 97778832, "expected": 97778832 },
	        { "time": 181248, "born": 0, "died": 0, "heap": 97778832, "expected": 97778832 },
	        { "time": 181698, "born": 0, "died": 0, "heap": 97778832, "expected": 97778832 },
	        { "time": 182157, "born": 0, "died": 0, "heap": 97778832, "expected": 97778832 },
	        { "time": 182626, "born": 0, "died": 0, "heap": 97778832, "expected": 97778832 },
	        { "time": 183085, "born": 0, "died": 0, "heap": 97778832, "expected": 97778832 },
	        { "time": 183531, "born": 0, "died": 0, "heap": 97778832, "expected": 97778832 },
	        { "time": 183982, "born": 0, "died": 0, "heap": 97778832, "expected": 97778832 },
	        { "time": 184427, "born": 17768, "died": 5376, "heap": 97791224, "expected": 97791224 },
	        { "time": 184884, "born": 32, "died": 24, "heap": 97791232, "expected": 97791232 },
	        { "time": 185330, "born": 0, "died": 0, "heap": 97791232, "expected": 97791232 },
	        { "time": 185784, "born": 0, "died": 11536, "heap": 97779696, "expected": 97779696 },
	        { "time": 186234, "born": 0, "died": 112, "heap": 97779584, "expected": 97779584 },
	        { "time": 186694, "born": 0, "died": 0, "heap": 97779584, "expected": 97779584 },
	        { "time": 187141, "born": 0, "died": 0, "heap": 97779584, "expected": 97779584 },
	        { "time": 187598, "born": 0, "died": 0, "heap": 97779584, "expected": 97779584 },
	        { "time": 188048, "born": 26872, "died": 4048, "heap": 97802408, "expected": 97802408 },
	        { "time": 188505, "born": 424, "died": 10056, "heap": 97792776, "expected": 97792776 },
	        { "time": 188957, "born": 24760, "died": 13536, "heap": 97804000, "expected": 97804000 },
	        { "time": 189411, "born": 80, "died": 7704, "heap": 97796376, "expected": 97796376 },
	        { "time": 189889, "born": 0, "died": 0, "heap": 97796376, "expected": 97796376 },
	        { "time": 190417, "born": 43336, "died": 20928, "heap": 97818784, "expected": 97818784 },
	        { "time": 190861, "born": 20320, "died": 39040, "heap": 97800064, "expected": 97800064 },
	        { "time": 191316, "born": 576, "died": 0, "heap": 97800640, "expected": 97800640 },
	        { "time": 191766, "born": 0, "died": 8880, "heap": 97791760, "expected": 97791760 },
	        { "time": 192216, "born": 392832, "died": 200392, "heap": 97984200, "expected": 97984200 },
	        { "time": 192678, "born": 223808, "died": 35288, "heap": 98172720, "expected": 98172720 },
	        { "time": 193126, "born": 77392, "died": 116696, "heap": 98133416, "expected": 98133416 },
	        { "time": 193578, "born": 160, "died": 147152, "heap": 97986424, "expected": 97986424 },
	        { "time": 194034, "born": 0, "died": 90784, "heap": 97895640, "expected": 97895640 },
	        { "time": 194481, "born": 0, "died": 126528, "heap": 97769112, "expected": 97769112 },
	        { "time": 194939, "born": 0, "died": 1176, "heap": 97767936, "expected": 97767936 },
	        { "time": 195387, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 195842, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 196292, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 196747, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 197207, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 197669, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 198121, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 198595, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 199048, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 199508, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 199963, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 200471, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 200966, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 201475, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 201985, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 202439, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 202888, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 203352, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 203853, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 204315, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 204760, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 205220, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 205669, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 206122, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 206578, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 207036, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 207490, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 207958, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 208401, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 208862, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 209329, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 209790, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 210291, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 210795, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 211249, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 211704, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 212198, "born": 0, "died": 0, "heap": 97767936, "expected": 97767936 },
	        { "time": 212794, "born": 839512, "died": 308120, "heap": 98299328, "expected": 98299328 },
	        { "time": 213624, "born": 10602480, "died": 2203792, "heap": 106698016, "expected": 106698016 },
	        { "time": 214228, "born": 7514656, "died": 5619176, "heap": 108593496, "expected": 108593496 },
	        { "time": 214717, "born": 226984, "died": 1276528, "heap": 107543952, "expected": 107543952 }]
	};


/***/ },
/* 166 */
/***/ function(module, exports) {

	function sum(f, xs) {
	    var result = 0;
	    for (var i = 0; i < xs.length; i++) {
	        result += f(xs[i]);
	    }
	    return result;
	}
	var LoggedMutator = (function () {
	    function LoggedMutator(time, born, died, label) {
	        this.time = time;
	        this.steps = this.time.length;
	        var n = this.steps;
	        this.duration = this.time[n - 1];
	        this.sumBorn = [born[0]];
	        for (var i = 1; i < n; i++) {
	            this.sumBorn.push(this.sumBorn[i - 1] + born[i]);
	        }
	        this.sumBorn.push(this.sumBorn[n - 1]);
	        this.sumDied = [died[0]];
	        for (var i = 1; i < n; i++) {
	            this.sumDied.push(this.sumDied[i - 1] + died[i]);
	        }
	        this.sumDied.push(this.sumDied[n - 1]);
	        this.totalBorn = this.sumBorn[n];
	        this.totalDied = this.sumDied[n];
	        this.label = label;
	    }
	    LoggedMutator.prototype.findTime = function (time) {
	        if (time >= this.time[this.steps - 1]) {
	            return { index: this.steps - 1, remainder: 0 };
	        }
	        var lower = 0, upper = this.steps - 1;
	        while (lower + 1 < upper) {
	            var middle = (lower + upper) >> 1;
	            if (this.time[middle] <= time) {
	                lower = middle;
	            }
	            else {
	                upper = middle;
	            }
	        }
	        // this.log[lower].time <= time < this.log[upper].time
	        var lowerTime = this.time[lower];
	        var upperTime = this.time[upper];
	        var remainder = (time - lowerTime) / (upperTime - lowerTime);
	        return { index: lower, remainder: remainder };
	    };
	    LoggedMutator.prototype.before = function (sums, time) {
	        var over = sums[time.index + 1] - sums[time.index];
	        return sums[time.index] + over * time.remainder;
	    };
	    LoggedMutator.prototype.bornBetween = function (fromTime, toTime) {
	        var fr = this.before(this.sumBorn, this.findTime(fromTime));
	        var to = this.before(this.sumBorn, this.findTime(toTime));
	        return to - fr;
	    };
	    LoggedMutator.prototype.diedBetween = function (fromTime, toTime) {
	        var fr = this.before(this.sumDied, this.findTime(fromTime));
	        var to = this.before(this.sumDied, this.findTime(toTime));
	        return to - fr;
	    };
	    return LoggedMutator;
	})();
	var RepeatedMutator = (function () {
	    function RepeatedMutator(repeat, mutator) {
	        this.mutator = mutator;
	        this.duration = mutator.duration * repeat;
	        this.totalBorn = mutator.totalBorn * repeat;
	        this.totalDied = mutator.totalDied * repeat;
	        this.label = mutator.label + "*";
	    }
	    RepeatedMutator.prototype.bornBetween = function (fromTime, toTime) {
	        if (fromTime >= this.duration)
	            return 0;
	        toTime = Math.min(toTime, this.duration);
	        var f = this.mutator.bornBetween.bind(this.mutator);
	        return this.compute(f, this.mutator.totalBorn, fromTime, toTime);
	    };
	    RepeatedMutator.prototype.diedBetween = function (fromTime, toTime) {
	        if (fromTime >= this.duration)
	            return 0;
	        toTime = Math.min(toTime, this.duration);
	        var f = this.mutator.diedBetween.bind(this.mutator);
	        return this.compute(f, this.mutator.totalDied, fromTime, toTime);
	    };
	    RepeatedMutator.prototype.compute = function (f, totalPerCycle, fromTime, toTime) {
	        var period = this.mutator.duration;
	        var fromCycle = Math.floor(fromTime / period);
	        var fromRemainder = fromTime - fromCycle * period;
	        var toCycle = Math.floor(toTime / period);
	        var toRemainder = toTime - toCycle * period;
	        if (fromCycle === toCycle) {
	            return f(fromRemainder, toRemainder);
	        }
	        else {
	            var fullCycles = toCycle - fromCycle - 1;
	            return fullCycles * totalPerCycle + f(fromRemainder, period) + f(0, toRemainder);
	        }
	    };
	    return RepeatedMutator;
	})();
	var ShiftedMutator = (function () {
	    function ShiftedMutator(shift, mutator) {
	        this.mutator = mutator;
	        this.shift = shift;
	        this.duration = mutator.duration + shift;
	        this.totalBorn = mutator.totalBorn;
	        this.totalDied = mutator.totalDied;
	        this.label = mutator.label;
	    }
	    ShiftedMutator.prototype.bornBetween = function (fromTime, toTime) {
	        fromTime = Math.max(0, fromTime - this.shift);
	        toTime = Math.max(0, toTime - this.shift);
	        return this.mutator.bornBetween(fromTime, toTime);
	    };
	    ShiftedMutator.prototype.diedBetween = function (fromTime, toTime) {
	        fromTime = Math.max(0, fromTime - this.shift);
	        toTime = Math.min(toTime, this.duration);
	        return this.mutator.diedBetween(fromTime, toTime);
	    };
	    return ShiftedMutator;
	})();
	var ScaledMutator = (function () {
	    function ScaledMutator(scale, mutator) {
	        this.mutator = mutator;
	        this.scale = scale;
	        this.duration = mutator.duration * scale;
	        this.totalBorn = mutator.totalBorn;
	        this.totalDied = mutator.totalDied;
	        this.label = mutator.label;
	    }
	    ScaledMutator.prototype.bornBetween = function (fromTime, toTime) {
	        fromTime = fromTime / this.scale;
	        toTime = toTime / this.scale;
	        return this.mutator.bornBetween(fromTime, toTime);
	    };
	    ScaledMutator.prototype.diedBetween = function (fromTime, toTime) {
	        fromTime = fromTime / this.scale;
	        toTime = toTime / this.scale;
	        return this.mutator.diedBetween(fromTime, toTime);
	    };
	    return ScaledMutator;
	})();
	var AddedMutator = (function () {
	    function AddedMutator(mutators) {
	        this.mutators = mutators;
	        this.totalBorn = sum(function (x) { return x.totalBorn; }, mutators);
	        this.totalDied = sum(function (x) { return x.totalDied; }, mutators);
	        this.label = mutators.map(function (x) { return x.label; }).join(", ");
	    }
	    AddedMutator.prototype.bornBetween = function (fromTime, toTime) {
	        return sum(function (x) { return x.bornBetween(fromTime, toTime); }, this.mutators);
	    };
	    AddedMutator.prototype.diedBetween = function (fromTime, toTime) {
	        return sum(function (x) { return x.diedBetween(fromTime, toTime); }, this.mutators);
	    };
	    return AddedMutator;
	})();
	function create(duration, born, died) {
	    var n = born.length;
	    var interval = duration / n;
	    var time = [];
	    for (var i = 0; i <= n; i++) {
	        time.push(interval * i);
	    }
	    return new LoggedMutator(time, [0].concat(born), [0].concat(died), "");
	}
	exports.create = create;
	var LogEntry = (function () {
	    function LogEntry() {
	    }
	    return LogEntry;
	})();
	function fromJSON(json, label) {
	    var entries = JSON.parse(json).data;
	    var time = entries.map(function (x) { return x.time; });
	    var born = entries.map(function (x) { return x.born; });
	    var died = entries.map(function (x) { return x.died; });
	    return new LoggedMutator(time, born, died, label);
	}
	exports.fromJSON = fromJSON;
	function fromLog(data, label) {
	    var entries = data.data;
	    var time = entries.map(function (x) { return x.time; });
	    var born = entries.map(function (x) { return x.born; });
	    var died = entries.map(function (x) { return x.died; });
	    return new LoggedMutator(time, born, died, label);
	}
	exports.fromLog = fromLog;
	function repeat(repeatCount, mutator) {
	    return new RepeatedMutator(repeatCount, mutator);
	}
	exports.repeat = repeat;
	function shift(shiftTime, mutator) {
	    return new ShiftedMutator(shiftTime, mutator);
	}
	exports.shift = shift;
	function scale(scaleTime, mutator) {
	    return new ScaledMutator(scaleTime, mutator);
	}
	exports.scale = scale;
	function add(mutator1, mutator2) {
	    var mutators = [mutator1, mutator2];
	    return new AddedMutator(mutators);
	}
	exports.add = add;


/***/ },
/* 167 */
/***/ function(module, exports) {

	function sources() {
	    return [
	        "{\n    factor: 1.5,\n    heapLimit: 0,\n    timeLimit: 0,\n    label: function () {\n      return \"Factor Based (\" + this.factor.toString() + \")\";\n    },\n    onStart: function (time, heap) {\n      this.heapLimit = Math.max(1000, heap * this.factor);\n      this.timeLimit = 0;\n    },\n    onTimeLimit: function (time, heap) {\n      throw \"unreachable\";\n    },\n    onHeapLimit: function (time, heap) {\n      return true;\n    },\n    onGarbageCollection: function(time, duration, heapBefore, heapAfter) {\n      this.heapLimit = Math.max(1000, heapAfter * this.factor);\n    }\n}",
	        "{\n    interval: 1000,\n    heapLimit: 0,\n    timeLimit: 0,\n    label: function () {\n      return \"Time Based (\" + this.interval.toString() + \"ms)\";\n    },\n    onStart: function (time, heap) {\n      this.heapLimit = 0;\n      this.timeLimit = time + this.interval;\n    },\n    onTimeLimit: function (time, heap) {\n      return true;\n    },\n    onHeapLimit: function (time, heap) {\n      throw \"unreachable\";\n    },\n    onGarbageCollection: function(time, duration, heapBefore, heapAfter) {\n      this.timeLimit = time + this.interval;\n    }\n}"];
	}
	exports.sources = sources;


/***/ }
/******/ ]);